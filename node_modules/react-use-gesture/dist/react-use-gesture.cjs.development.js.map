{"version":3,"file":"react-use-gesture.cjs.development.js","sources":["../src/types.ts","../src/utils.ts","../src/defaults.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/HoverRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/PinchWheelRecognizer.ts","../src/recognizers/PinchWebKitGestureRecognizer.ts","../src/controllers/GestureController.ts","../src/hooks.ts"],"sourcesContent":["import React from 'react'\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport type AtLeastOneOf<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]\n\nexport type Vector2 = [number, number]\nexport type Fn = (...args: any[]) => any\n\nexport type EventOptions = { capture?: boolean; passive?: boolean }\n\nexport interface GestureConfig {\n  domTarget?: EventTarget | React.RefObject<EventTarget> | null\n  event: EventOptions\n  window?: EventTarget\n  dragDelay: boolean | number\n  passiveEvents: boolean\n  pointerEvents: boolean\n  enabled: boolean\n  drag: boolean\n  pinch: boolean\n  scroll: boolean\n  wheel: boolean\n  hover: boolean\n  move: boolean\n}\n\nexport enum GestureFlag {\n  OnStart = 'start',\n  OnChange = 'change',\n  OnEnd = 'end',\n}\n\nexport type WebKitGestureEvent = React.PointerEvent & { scale: number; rotation: number }\nexport type UseGestureEvent<\n  T extends React.SyntheticEvent = React.MouseEvent | React.TouchEvent | React.WheelEvent | React.PointerEvent | WebKitGestureEvent\n> = T & {\n  gesture?: GestureKey\n}\n\nexport interface ReactEventHandlers {\n  // Mouse Events\n  onMouseDown?: React.MouseEventHandler\n  onMouseDownCapture?: React.MouseEventHandler\n  onMouseEnter?: React.MouseEventHandler\n  onMouseLeave?: React.MouseEventHandler\n  onMouseMove?: React.MouseEventHandler\n  onMouseMoveCapture?: React.MouseEventHandler\n  onMouseOut?: React.MouseEventHandler\n  onMouseOutCapture?: React.MouseEventHandler\n  onMouseOver?: React.MouseEventHandler\n  onMouseOverCapture?: React.MouseEventHandler\n  onMouseUp?: React.MouseEventHandler\n  onMouseUpCapture?: React.MouseEventHandler\n  // Touch Events\n  onTouchCancel?: React.TouchEventHandler\n  onTouchCancelCapture?: React.TouchEventHandler\n  onTouchEnd?: React.TouchEventHandler\n  onTouchEndCapture?: React.TouchEventHandler\n  onTouchMove?: React.TouchEventHandler\n  onTouchMoveCapture?: React.TouchEventHandler\n  onTouchStart?: React.TouchEventHandler\n  onTouchStartCapture?: React.TouchEventHandler\n\n  // Pointer Events\n  onPointerDown?: React.PointerEventHandler\n  onPointerDownCapture?: React.PointerEventHandler\n  onPointerMove?: React.PointerEventHandler\n  onPointerMoveCapture?: React.PointerEventHandler\n  onPointerUp?: React.PointerEventHandler\n  onPointerUpCapture?: React.PointerEventHandler\n  onPointerCancel?: React.PointerEventHandler\n  onPointerCancelCapture?: React.PointerEventHandler\n  onPointerEnter?: React.PointerEventHandler\n  onPointerEnterCapture?: React.PointerEventHandler\n  onPointerLeave?: React.PointerEventHandler\n  onPointerLeaveCapture?: React.PointerEventHandler\n  onPointerOver?: React.PointerEventHandler\n  onPointerOverCapture?: React.PointerEventHandler\n  onPointerOut?: React.PointerEventHandler\n  onPointerOutCapture?: React.PointerEventHandler\n  onGotPointerCapture?: React.PointerEventHandler\n  onGotPointerCaptureCapture?: React.PointerEventHandler\n  onLostPointerCapture?: React.PointerEventHandler\n  onLostPointerCaptureCapture?: React.PointerEventHandler\n\n  // UI Events\n  onScroll?: React.UIEventHandler\n  onScrollCapture?: React.UIEventHandler\n\n  // Wheel Events\n  onWheel?: React.WheelEventHandler\n  onWheelCapture?: React.WheelEventHandler\n\n  // Cheat mode for Gesture Events\n  onGestureStart?: Fn\n  onGestureChange?: Fn\n  onGestureEnd?: Fn\n}\n\nexport type ReactEventHandlerKey = keyof ReactEventHandlers\n\nexport type GestureKey = 'drag' | 'pinch' | 'move' | 'scroll' | 'wheel' | 'hover'\nexport type StateKey = Exclude<GestureKey, 'hover'>\n\nexport interface SharedGestureState {\n  hovering: boolean\n  scrolling: boolean\n  wheeling: boolean\n  dragging: boolean\n  moving: boolean\n  pinching: boolean\n  touches: number\n  down: boolean\n  buttons: number\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\nexport interface CommonGestureState {\n  event?: UseGestureEvent\n  currentTarget?: EventTarget | null\n  pointerId?: number | null\n  values: Vector2\n  delta: Vector2\n  movement: Vector2\n  offset: Vector2\n  initial: Vector2\n  previous: Vector2\n  direction: Vector2\n  first: boolean\n  last: boolean\n  active: boolean\n  time?: number\n  cancel?(): void\n  canceled: boolean\n  memo?: any\n  args?: any\n}\n\nexport interface Coordinates {\n  xy: Vector2\n  velocity: number\n  vxvy: Vector2\n  distance: number\n}\n\nexport interface DistanceAngle {\n  da: Vector2\n  vdva: Vector2\n  origin?: Vector2\n  turns: number\n}\n\nexport type GestureState<T extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> = T & CommonGestureState\nexport type FullGestureState<T extends Coordinates | DistanceAngle> = SharedGestureState & GestureState<T>\n\nexport type StateObject = { shared: SharedGestureState } & { [K in StateKey]: GestureState<Coordinates | DistanceAngle> }\n\nexport type Handler<T extends Coordinates | DistanceAngle> = (state: FullGestureState<T>) => any | void\nexport type HandlerKey = 'onDrag' | 'onPinch' | 'onMove' | 'onHover' | 'onScroll' | 'onWheel'\n\nexport type GestureHandlers = {\n  onDrag: Handler<Coordinates>\n  onDragStart: Handler<Coordinates>\n  onDragEnd: Handler<Coordinates>\n  onHover: Handler<Coordinates>\n  onMove: Handler<Coordinates>\n  onMoveStart: Handler<Coordinates>\n  onMoveEnd: Handler<Coordinates>\n  onScroll: Handler<Coordinates>\n  onScrollStart: Handler<Coordinates>\n  onScrollEnd: Handler<Coordinates>\n  onWheel: Handler<Coordinates>\n  onWheelStart: Handler<Coordinates>\n  onWheelEnd: Handler<Coordinates>\n  onPinch: Handler<DistanceAngle>\n  onPinchStart: Handler<DistanceAngle>\n  onPinchEnd: Handler<DistanceAngle>\n}\n\n/* Handlers should also accept DomAttributes to prevent overrides */\nexport type GestureHandlersPartial = AtLeastOneOf<GestureHandlers> &\n  Partial<Omit<React.DOMAttributes<Element>, 'onDrag' | 'onScroll' | 'onWheel'>>\n","import React from 'react'\nimport { Fn, Vector2, EventOptions, Coordinates, FullGestureState, DistanceAngle, UseGestureEvent } from './types'\n\n// blank function\nexport const noop = () => {}\n\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\n// vector add\nexport const addV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v + v2[i])\n\n// vector substract\nexport const subV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v - v2[i])\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([type, fn]) => el[action](type, fn, options))\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\ntype ScrollEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets scroll event data\n * @param event\n * @returns scroll event data\n */\nexport function getScrollEventData(event: UseGestureEvent): ScrollEventData {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = <Element & Window>event.currentTarget\n  return { xy: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0], ...getModifierKeys(event) }\n}\n\ntype WheelEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets wheel event data\n * @param event\n * @returns wheel event data\n */\nexport function getWheelEventData(event: UseGestureEvent<React.WheelEvent>): WheelEventData {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { xy: [deltaX, deltaY], ...getModifierKeys(event) }\n}\n\ntype PointerEventData = Pick<FullGestureState<Coordinates>, 'xy' | 'touches' | 'down' | 'buttons'> & ModifierKeys\n/**\n * Gets pointer event data\n * @param event\n * @returns pointer event data\n */\nexport function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData {\n  const { touches, buttons, changedTouches } = event as any\n  const touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : event\n  const down = (touchEvents && touchEvents.length > 0) || buttons > 0\n  return {\n    xy: [clientX, clientY],\n    touches: (touchEvents && touchEvents.length) || 0,\n    down,\n    buttons,\n    ...getModifierKeys(event),\n  }\n}\n\ntype TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'da' | 'touches' | 'down' | 'origin'> & ModifierKeys\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const da: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { da, origin, touches: 2, down: touches.length > 0, ...getModifierKeys(event) }\n}\n\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return delta_t ? <T>delta.map(v => v / delta_t) : <T>Array(delta.length).fill(0)\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return <T>delta.map(v => v / len!)\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function gestureEventSupported(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n","import { noop } from './utils'\nimport { GestureConfig, HandlerKey, CommonGestureState, Coordinates, DistanceAngle, StateObject, StateKey, GestureKey } from './types'\n\ntype MappedKeys = { [K in GestureKey]: { stateKey: StateKey; handlerKey: HandlerKey } }\n\n/**\n * Some gestures might use the state key from another gesture (i.e. hover)\n * so mappedKeys is a commodity object to get the state key and handler key\n * for every gesture\n */\nexport const mappedKeys: MappedKeys = {\n  drag: { stateKey: 'drag', handlerKey: 'onDrag' },\n  pinch: { stateKey: 'pinch', handlerKey: 'onPinch' },\n  move: { stateKey: 'move', handlerKey: 'onMove' },\n  scroll: { stateKey: 'scroll', handlerKey: 'onScroll' },\n  wheel: { stateKey: 'wheel', handlerKey: 'onWheel' },\n  hover: { stateKey: 'move', handlerKey: 'onHover' },\n}\n\n// default config (will extend user config)\nexport const defaultConfig: GestureConfig = {\n  domTarget: undefined,\n  event: { passive: true, capture: false },\n  window: typeof window !== 'undefined' ? window : undefined,\n  dragDelay: false,\n  passiveEvents: true,\n  pointerEvents: false,\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true,\n}\n\n// common initial state for all gestures\nexport const initialCommon: CommonGestureState = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  delta: [0, 0],\n  movement: [0, 0],\n  offset: [0, 0],\n  direction: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined,\n}\n\n// initial state for coordinates-based gestures\nconst initialCoordinates: Coordinates = { xy: [0, 0], vxvy: [0, 0], velocity: 0, distance: 0 } // xy coordinates\n\n// initial state for distance and angle-based gestures (pinch)\nconst initialDistanceAngle: DistanceAngle = { da: [0, 0], vdva: [0, 0], origin: undefined, turns: 0 } // distance and angle\n\n// initial state object (used by the gesture controller)\nexport const initialState: StateObject = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  },\n  move: { ...initialCommon, ...initialCoordinates },\n  drag: { ...initialCommon, ...initialCoordinates },\n  scroll: { ...initialCommon, ...initialCoordinates },\n  wheel: { ...initialCommon, ...initialCoordinates },\n  pinch: { ...initialCommon, ...initialDistanceAngle },\n}\n\n// generic end state for all gestures\nexport const genericEndState: Partial<CommonGestureState> = { first: false, last: true, active: false }\n","import { mappedKeys, genericEndState, initialState } from '../defaults'\nimport GestureController from '../controllers/GestureController'\nimport {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  GestureState,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  UseGestureEvent,\n  Vector2,\n} from '../types'\nimport { noop, subV, calculateAllKinematics } from '../utils'\n\ntype PayloadFromEvent = {\n  values: Vector2\n  gesturePayload?: Partial<GestureState>\n  sharedPayload?: Partial<SharedGestureState>\n}\n\n/**\n * Recognizer abstract class\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> {\n  protected stateKey: StateKey\n  protected sharedStartState?: Partial<SharedGestureState>\n  protected sharedEndState?: Partial<SharedGestureState>\n\n  /**\n   * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.\n   * In other words, these gestures also start with a delta.\n   */\n  protected continuousGesture = false\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: GestureKey,\n    protected readonly controller: GestureController,\n    protected readonly args: any[] = []\n  ) {\n    // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n    this.stateKey = mappedKeys[gestureKey].stateKey\n  }\n\n  // is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.controller.config[this.gestureKey]\n  }\n  // get the controller state for a given gesture\n  protected get state() {\n    return this.controller.state[this.stateKey] as GestureState<GestureType>\n  }\n\n  // convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  protected abstract getPayloadFromEvent(event: UseGestureEvent): PayloadFromEvent\n\n  /**\n   * Utility function to get kinematics of the gesture\n   * @values values we want to calculate the kinematics from\n   * @event\n   * @returns set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: [number, number | undefined], event: UseGestureEvent): Partial<GestureState<GestureType>>\n\n  // should return the bindings for a given gesture\n  public abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][]\n\n  /**\n   * convenience method to update the controller state for a given gesture\n   * @param sharedState shared partial state object\n   * @param gestureState partial state object for the gesture handled by the recognizer\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  protected updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState<GestureType>>): void => {\n    this.controller.updateState(sharedState, gestureState, this.stateKey)\n  }\n\n  protected fireGestureHandler = (gestureFlag: GestureFlag): void => {\n    this.controller.fireGestureHandler(this.gestureKey, gestureFlag)\n  }\n\n  // generic onStart function\n  protected onStart = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n\n    // TODO probably needs some rework, initialState and resetState should be different\n\n    const startState: GestureState<GestureType> = {\n      ...(initialState[this.stateKey] as GestureState<GestureType>),\n      values,\n      event,\n      first: true,\n      active: true,\n      time: event.timeStamp,\n      args: this.args,\n    }\n\n    const { values: prevValues, offset } = this.state\n\n    if (this.continuousGesture) {\n      startState.initial = startState.previous = prevValues\n      startState.delta = startState.movement = subV(values, prevValues)\n      startState.offset = values\n      Object.assign(startState, calculateAllKinematics(startState.movement, startState.delta, 0))\n    } else {\n      startState.initial = startState.previous = values\n      startState.offset = offset\n    }\n\n    this.updateState({ ...this.sharedStartState, ...sharedPayload }, { ...startState, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnStart)\n  }\n\n  // generic onChange function\n  protected onChange = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n    this.updateState({ ...sharedPayload }, { first: false, ...kinematics, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  // generic onEnd function\n  protected onEnd = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    if (!this.state.active) return\n    this.removeWindowListeners()\n    this.updateState(this.sharedEndState!, { event, ...genericEndState, ...payload } as Partial<GestureState<GestureType>>)\n    this.fireGestureHandler(GestureFlag.OnEnd)\n  }\n\n  // generic cancel function\n  protected onCancel = (event: UseGestureEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop } as Partial<GestureState<GestureType>>)\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  // generic gesture handler for timeout-based gestures\n  protected timeoutHandler = (event: UseGestureEvent) => {\n    if (!this.enabled) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    if (!this.state.active) this.onStart(event)\n    else this.onChange(event)\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, subV, calculateAllKinematics } from '../utils'\nimport { Coordinates, GestureState, Vector2, UseGestureEvent } from '../types'\n\n/**\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer extends Recognizer<Coordinates> {\n  getKinematics(values: Vector2, event: UseGestureEvent): Partial<GestureState<Coordinates>> {\n    // we get the gesture specific state\n    const { values: xy, initial, offset, time } = this.state\n\n    // offset is the difference between the current and initial value vectors\n    const movement = subV(values, initial)\n    // delta is the difference between the current and previous value vectors\n    const delta = subV(values, xy)\n\n    const delta_t = event.timeStamp - time!\n    const { velocity, velocities, distance, direction } = calculateAllKinematics(movement, delta, delta_t)\n\n    return {\n      event,\n      values,\n      movement,\n      offset: addV(offset, delta),\n      delta,\n      velocity,\n      vxvy: velocities,\n      distance,\n      direction,\n      previous: xy,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\n\nexport default class DragRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { dragging: true, down: true }\n  sharedEndState = { dragging: false, down: false, buttons: 0, touches: 0 }\n\n  delayedEvent = false\n\n  constructor(controller: GestureController, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n\n    // making sure we're not dragging the element when more than one finger press the screen\n    const { touches } = getPointerEventData(event)\n    if (touches > 1) return\n\n    const { currentTarget, pointerId } = event as PointerEvent\n    if (this.controller.config.pointerEvents) {\n      // if pointers events\n      currentTarget && (currentTarget as any).setPointerCapture(pointerId)\n    } else {\n      this.removeWindowListeners()\n      const dragListeners: [string, Fn][] = [\n        ['mousemove', this.onDragChange],\n        ['touchmove', this.onDragChange],\n        ['mouseup', this.onDragEnd],\n        ['touchend', this.onDragEnd],\n        ['touchcancel', this.onDragEnd],\n      ]\n      this.addWindowListeners(dragListeners)\n    }\n\n    if (this.controller.config.dragDelay) {\n      const dragDelay = typeof this.controller.config.dragDelay === 'number' ? this.controller.config.dragDelay : DEFAULT_DRAG_DELAY\n      if (typeof event.persist === 'function') event.persist()\n      this.delayedEvent = true\n      this.setTimeout(() => this.startDrag(event), dragDelay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag = (event: UseGestureEvent): void => {\n    const { currentTarget, pointerId } = event as PointerEvent\n    this.onStart(event, { currentTarget, pointerId, cancel: () => this.onCancel(event) })\n    this.delayedEvent = false\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled) return\n\n    if (!active) {\n      if (this.delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const { buttons, touches } = getPointerEventData(event)\n\n    if (buttons === 0 && touches === 0) {\n      this.onEnd(event)\n      return\n    }\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.clearTimeout()\n    this.delayedEvent = false\n\n    if (!this.state.active) return\n\n    const { currentTarget, pointerId } = this.state\n    if (currentTarget && this.controller.config.pointerEvents) (currentTarget as any).releasePointerCapture(pointerId)\n    this.onEnd(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerDown', this.onDragStart], ['onPointerMove', this.onDragChange], [['onPointerUp'], this.onDragEnd]]\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onDragStart]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getScrollEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { scrolling: true }\n  sharedEndState = { scrolling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getScrollEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onScroll', this.timeoutHandler]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { addV, getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { wheeling: true }\n  sharedEndState = { wheeling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const { xy: prevXY } = this.state\n    const { xy, ...sharedPayload } = getWheelEventData(event)\n    const values = addV(xy, prevXY)\n\n    return { values, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (event.ctrlKey && this.controller.actions.has('onPinch')) return\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { moving: true }\n  sharedEndState = { moving: false, velocity: 0, vxvy: [0, 0] }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('move', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerMove', this.timeoutHandler]]\n    }\n    return [['onMouseMove', this.timeoutHandler]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { GestureFlag, UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class HoverRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('hover', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onPointerEnter = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    this.updateState({ hovering: true, ...sharedPayload }, { values, event, args: this.args })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  onPointerLeave = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateState({ hovering: false, moving: false, ...sharedPayload }, { ...kinematics, ...genericEndState, velocity: 0, vxvy: [0, 0] })\n\n    // when the mouse leaves the element, we also fire the move handler\n    // without waiting for move to end with debounce\n    this.controller.fireGestureHandler('move', GestureFlag.OnEnd)\n    this.controller.fireGestureHandler('hover', GestureFlag.OnChange)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerEnter', this.onPointerEnter], ['onPointerLeave', this.onPointerLeave]]\n    }\n    return [['onMouseEnter', this.onPointerEnter], ['onMouseLeave', this.onPointerLeave]]\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, calculateVelocities, calculateDirection } from '../utils'\nimport { DistanceAngle, GestureState, Vector2, UseGestureEvent, GestureKey } from '../types'\nimport GestureController from '../controllers/GestureController'\n\n/**\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer extends Recognizer<DistanceAngle> {\n  constructor(gestureKey: GestureKey, controller: GestureController, args: any[] = []) {\n    super(gestureKey, controller, args)\n  }\n\n  getKinematics([d, a]: [number, number?], event: UseGestureEvent): Partial<GestureState<DistanceAngle>> {\n    const { values: da, turns, initial, offset, time } = this.state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a !== void 0 ? a : da[1]\n\n    const delta_d = d - da[0]\n    let delta_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns\n\n    // we update the angle difference to its corrected value\n    delta_a -= 360 * (newTurns - turns)\n    const delta = [delta_d, delta_a] as Vector2\n\n    const movement_d = d - initial[0]\n    const movement_a = a - 360 * newTurns - initial[1]\n    const movement: Vector2 = [movement_d, movement_a]\n\n    const delta_t = event.timeStamp - time!\n    const vdva = calculateVelocities(delta, delta_t)\n    const direction = calculateDirection(delta)\n    return {\n      event,\n      values: [d, a],\n      movement,\n      delta,\n      offset: addV(offset, delta),\n      vdva,\n      direction,\n      turns: newTurns,\n      previous: da,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<TouchEvent>) {\n    const { da, origin, ...sharedPayload } = getTwoTouchesEventData(event)\n    return { values: da, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onPinchStart = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    this.onStart(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: UseGestureEvent<TouchEvent>): void => {\n    const { canceled, active, time } = this.state\n    if (canceled || !active || event.touches.length !== 2 || event.timeStamp === time) return\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onTouchStart', this.onPinchStart], ['onTouchMove', this.onPinchChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn, Vector2 } from '../types'\n\nexport default class PinchWheelRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const {\n      xy: [, delta_d],\n      ...sharedPayload\n    } = getWheelEventData(event)\n    const {\n      da: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n    const origin: Vector2 = [event.clientX, event.clientY]\n    return { values: [d, a] as Vector2, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!event.ctrlKey) return\n\n    if (!this.controller.config.passiveEvents) event.preventDefault()\n    else if (process.env.NODE_ENV === 'development')\n      console.warn(\n        'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n      )\n\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, WebKitGestureEvent, Fn, Vector2 } from '../types'\n\nconst SCALE_FACTOR = 260\n\nexport default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true, down: true, touches: 2 }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n  private origin?: Vector2\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WebKitGestureEvent>) {\n    return { values: [event.scale * SCALE_FACTOR, event.rotation] as Vector2 }\n  }\n\n  onPinchStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault()\n    const origin: Vector2 = this.origin ? this.origin : [event.clientX, event.clientY]\n\n    this.onStart(event, { origin, cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: WebKitGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled || !active) return\n    event.preventDefault()\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    this.onEnd(event)\n    event.preventDefault()\n    this.origin = undefined\n  }\n\n  updateTouchData = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.origin = origin\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [\n      ['onGestureStart', this.onPinchStart],\n      ['onGestureChange', this.onPinchChange],\n      [['onGestureEnd', 'onTouchCancel'], this.onGestureEnd],\n      [['onTouchStart', 'onTouchMove'], this.updateTouchData],\n    ]\n  }\n}\n","import {\n  StateKey,\n  StateObject,\n  GestureState,\n  SharedGestureState,\n  GestureKey,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  ReactEventHandlers,\n  GestureConfig,\n  GestureHandlers,\n  HandlerKey,\n  GestureHandlersPartial,\n} from '../types'\n\nimport { initialState, mappedKeys } from '../defaults'\nimport { addListeners, removeListeners, gestureEventSupported, chainFns } from '../utils'\n\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport HoverRecognizer from '../recognizers/HoverRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport PinchWheelRecognizer from '../recognizers/PinchWheelRecognizer'\nimport PinchWebKitGestureRecognizer from '../recognizers/PinchWebKitGestureRecognizer'\nimport Recognizer from 'recognizers/Recognizer'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] | Fn }>\n\n/**\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\n * and keep track of the state for all gestures\n *\n * @template BinderType the type the bind function should return\n */\nexport default class GestureController {\n  public state: StateObject = initialState // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  public actions: Set<HandlerKey>\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  constructor(public handlers: GestureHandlersPartial, public config: GestureConfig) {\n    // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n    // actions will include 'onDrag' and 'onMove'\n    this.actions = new Set(Object.keys(this.handlers).map(k => <HandlerKey>k.replace(/End|Start/, '')))\n  }\n\n  /**\n   * Function run on component unmount\n   * Cleans timeouts and removes dom listeners set by the bind function\n   */\n  public clean = (): void => {\n    this.cleanOnBind()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(<StateKey>stateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render)\n   * Reset the binding object and remove dom listeners attached to config.domTarget\n   */\n  private cleanOnBind = (): void => {\n    this.bindings = {}\n    const { domTarget } = this.config\n    if (domTarget) {\n      removeListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Commodity function to let gesture recognizer update global state\n   * @param sharedState shared partial state object\n   * @param gestureState partial gesture specific state object\n   * @param stateKey the state key ('drag', 'move'...)\n   */\n  public updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState>, stateKey: StateKey): void => {\n    const newGestureState = { ...this.state[stateKey], ...gestureState }\n\n    if ('da' in newGestureState) newGestureState.da = newGestureState.values\n    else if ('xy' in newGestureState) newGestureState.xy = newGestureState.values\n\n    this.state = {\n      ...this.state,\n      shared: { ...this.state.shared, ...sharedState },\n      [stateKey]: newGestureState,\n    }\n  }\n\n  // fire the gesture handler defined by the user\n  public fireGestureHandler = (gestureKey: GestureKey, gestureFlag: GestureFlag): void => {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    const { stateKey, handlerKey } = mappedKeys[gestureKey]\n    const state = { ...this.state.shared, ...this.state[stateKey] }\n    if (state.event) state.event.gesture = gestureKey\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      const handlerStart = `${handlerKey}Start` as keyof GestureHandlers\n      const handler = this.handlers[handlerStart] as any\n      handler && handler(state)\n    }\n\n    // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n    const handler = this.handlers[handlerKey] as any\n    if (handler) {\n      const newMemo = handler(state)\n      this.state[stateKey].memo = newMemo !== void 0 ? newMemo : this.state[stateKey].memo\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      const handlerEnd = `${handlerKey}End` as keyof GestureHandlers\n      const handler = this.handlers[handlerEnd] as any\n      handler && handler(state)\n    }\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window\n   * @param stateKey\n   * @param listeners\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.event)\n  }\n\n  // commodity function to let recognizers simply remove listeners from config.window\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.event)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * Adds a recognizer to this.bindings\n   * @param recognizer\n   */\n  private addRecognizer = (recognizer: Recognizer): void => {\n    recognizer.getEventBindings().map(this.addEventBindings)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  private addEventBindings = ([eventNames, fn]: [ReactEventHandlerKey | ReactEventHandlerKey[], Fn]): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n\n    eventNamesArray.forEach(eventName => {\n      this.bindings[eventName] = this.bindings[eventName] ? [...(<Fn[]>this.bindings[eventName]), fn] : [fn]\n    })\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  private addDomTargetListeners = (): void => {\n    const { domTarget } = this.config\n\n    // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(<Fn[]>fns))])\n    })\n\n    addListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with\n   */\n  private getBindings = (): ReactEventHandlers => {\n    const output: ReactEventHandlers = {}\n    const captureString = this.config.event.capture ? 'Capture' : ''\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      output[key] = chainFns(...(<Fn[]>fnsArray))\n    })\n\n    return output\n  }\n\n  public bind = (...args: any[]): Fn | ReactEventHandlers => {\n    const { domTarget } = this.config\n\n    const genuineHandlers = { ...this.handlers }\n\n    // cleaning before adding\n    this.cleanOnBind()\n\n    if (this.actions.has('onDrag')) {\n      this.addRecognizer(new DragRecognizer(this, args))\n      delete genuineHandlers.onDrag\n      delete genuineHandlers.onDragStart\n      delete genuineHandlers.onDragEnd\n    }\n    if (this.actions.has('onScroll')) {\n      this.addRecognizer(new ScrollRecognizer(this, args))\n      delete genuineHandlers.onScroll\n      delete genuineHandlers.onScrollStart\n      delete genuineHandlers.onScrollEnd\n    }\n    if (this.actions.has('onWheel')) {\n      this.addRecognizer(new WheelRecognizer(this, args))\n      delete genuineHandlers.onWheel\n      delete genuineHandlers.onWheelStart\n      delete genuineHandlers.onWheelEnd\n    }\n    if (this.actions.has('onMove')) {\n      this.addRecognizer(new MoveRecognizer(this, args))\n      delete genuineHandlers.onMove\n      delete genuineHandlers.onMoveStart\n      delete genuineHandlers.onMoveEnd\n    }\n    if (this.actions.has('onHover')) {\n      this.addRecognizer(new HoverRecognizer(this, args))\n      delete genuineHandlers.onHover\n    }\n    if (this.actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && gestureEventSupported()) {\n        this.addRecognizer(new PinchWebKitGestureRecognizer(this, args))\n      } else {\n        this.addRecognizer(new PinchRecognizer(this, args))\n        this.addRecognizer(new PinchWheelRecognizer(this, args))\n      }\n      delete genuineHandlers.onPinch\n      delete genuineHandlers.onPinchStart\n      delete genuineHandlers.onPinchEnd\n    }\n\n    // we also add event bindings for genuine handlers\n    Object.entries(genuineHandlers).map(([event, fn]) => {\n      // we're cheating when it comes to event type :(\n      this.addEventBindings([<ReactEventHandlerKey>event, <Fn>fn])\n    })\n\n    // if config.domTarget is set we add event listeners to it and return the clean function\n    if (domTarget) {\n      this.addDomTargetListeners()\n      return this.clean\n    }\n\n    // if not, we return an object that contains gesture handlers mapped to react handler event keys\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport GestureController from './controllers/GestureController'\nimport { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle, Omit } from './types'\nimport { defaultConfig } from './defaults'\n\n/** API\n * const bind = useDrag(() => { ... })\n * const bind = usePinch(() => { ... })\n * const bind = useMove(() => { ... })\n * const bind = useScroll(() => { ... })\n * const bind = useWheel(() => { ... })\n *\n * Handlers object:\n * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })\n *\n * DomTarget:\n * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })\n * React.useEffect(bind, [bind])\n */\n\ntype PartialGestureConfig = Partial<Omit<GestureConfig, 'passiveEvents'>>\ntype GetBinderTypeFromDomTarget<T extends PartialGestureConfig> = T['domTarget'] extends object ? Fn : ReactEventHandlers\n\nexport function useGesture<Config extends PartialGestureConfig>(\n  handlers: GestureHandlersPartial,\n  config?: Config\n): (...args: any[]) => GetBinderTypeFromDomTarget<Config> {\n  // the gesture controller will keep track of all gesture states\n  const gestureController = React.useRef<GestureController>()\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(handlers, getDerivedConfig(config))\n  }\n\n  React.useEffect(() => {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current!.config = getDerivedConfig(config)\n    gestureController.current!.handlers = handlers\n  }, [handlers, config])\n\n  // when the user component unmounts, we run our gesture controller clean function\n  React.useEffect(() => gestureController.current!.clean, [])\n\n  // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n  return gestureController.current.bind as (...args: any[]) => GetBinderTypeFromDomTarget<Config>\n}\n\n/* SHORTHAND HANDLERS */\nexport const useDrag = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onDrag: handler }, config)\nexport const useMove = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onMove: handler }, config)\nexport const useHover = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onHover: handler }, config)\nexport const useScroll = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onScroll: handler }, config)\nexport const useWheel = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onWheel: handler }, config)\nexport const usePinch = (handler: Handler<DistanceAngle>, config?: PartialGestureConfig) => useGesture({ onPinch: handler }, config)\n\nfunction getDerivedConfig(config?: Partial<GestureConfig>): GestureConfig {\n  const derivedConfig = { ...defaultConfig, ...config }\n  const { domTarget } = derivedConfig\n  const realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  derivedConfig.domTarget = realDomTarget\n\n  const passive = derivedConfig.event.passive !== void 0 ? derivedConfig.event.passive : true\n\n  // TODO make test to check if passive is correctly passed to config\n\n  // if there isn't a domtarget or if event.passive is true, then passiveEvents is true\n  derivedConfig.passiveEvents = !derivedConfig.domTarget || passive\n\n  return derivedConfig\n}\n"],"names":["GestureFlag","noop","chainFns","fns","args","forEach","fn","addV","v1","v2","map","v","i","subV","setListeners","add","el","listeners","options","action","type","addListeners","removeListeners","getModifierKeys","event","shiftKey","altKey","metaKey","ctrlKey","getScrollEventData","currentTarget","scrollX","scrollY","scrollLeft","scrollTop","xy","getWheelEventData","deltaX","deltaY","getPointerEventData","touches","buttons","changedTouches","touchEvents","length","clientX","clientY","down","getTwoTouchesEventData","dx","dy","da","Math","hypot","atan2","PI","origin","calculateVelocity","delta","delta_t","len","calculateVelocities","Array","fill","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","gestureEventSupported","GestureEvent","e","mappedKeys","drag","stateKey","handlerKey","pinch","move","scroll","wheel","hover","defaultConfig","domTarget","undefined","passive","capture","window","dragDelay","passiveEvents","pointerEvents","enabled","initialCommon","pointerId","values","offset","initial","previous","first","last","active","time","cancel","canceled","memo","initialCoordinates","vxvy","initialDistanceAngle","vdva","turns","initialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","genericEndState","Recognizer","gestureKey","controller","callback","ms","timeouts","setTimeout","clearTimeout","addWindowListeners","removeWindowListeners","sharedState","gestureState","updateState","gestureFlag","fireGestureHandler","payload","getPayloadFromEvent","gesturePayload","sharedPayload","startState","timeStamp","state","prevValues","continuousGesture","Object","assign","sharedStartState","OnStart","kinematics","getKinematics","OnChange","sharedEndState","OnEnd","requestAnimationFrame","onEnd","onStart","onChange","config","CoordinatesRecognizer","DEFAULT_DRAG_DELAY","DragRecognizer","setPointerCapture","dragListeners","onDragChange","onDragEnd","persist","delayedEvent","startDrag","onCancel","releasePointerCapture","getEventBindings","onDragStart","ScrollRecognizer","timeoutHandler","WheelRecognizer","actions","has","prevXY","onWheel","MoveRecognizer","HoverRecognizer","onPointerEnter","onPointerLeave","DistanceAngleRecognizer","d","a","delta_d","delta_a","newTurns","abs","sign","movement_d","movement_a","PinchRecognizer","onPinchStart","onPinchChange","PinchWheelRecognizer","preventDefault","console","warn","prev_d","prev_a","SCALE_FACTOR","PinchWebKitGestureRecognizer","scale","rotation","onGestureEnd","updateTouchData","GestureController","handlers","cleanOnBind","keys","windowListeners","bindings","domListeners","newGestureState","gesture","handlerStart","handler","newMemo","handlerEnd","recognizer","addEventBindings","eventNames","eventNamesArray","isArray","eventName","entries","push","substr","toLowerCase","output","captureString","fnsArray","key","genuineHandlers","addRecognizer","onDrag","onScroll","onScrollStart","onScrollEnd","onWheelStart","onWheelEnd","onMove","onMoveStart","onMoveEnd","onHover","onPinch","onPinchEnd","addDomTargetListeners","clean","getBindings","Set","k","replace","useGesture","gestureController","React","useRef","current","getDerivedConfig","useEffect","bind","useDrag","useMove","useHover","useScroll","useWheel","usePinch","derivedConfig","realDomTarget"],"mappings":"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"}