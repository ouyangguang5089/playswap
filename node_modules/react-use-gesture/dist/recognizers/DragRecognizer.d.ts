import { PointerEvent } from 'react';
import CoordinatesRecognizer from './CoordinatesRecognizer';
import GestureController from '../controllers/GestureController';
import { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types';
export default class DragRecognizer extends CoordinatesRecognizer {
    sharedStartState: {
        dragging: boolean;
        down: boolean;
    };
    sharedEndState: {
        dragging: boolean;
        down: boolean;
        buttons: number;
        touches: number;
    };
    delayedEvent: boolean;
    constructor(controller: GestureController, args: any[]);
    getPayloadFromEvent(event: UseGestureEvent): {
        values: [number, number];
        sharedPayload: {
            touches: number;
            down: boolean;
            buttons: number;
            shiftKey: boolean;
            altKey: boolean;
            metaKey: boolean;
            ctrlKey: boolean;
        };
    };
    onDragStart: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
    startDrag: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
    onDragChange: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
    onDragEnd: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
    getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][];
}
