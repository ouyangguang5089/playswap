/// <reference types="react" />
import GestureController from '../controllers/GestureController';
import { Coordinates, DistanceAngle, StateKey, GestureState, GestureKey, SharedGestureState, Fn, ReactEventHandlerKey, GestureFlag, UseGestureEvent, Vector2 } from '../types';
declare type PayloadFromEvent = {
    values: Vector2;
    gesturePayload?: Partial<GestureState>;
    sharedPayload?: Partial<SharedGestureState>;
};
/**
 * Recognizer abstract class
 * @template GestureType whether the Recognizer should deal with coordinates or distance / angle
 */
export default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> {
    protected readonly gestureKey: GestureKey;
    protected readonly controller: GestureController;
    protected readonly args: any[];
    protected stateKey: StateKey;
    protected sharedStartState?: Partial<SharedGestureState>;
    protected sharedEndState?: Partial<SharedGestureState>;
    /**
     * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.
     * In other words, these gestures also start with a delta.
     */
    protected continuousGesture: boolean;
    /**
     * Creates an instance of a gesture recognizer.
     * @param gestureKey drag, move, hover, pinch, etc.
     * @param controller the controller attached to the gesture
     * @param [args] the args that should be passed to the gesture handler
     */
    constructor(gestureKey: GestureKey, controller: GestureController, args?: any[]);
    protected readonly enabled: boolean;
    protected readonly state: GestureState<GestureType>;
    protected setTimeout: (callback: (...args: any[]) => void, ms?: number, ...args: any[]) => void;
    protected clearTimeout: () => void;
    protected addWindowListeners: (listeners: [string, Fn][]) => void;
    protected removeWindowListeners: () => void;
    protected abstract getPayloadFromEvent(event: UseGestureEvent): PayloadFromEvent;
    /**
     * Utility function to get kinematics of the gesture
     * @values values we want to calculate the kinematics from
     * @event
     * @returns set of values including movement, velocity, velocities, distance and direction
     */
    protected abstract getKinematics(values: [number, number | undefined], event: UseGestureEvent): Partial<GestureState<GestureType>>;
    abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][];
    /**
     * convenience method to update the controller state for a given gesture
     * @param sharedState shared partial state object
     * @param gestureState partial state object for the gesture handled by the recognizer
     * @param [gestureFlag] if set, will also fire the gesture handler set by the user
     */
    protected updateState: (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState<GestureType>>) => void;
    protected fireGestureHandler: (gestureFlag: GestureFlag) => void;
    protected onStart: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").WebKitGestureEvent>, payload?: Partial<GestureState<GestureType>> | undefined) => void;
    protected onChange: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").WebKitGestureEvent>, payload?: Partial<GestureState<GestureType>> | undefined) => void;
    protected onEnd: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").WebKitGestureEvent>, payload?: Partial<GestureState<GestureType>> | undefined) => void;
    protected onCancel: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
    protected timeoutHandler: (event: UseGestureEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").WebKitGestureEvent>) => void;
}
export {};
