{"version":3,"file":"index.m.js","sources":["../node_modules/relative-luminance/dist/index.m.js","../index.js"],"sourcesContent":["var r=.2126,t=.7152,n=.0722,u=1/12.92;function a(r){return Math.pow((r+.055)/1.055,2.4)}export default function(e){var o=e[0]/255,f=e[1]/255,c=e[2]/255,i=o<=.03928?o*u:a(o),p=f<=.03928?f*u:a(f),v=c<=.03928?c*u:a(c);return i*r+p*t+v*n};\n//# sourceMappingURL=index.m.js.map\n","import relativeLuminance from \"relative-luminance\";\n\nconst hexChars = \"a-f\\\\d\";\nconst match3or4Hex = `#?[${hexChars}]{3}[${hexChars}]?`;\nconst match6or8Hex = `#?[${hexChars}]{6}([${hexChars}]{2})?`;\n\nfunction hexRgb(hex) {\n  hex = hex.replace(/^#/, \"\");\n  let alpha = 255;\n\n  if (hex.length === 8) {\n    alpha = parseInt(hex.slice(6, 8), 16);\n    hex = hex.substring(0, 6);\n  }\n\n  if (hex.length === 4) {\n    alpha = parseInt(hex.slice(3, 4).repeat(2), 16);\n    hex = hex.substring(0, 3);\n  }\n\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  const num = parseInt(hex, 16);\n  const red = num >> 16;\n  const green = (num >> 8) & 255;\n  const blue = num & 255;\n\n  return [red, green, blue, alpha];\n}\n\n// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\n/**\n * Get the contrast ratio between two relative luminance values\n * @param {number} a luminance value\n * @param {number} b luminance value\n * @returns {number} contrast ratio\n * @example\n * luminance(1, 1); // = 1\n */\nexport function luminance(a, b) {\n  const l1 = Math.max(a, b);\n  const l2 = Math.min(a, b);\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n\n/**\n * Get a score for the contrast between two colors as rgb triplets\n * @param {array} a\n * @param {array} b\n * @returns {number} contrast ratio\n * @example\n * rgb([0, 0, 0], [255, 255, 255]); // = 21\n */\nexport function rgb(a, b) {\n  return luminance(relativeLuminance(a), relativeLuminance(b));\n}\n\n/**\n * Get a score for the contrast between two colors as hex strings\n * @param {string} a hex value\n * @param {string} b hex value\n * @returns {number} contrast ratio\n * @example\n * hex('#000', '#fff'); // = 21\n */\nexport function hex(a, b) {\n  return rgb(hexRgb(a, { format: \"array\" }), hexRgb(b, { format: \"array\" }));\n}\n\n/**\n * Get a textual score from a numeric contrast value\n * @param {number} contrast\n * @returns {string} score\n * @example\n * score(10); // = 'AAA'\n */\nexport function score(contrast) {\n  if (contrast  >= 7) {\n    return 'AAA';\n  }\n  \n  if (contrast >= 4.5) {\n    return 'AA';\n  }\n  \n  if (contrast >= 3) {\n    return 'AA Large';\n  }\n  \n  return 'Fail';\n}\n"],"names":["r","t","n","u","a","Math","pow","e","o","f","c","i","p","v","hexRgb","hex","alpha","replace","length","parseInt","slice","substring","repeat","num","luminance","b","max","min","rgb","relativeLuminance","score","contrast"],"mappings":"AAAA,IAAIA,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,EAAE,MAAM,SAASC,EAAEJ,GAAG,OAAOK,KAAKC,KAAKN,EAAE,MAAM,MAAM,KAAoB,WAASO,GAAG,IAAIC,EAAED,EAAE,GAAG,IAAIE,EAAEF,EAAE,GAAG,IAAIG,EAAEH,EAAE,GAAG,IAAII,EAAEH,GAAG,OAAOA,EAAEL,EAAEC,EAAEI,GAAGI,EAAEH,GAAG,OAAOA,EAAEN,EAAEC,EAAEK,GAAGI,EAAEH,GAAG,OAAOA,EAAEP,EAAEC,EAAEM,GAAG,OAAOC,EAAEX,EAAEY,EAAEX,EAAEY,EAAEX,ECMxO,SAASY,EAAOC,OAEVC,EAAQ,IAEO,KAHnBD,EAAMA,EAAIE,QAAQ,KAAM,KAGhBC,SACNF,EAAQG,SAASJ,EAAIK,MAAM,EAAG,GAAI,IAClCL,EAAMA,EAAIM,UAAU,EAAG,IAGN,IAAfN,EAAIG,SACNF,EAAQG,SAASJ,EAAIK,MAAM,EAAG,GAAGE,OAAO,GAAI,IAC5CP,EAAMA,EAAIM,UAAU,EAAG,IAGN,IAAfN,EAAIG,SACNH,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,QAGnDQ,EAAMJ,SAASJ,EAAK,UAKnB,CAJKQ,GAAO,GACJA,GAAO,EAAK,IACR,IAANA,EAEaP,GAarB,SAASQ,EAAUpB,EAAGqB,UAChBpB,KAAKqB,IAAItB,EAAGqB,GAEV,MADFpB,KAAKsB,IAAIvB,EAAGqB,GACI,KAWtB,SAASG,EAAIxB,EAAGqB,UACdD,EAAUK,EAAkBzB,GAAIyB,EAAkBJ,IAWpD,SAASV,EAAIX,EAAGqB,UACdG,EAAId,EAAOV,GAAyBU,EAAOW,IAU7C,SAASK,EAAMC,UAChBA,GAAa,EACR,MAGLA,GAAY,IACP,KAGLA,GAAY,EACP,WAGF"}