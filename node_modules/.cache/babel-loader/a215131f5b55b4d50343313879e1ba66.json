{"ast":null,"code":"'use strict';\n\nmodule.exports = convert;\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (test === null || test === undefined) {\n    return ok;\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test);\n  }\n\n  if (typeof test === 'function') {\n    return test;\n  }\n\n  throw new Error('Expected function, string, or object as test');\n}\n\nfunction convertAll(tests) {\n  var results = [];\n  var length = tests.length;\n  var index = -1;\n\n  while (++index < length) {\n    results[index] = convert(tests[index]);\n  }\n\n  return results;\n} // Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\n\n\nfunction matchesFactory(test) {\n  return matches;\n\n  function matches(node) {\n    var key;\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests);\n  var length = checks.length;\n  return matches;\n\n  function matches() {\n    var index = -1;\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n} // Utility to convert a string into a function which checks a given node’s type\n// for said string.\n\n\nfunction typeFactory(test) {\n  return type;\n\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n} // Utility to return true.\n\n\nfunction ok() {\n  return true;\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/unist-util-is/convert.js"],"names":["module","exports","convert","test","typeFactory","undefined","ok","anyFactory","matchesFactory","Error","convertAll","tests","results","length","index","matches","node","key","checks","apply","arguments","type","Boolean"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOC,WAAW,CAACD,IAAD,CAAlB;AACD;;AAED,MAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKE,SAA9B,EAAyC;AACvC,WAAOC,EAAP;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,CAAC,YAAYA,IAAZ,GAAmBI,UAAnB,GAAgCC,cAAjC,EAAiDL,IAAjD,CAAP;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOA,IAAP;AACD;;AAED,QAAM,IAAIM,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUD,MAAjB,EAAyB;AACvBD,IAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBZ,OAAO,CAACS,KAAK,CAACG,KAAD,CAAN,CAAxB;AACD;;AAED,SAAOF,OAAP;AACD,C,CAED;AACA;;;AACA,SAASJ,cAAT,CAAwBL,IAAxB,EAA8B;AAC5B,SAAOY,OAAP;;AAEA,WAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,QAAIC,GAAJ;;AAEA,SAAKA,GAAL,IAAYd,IAAZ,EAAkB;AAChB,UAAIa,IAAI,CAACC,GAAD,CAAJ,KAAcd,IAAI,CAACc,GAAD,CAAtB,EAA6B;AAC3B,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;AACF;;AAED,SAASV,UAAT,CAAoBI,KAApB,EAA2B;AACzB,MAAIO,MAAM,GAAGR,UAAU,CAACC,KAAD,CAAvB;AACA,MAAIE,MAAM,GAAGK,MAAM,CAACL,MAApB;AAEA,SAAOE,OAAP;;AAEA,WAASA,OAAT,GAAmB;AACjB,QAAID,KAAK,GAAG,CAAC,CAAb;;AAEA,WAAO,EAAEA,KAAF,GAAUD,MAAjB,EAAyB;AACvB,UAAIK,MAAM,CAACJ,KAAD,CAAN,CAAcK,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;AACxC,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF,C,CAED;AACA;;;AACA,SAAShB,WAAT,CAAqBD,IAArB,EAA2B;AACzB,SAAOkB,IAAP;;AAEA,WAASA,IAAT,CAAcL,IAAd,EAAoB;AAClB,WAAOM,OAAO,CAACN,IAAI,IAAIA,IAAI,CAACK,IAAL,KAAclB,IAAvB,CAAd;AACD;AACF,C,CAED;;;AACA,SAASG,EAAT,GAAc;AACZ,SAAO,IAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return ok\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\nfunction convertAll(tests) {\n  var results = []\n  var length = tests.length\n  var index = -1\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction matchesFactory(test) {\n  return matches\n\n  function matches(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"]},"metadata":{},"sourceType":"script"}