{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar normalize = require('../util/normalize');\n\nmodule.exports = footnoteDefinition;\nfootnoteDefinition.notInList = true;\nfootnoteDefinition.notInBlock = true;\nvar C_BACKSLASH = '\\\\';\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\nvar C_CARET = '^';\nvar C_COLON = ':';\nvar EXPRESSION_INITIAL_TAB = /^( {4}|\\t)?/gm;\n\nfunction footnoteDefinition(eat, value, silent) {\n  var self = this;\n  var offsets = self.offset;\n  var index;\n  var length;\n  var subvalue;\n  var now;\n  var currentLine;\n  var content;\n  var queue;\n  var subqueue;\n  var character;\n  var identifier;\n  var add;\n  var exit;\n\n  if (!self.options.footnotes) {\n    return;\n  }\n\n  index = 0;\n  length = value.length;\n  subvalue = '';\n  now = eat.now();\n  currentLine = now.line;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  if (value.charAt(index) !== C_BRACKET_OPEN || value.charAt(index + 1) !== C_CARET) {\n    return;\n  }\n\n  subvalue += C_BRACKET_OPEN + C_CARET;\n  index = subvalue.length;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      break;\n    } else if (character === C_BACKSLASH) {\n      queue += character;\n      index++;\n      character = value.charAt(index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE || value.charAt(index + 1) !== C_COLON) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  identifier = normalize(queue);\n  subvalue += queue + C_BRACKET_CLOSE + C_COLON;\n  index = subvalue.length;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  queue = '';\n  content = '';\n  subqueue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_NEWLINE) {\n      subqueue = character;\n      index++;\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character !== C_NEWLINE) {\n          break;\n        }\n\n        subqueue += character;\n        index++;\n      }\n\n      queue += subqueue;\n      subqueue = '';\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character !== C_SPACE) {\n          break;\n        }\n\n        subqueue += character;\n        index++;\n      }\n\n      if (subqueue.length === 0) {\n        break;\n      }\n\n      queue += subqueue;\n    }\n\n    if (queue) {\n      content += queue;\n      queue = '';\n    }\n\n    content += character;\n    index++;\n  }\n\n  subvalue += content;\n  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;\n    currentLine++;\n    return '';\n  });\n  add = eat(subvalue);\n  exit = self.enterBlock();\n  content = self.tokenizeBlock(content, now);\n  exit();\n  return add({\n    type: 'footnoteDefinition',\n    identifier: identifier,\n    children: content\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/footnote-definition.js"],"names":["whitespace","require","normalize","module","exports","footnoteDefinition","notInList","notInBlock","C_BACKSLASH","C_NEWLINE","C_TAB","C_SPACE","C_BRACKET_OPEN","C_BRACKET_CLOSE","C_CARET","C_COLON","EXPRESSION_INITIAL_TAB","eat","value","silent","self","offsets","offset","index","length","subvalue","now","currentLine","content","queue","subqueue","character","identifier","add","exit","options","footnotes","line","charAt","column","replace","enterBlock","tokenizeBlock","type","children"],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar normalize = require('../util/normalize');\n\nmodule.exports = footnoteDefinition;\nfootnoteDefinition.notInList = true;\nfootnoteDefinition.notInBlock = true;\n\nvar C_BACKSLASH = '\\\\';\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\nvar C_CARET = '^';\nvar C_COLON = ':';\n\nvar EXPRESSION_INITIAL_TAB = /^( {4}|\\t)?/gm;\n\nfunction footnoteDefinition(eat, value, silent) {\n  var self = this;\n  var offsets = self.offset;\n  var index;\n  var length;\n  var subvalue;\n  var now;\n  var currentLine;\n  var content;\n  var queue;\n  var subqueue;\n  var character;\n  var identifier;\n  var add;\n  var exit;\n\n  if (!self.options.footnotes) {\n    return;\n  }\n\n  index = 0;\n  length = value.length;\n  subvalue = '';\n  now = eat.now();\n  currentLine = now.line;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  if (\n    value.charAt(index) !== C_BRACKET_OPEN ||\n    value.charAt(index + 1) !== C_CARET\n  ) {\n    return;\n  }\n\n  subvalue += C_BRACKET_OPEN + C_CARET;\n  index = subvalue.length;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      break;\n    } else if (character === C_BACKSLASH) {\n      queue += character;\n      index++;\n      character = value.charAt(index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (\n    !queue ||\n    value.charAt(index) !== C_BRACKET_CLOSE ||\n    value.charAt(index + 1) !== C_COLON\n  ) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  identifier = normalize(queue);\n  subvalue += queue + C_BRACKET_CLOSE + C_COLON;\n  index = subvalue.length;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  queue = '';\n  content = '';\n  subqueue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_NEWLINE) {\n      subqueue = character;\n      index++;\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character !== C_NEWLINE) {\n          break;\n        }\n\n        subqueue += character;\n        index++;\n      }\n\n      queue += subqueue;\n      subqueue = '';\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character !== C_SPACE) {\n          break;\n        }\n\n        subqueue += character;\n        index++;\n      }\n\n      if (subqueue.length === 0) {\n        break;\n      }\n\n      queue += subqueue;\n    }\n\n    if (queue) {\n      content += queue;\n      queue = '';\n    }\n\n    content += character;\n    index++;\n  }\n\n  subvalue += content;\n\n  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;\n    currentLine++;\n\n    return '';\n  });\n\n  add = eat(subvalue);\n\n  exit = self.enterBlock();\n  content = self.tokenizeBlock(content, now);\n  exit();\n\n  return add({\n    type: 'footnoteDefinition',\n    identifier: identifier,\n    children: content\n  });\n}\n"]},"metadata":{},"sourceType":"script"}