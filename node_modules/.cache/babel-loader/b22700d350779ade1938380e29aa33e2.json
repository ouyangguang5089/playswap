{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{addPopup,ApplicationModal,removePopup,setOpenModal}from'./actions';export function useBlockNumber(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;return useSelector(function(state){return state.application.blockNumber[chainId!==null&&chainId!==void 0?chainId:-1];});}export function useModalOpen(modal){var openModal=useSelector(function(state){return state.application.openModal;});return openModal===modal;}export function useToggleModal(modal){var open=useModalOpen(modal);var dispatch=useDispatch();return useCallback(function(){return dispatch(setOpenModal(open?null:modal));},[dispatch,modal,open]);}export function useOpenModal(modal){var dispatch=useDispatch();return useCallback(function(){return dispatch(setOpenModal(modal));},[dispatch,modal]);}export function useCloseModals(){var dispatch=useDispatch();return useCallback(function(){return dispatch(setOpenModal(null));},[dispatch]);}export function useWalletModalToggle(){return useToggleModal(ApplicationModal.WALLET);}export function useToggleSettingsMenu(){return useToggleModal(ApplicationModal.SETTINGS);}export function useShowClaimPopup(){return useModalOpen(ApplicationModal.CLAIM_POPUP);}export function useToggleShowClaimPopup(){return useToggleModal(ApplicationModal.CLAIM_POPUP);}export function useToggleSelfClaimModal(){return useToggleModal(ApplicationModal.SELF_CLAIM);}export function useToggleDelegateModal(){return useToggleModal(ApplicationModal.DELEGATE);}export function useToggleVoteModal(){return useToggleModal(ApplicationModal.VOTE);}// returns a function that allows adding a popup\nexport function useAddPopup(){var dispatch=useDispatch();return useCallback(function(content,key){dispatch(addPopup({content:content,key:key}));},[dispatch]);}// returns a function that allows removing a popup via its key\nexport function useRemovePopup(){var dispatch=useDispatch();return useCallback(function(key){dispatch(removePopup({key:key}));},[dispatch]);}// get the list of active popups\nexport function useActivePopups(){var list=useSelector(function(state){return state.application.popupList;});return useMemo(function(){return list.filter(function(item){return item.show;});},[list]);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/application/hooks.ts"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addPopup","ApplicationModal","removePopup","setOpenModal","useBlockNumber","chainId","state","application","blockNumber","useModalOpen","modal","openModal","useToggleModal","open","dispatch","useOpenModal","useCloseModals","useWalletModalToggle","WALLET","useToggleSettingsMenu","SETTINGS","useShowClaimPopup","CLAIM_POPUP","useToggleShowClaimPopup","useToggleSelfClaimModal","SELF_CLAIM","useToggleDelegateModal","DELEGATE","useToggleVoteModal","VOTE","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,OAAtB,KAAqC,OAArC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,kBAAT,KAAmC,aAAnC,CAEA,OAASC,QAAT,CAAmBC,gBAAnB,CAAmDC,WAAnD,CAAgEC,YAAhE,KAAoF,WAApF,CAEA,MAAO,SAASC,CAAAA,cAAT,EAA8C,yBAC/BL,kBAAkB,EADa,CAC3CM,OAD2C,qBAC3CA,OAD2C,CAGnD,MAAOP,CAAAA,WAAW,CAAC,SAACQ,KAAD,QAAqBA,CAAAA,KAAK,CAACC,WAAN,CAAkBC,WAAlB,CAA8BH,OAA9B,SAA8BA,OAA9B,UAA8BA,OAA9B,CAAyC,CAAC,CAA1C,CAArB,EAAD,CAAlB,CACD,CAED,MAAO,SAASI,CAAAA,YAAT,CAAsBC,KAAtB,CAAwD,CAC7D,GAAMC,CAAAA,SAAS,CAAGb,WAAW,CAAC,SAACQ,KAAD,QAAqBA,CAAAA,KAAK,CAACC,WAAN,CAAkBI,SAAvC,EAAD,CAA7B,CACA,MAAOA,CAAAA,SAAS,GAAKD,KAArB,CACD,CAED,MAAO,SAASE,CAAAA,cAAT,CAAwBF,KAAxB,CAA6D,CAClE,GAAMG,CAAAA,IAAI,CAAGJ,YAAY,CAACC,KAAD,CAAzB,CACA,GAAMI,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,MAAOF,CAAAA,WAAW,CAAC,iBAAMmB,CAAAA,QAAQ,CAACX,YAAY,CAACU,IAAI,CAAG,IAAH,CAAUH,KAAf,CAAb,CAAd,EAAD,CAAoD,CAACI,QAAD,CAAWJ,KAAX,CAAkBG,IAAlB,CAApD,CAAlB,CACD,CAED,MAAO,SAASE,CAAAA,YAAT,CAAsBL,KAAtB,CAA2D,CAChE,GAAMI,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,MAAOF,CAAAA,WAAW,CAAC,iBAAMmB,CAAAA,QAAQ,CAACX,YAAY,CAACO,KAAD,CAAb,CAAd,EAAD,CAAsC,CAACI,QAAD,CAAWJ,KAAX,CAAtC,CAAlB,CACD,CAED,MAAO,SAASM,CAAAA,cAAT,EAAsC,CAC3C,GAAMF,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,MAAOF,CAAAA,WAAW,CAAC,iBAAMmB,CAAAA,QAAQ,CAACX,YAAY,CAAC,IAAD,CAAb,CAAd,EAAD,CAAqC,CAACW,QAAD,CAArC,CAAlB,CACD,CAED,MAAO,SAASG,CAAAA,oBAAT,EAA4C,CACjD,MAAOL,CAAAA,cAAc,CAACX,gBAAgB,CAACiB,MAAlB,CAArB,CACD,CAED,MAAO,SAASC,CAAAA,qBAAT,EAA6C,CAClD,MAAOP,CAAAA,cAAc,CAACX,gBAAgB,CAACmB,QAAlB,CAArB,CACD,CAED,MAAO,SAASC,CAAAA,iBAAT,EAAsC,CAC3C,MAAOZ,CAAAA,YAAY,CAACR,gBAAgB,CAACqB,WAAlB,CAAnB,CACD,CAED,MAAO,SAASC,CAAAA,uBAAT,EAA+C,CACpD,MAAOX,CAAAA,cAAc,CAACX,gBAAgB,CAACqB,WAAlB,CAArB,CACD,CAED,MAAO,SAASE,CAAAA,uBAAT,EAA+C,CACpD,MAAOZ,CAAAA,cAAc,CAACX,gBAAgB,CAACwB,UAAlB,CAArB,CACD,CAED,MAAO,SAASC,CAAAA,sBAAT,EAA8C,CACnD,MAAOd,CAAAA,cAAc,CAACX,gBAAgB,CAAC0B,QAAlB,CAArB,CACD,CAED,MAAO,SAASC,CAAAA,kBAAT,EAA0C,CAC/C,MAAOhB,CAAAA,cAAc,CAACX,gBAAgB,CAAC4B,IAAlB,CAArB,CACD,CAED;AACA,MAAO,SAASC,CAAAA,WAAT,EAAsE,CAC3E,GAAMhB,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CAEA,MAAOF,CAAAA,WAAW,CAChB,SAACoC,OAAD,CAAwBC,GAAxB,CAAyC,CACvClB,QAAQ,CAACd,QAAQ,CAAC,CAAE+B,OAAO,CAAPA,OAAF,CAAWC,GAAG,CAAHA,GAAX,CAAD,CAAT,CAAR,CACD,CAHe,CAIhB,CAAClB,QAAD,CAJgB,CAAlB,CAMD,CAED;AACA,MAAO,SAASmB,CAAAA,cAAT,EAAiD,CACtD,GAAMnB,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,MAAOF,CAAAA,WAAW,CAChB,SAACqC,GAAD,CAAiB,CACflB,QAAQ,CAACZ,WAAW,CAAC,CAAE8B,GAAG,CAAHA,GAAF,CAAD,CAAZ,CAAR,CACD,CAHe,CAIhB,CAAClB,QAAD,CAJgB,CAAlB,CAMD,CAED;AACA,MAAO,SAASoB,CAAAA,eAAT,EAAiE,CACtE,GAAMC,CAAAA,IAAI,CAAGrC,WAAW,CAAC,SAACQ,KAAD,QAAqBA,CAAAA,KAAK,CAACC,WAAN,CAAkB6B,SAAvC,EAAD,CAAxB,CACA,MAAOxC,CAAAA,OAAO,CAAC,iBAAMuC,CAAAA,IAAI,CAACE,MAAL,CAAY,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAT,EAAhB,CAAN,EAAD,CAAuC,CAACJ,IAAD,CAAvC,CAAd,CACD","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addPopup, ApplicationModal, PopupContent, removePopup, setOpenModal } from './actions'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useModalOpen(modal: ApplicationModal): boolean {\n  const openModal = useSelector((state: AppState) => state.application.openModal)\n  return openModal === modal\n}\n\nexport function useToggleModal(modal: ApplicationModal): () => void {\n  const open = useModalOpen(modal)\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(open ? null : modal)), [dispatch, modal, open])\n}\n\nexport function useOpenModal(modal: ApplicationModal): () => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal])\n}\n\nexport function useCloseModals(): () => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch])\n}\n\nexport function useWalletModalToggle(): () => void {\n  return useToggleModal(ApplicationModal.WALLET)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  return useToggleModal(ApplicationModal.SETTINGS)\n}\n\nexport function useShowClaimPopup(): boolean {\n  return useModalOpen(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleShowClaimPopup(): () => void {\n  return useToggleModal(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleSelfClaimModal(): () => void {\n  return useToggleModal(ApplicationModal.SELF_CLAIM)\n}\n\nexport function useToggleDelegateModal(): () => void {\n  return useToggleModal(ApplicationModal.DELEGATE)\n}\n\nexport function useToggleVoteModal(): () => void {\n  return useToggleModal(ApplicationModal.VOTE)\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\n"]},"metadata":{},"sourceType":"module"}