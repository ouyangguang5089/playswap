{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _assertThisInitialized from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexDataLength, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  _createClass(Event, [{\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }, {\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n\n        case \"filter\":\n          return this.filter;\n      }\n\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n\n      return filter;\n    }\n  }]);\n\n  return Event;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n\n  var _super = _createSuper(BaseProvider);\n\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this;\n\n    _classCallCheck(this, BaseProvider);\n\n    logger.checkNew(this instanceof BaseProvider ? this.constructor : void 0, Provider);\n    _this = _super.call(this); // Events being listened to\n\n    _this._events = [];\n    _this._emitted = {\n      block: -2\n    };\n    _this.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(_assertThisInitialized(_this), \"anyNetwork\", network === \"any\");\n\n    if (_this.anyNetwork) {\n      network = _this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      _this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(function (error) {}); // Trigger initial network setting (async)\n\n      _this._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this), \"_network\", knownNetwork);\n\n        _this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    _this._maxInternalBlockNumber = -1024;\n    _this._lastBlockNumber = -2;\n    _this._pollingInterval = 4000;\n    _this._fastQueryDate = 0;\n    return _this;\n  }\n\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var network;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._network == null)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                network = null;\n\n                if (!this._networkPromise) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return this._networkPromise;\n\n              case 6:\n                network = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n\n              case 11:\n                if (!(network == null)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 14;\n                return this.detectNetwork();\n\n              case 14:\n                network = _context.sent;\n\n              case 15:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // Possible this call stacked so do not call defineReadOnly again\n\n\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    defineReadOnly(this, \"_network\", network);\n                  }\n\n                  this.emit(\"network\", network, null);\n                }\n\n              case 17:\n                return _context.abrupt(\"return\", this._network);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 9]]);\n      }));\n    } // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n\n  }, {\n    key: \"_getInternalBlockNumber\",\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._ready();\n\n              case 2:\n                internalBlockNumber = this._internalBlockNumber;\n\n                if (!(maxAge > 0 && this._internalBlockNumber)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 6;\n                return internalBlockNumber;\n\n              case 6:\n                result = _context2.sent;\n\n                if (!(getTime() - result.respTime <= maxAge)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", result.blockNumber);\n\n              case 9:\n                reqTime = getTime();\n                checkInternalBlockNumber = resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_ref) {\n                  var blockNumber = _ref.blockNumber,\n                      networkError = _ref.networkError;\n\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this2._internalBlockNumber === checkInternalBlockNumber) {\n                      _this2._internalBlockNumber = null;\n                    }\n\n                    throw networkError;\n                  }\n\n                  var respTime = getTime();\n                  blockNumber = BigNumber.from(blockNumber).toNumber();\n\n                  if (blockNumber < _this2._maxInternalBlockNumber) {\n                    blockNumber = _this2._maxInternalBlockNumber;\n                  }\n\n                  _this2._maxInternalBlockNumber = blockNumber;\n\n                  _this2._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber;\n                _context2.next = 14;\n                return checkInternalBlockNumber;\n\n              case 14:\n                return _context2.abrupt(\"return\", _context2.sent.blockNumber);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n                runners = [];\n                _context3.next = 4;\n                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n\n              case 4:\n                blockNumber = _context3.sent;\n\n                this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n                this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n                if (!(blockNumber === this._lastBlockNumber)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                this.emit(\"didPoll\", pollId);\n                return _context3.abrupt(\"return\");\n\n              case 10:\n                // First polling cycle, trigger a \"block\" events\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events\");\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                } // The emitted block was updated, check for obsolete events\n\n\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    } // The block we were at when we emitted this event\n\n\n                    var eventBlockNumber = _this3._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    } // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n\n\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this3._emitted[key];\n                    }\n                  });\n                } // First polling cycle\n\n\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                } // Find all transaction hashes we are waiting on\n\n\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash = event.hash;\n\n                        var runner = _this3.getTransactionReceipt(hash).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n\n                          _this3._emitted[\"t:\" + hash] = receipt.blockNumber;\n\n                          _this3.emit(hash, receipt);\n\n                          return null;\n                        }).catch(function (error) {\n                          _this3.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n\n                    case \"filter\":\n                      {\n                        var filter = event.filter;\n                        filter.fromBlock = _this3._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        var _runner = _this3.getLogs(filter).then(function (logs) {\n                          if (logs.length === 0) {\n                            return;\n                          }\n\n                          logs.forEach(function (log) {\n                            _this3._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            _this3._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                            _this3.emit(filter, log);\n                          });\n                        }).catch(function (error) {\n                          _this3.emit(\"error\", error);\n                        });\n\n                        runners.push(_runner);\n                        break;\n                      }\n                  }\n                });\n\n                this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n                Promise.all(runners).then(function () {\n                  _this3.emit(\"didPoll\", pollId);\n                });\n                return _context3.abrupt(\"return\", null);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    } // Deprecated; do not use this\n\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"detectNetwork\",\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"provider.detectNetwork\"\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._ready();\n\n              case 2:\n                network = _context5.sent;\n                _context5.next = 5;\n                return this.detectNetwork();\n\n              case 5:\n                currentNetwork = _context5.sent;\n\n                if (!(network.chainId !== currentNetwork.chainId)) {\n                  _context5.next = 23;\n                  break;\n                }\n\n                if (!this.anyNetwork) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                this._network = currentNetwork; // Reset all internal block number guards and caches\n\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n\n                this.emit(\"network\", currentNetwork, network);\n                _context5.next = 19;\n                return stall(0);\n\n              case 19:\n                return _context5.abrupt(\"return\", this._network);\n\n              case 20:\n                error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n\n              case 23:\n                return _context5.abrupt(\"return\", network);\n\n              case 24:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this4 = this;\n\n      var now = getTime(); // Stale block number, request a newer value\n\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this4._fastBlockNumber == null || blockNumber > _this4._fastBlockNumber) {\n            _this4._fastBlockNumber = blockNumber;\n          }\n\n          return _this4._fastBlockNumber;\n        });\n      }\n\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      } // Update the time we updated the blocknumber\n\n\n      this._fastQueryDate = getTime(); // Newer block number, use  it\n\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this5 = this;\n\n        var receipt;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (confirmations == null) {\n                  confirmations = 1;\n                }\n\n                _context6.next = 3;\n                return this.getTransactionReceipt(transactionHash);\n\n              case 3:\n                receipt = _context6.sent;\n\n                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", receipt);\n\n              case 6:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var timer = null;\n                  var done = false;\n\n                  var handler = function handler(receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n\n                    if (timer) {\n                      clearTimeout(timer);\n                    }\n\n                    if (done) {\n                      return;\n                    }\n\n                    done = true;\n\n                    _this5.removeListener(transactionHash, handler);\n\n                    resolve(receipt);\n                  };\n\n                  _this5.on(transactionHash, handler);\n\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    timer = setTimeout(function () {\n                      if (done) {\n                        return;\n                      }\n\n                      timer = null;\n                      done = true;\n\n                      _this5.removeListener(transactionHash, handler);\n\n                      reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n                  }\n                }));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this._getInternalBlockNumber(0));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context8.t0 = BigNumber;\n                _context8.next = 5;\n                return this.perform(\"getGasPrice\", {});\n\n              case 5:\n                _context8.t1 = _context8.sent;\n                return _context8.abrupt(\"return\", _context8.t0.from.call(_context8.t0, _context8.t1));\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context9.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context9.sent;\n                _context9.t0 = BigNumber;\n                _context9.next = 8;\n                return this.perform(\"getBalance\", params);\n\n              case 8:\n                _context9.t1 = _context9.sent;\n                return _context9.abrupt(\"return\", _context9.t0.from.call(_context9.t0, _context9.t1));\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context10.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context10.sent;\n                _context10.t0 = BigNumber;\n                _context10.next = 8;\n                return this.perform(\"getTransactionCount\", params);\n\n              case 8:\n                _context10.t1 = _context10.sent;\n                return _context10.abrupt(\"return\", _context10.t0.from.call(_context10.t0, _context10.t1).toNumber());\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context11.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context11.sent;\n                _context11.t0 = hexlify;\n                _context11.next = 8;\n                return this.perform(\"getCode\", params);\n\n              case 8:\n                _context11.t1 = _context11.sent;\n                return _context11.abrupt(\"return\", (0, _context11.t0)(_context11.t1));\n\n              case 10:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context12.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return hexValue(p);\n                  })\n                });\n\n              case 4:\n                params = _context12.sent;\n                _context12.t0 = hexlify;\n                _context12.next = 8;\n                return this.perform(\"getStorageAt\", params);\n\n              case 8:\n                _context12.t1 = _context12.sent;\n                return _context12.abrupt(\"return\", (0, _context12.t0)(_context12.t1));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    } // This should be called by any subclass wrapping a TransactionResponse\n\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash) {\n      var _this6 = this;\n\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n\n      var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      } // @TODO: (confirmations? number, timeout? number)\n\n\n      result.wait = function (confirmations) {\n        return __awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n          var receipt;\n          return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n            while (1) {\n              switch (_context13.prev = _context13.next) {\n                case 0:\n                  // We know this transaction *must* exist (whether it gets mined is\n                  // another story), so setting an emitted value forces us to\n                  // wait even if the node returns null for the receipt\n                  if (confirmations !== 0) {\n                    this._emitted[\"t:\" + tx.hash] = \"pending\";\n                  }\n\n                  _context13.next = 3;\n                  return this.waitForTransaction(tx.hash, confirmations);\n\n                case 3:\n                  receipt = _context13.sent;\n\n                  if (!(receipt == null && confirmations === 0)) {\n                    _context13.next = 6;\n                    break;\n                  }\n\n                  return _context13.abrupt(\"return\", null);\n\n                case 6:\n                  // No longer pending, allow the polling loop to garbage collect this\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n\n                  return _context13.abrupt(\"return\", receipt);\n\n                case 9:\n                case \"end\":\n                  return _context13.stop();\n              }\n            }\n          }, _callee13, this);\n        }));\n      };\n\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var hexTx, tx, hash;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context14.next = 4;\n                return Promise.resolve(signedTransaction).then(function (t) {\n                  return hexlify(t);\n                });\n\n              case 4:\n                hexTx = _context14.sent;\n                tx = this.formatter.transaction(signedTransaction);\n                _context14.prev = 6;\n                _context14.next = 9;\n                return this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                });\n\n              case 9:\n                hash = _context14.sent;\n                return _context14.abrupt(\"return\", this._wrapTransaction(tx, hash));\n\n              case 13:\n                _context14.prev = 13;\n                _context14.t0 = _context14[\"catch\"](6);\n                _context14.t0.transaction = tx;\n                _context14.t0.transactionHash = tx.hash;\n                throw _context14.t0;\n\n              case 18:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[6, 13]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var _this7 = this;\n\n        var values, tx;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return transaction;\n\n              case 2:\n                values = _context15.sent;\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this7._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? BigNumber.from(v) : null;\n                  });\n                });\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? hexlify(v) : null;\n                  });\n                });\n                _context15.t0 = this.formatter;\n                _context15.next = 10;\n                return resolveProperties(tx);\n\n              case 10:\n                _context15.t1 = _context15.sent;\n                return _context15.abrupt(\"return\", _context15.t0.transactionRequest.call(_context15.t0, _context15.t1));\n\n              case 12:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var _this8 = this;\n\n        var result;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return filter;\n\n              case 2:\n                filter = _context16.sent;\n                result = {};\n\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = _this8._getBlockTag(filter[key]);\n                });\n                _context16.t0 = this.formatter;\n                _context16.next = 10;\n                return resolveProperties(result);\n\n              case 10:\n                _context16.t1 = _context16.sent;\n                return _context16.abrupt(\"return\", _context16.t0.filter.call(_context16.t0, _context16.t1));\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context17.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context17.sent;\n                _context17.t0 = hexlify;\n                _context17.next = 8;\n                return this.perform(\"call\", params);\n\n              case 8:\n                _context17.t1 = _context17.sent;\n                return _context17.abrupt(\"return\", (0, _context17.t0)(_context17.t1));\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context18.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                });\n\n              case 4:\n                params = _context18.sent;\n                _context18.t0 = BigNumber;\n                _context18.next = 8;\n                return this.perform(\"estimateGas\", params);\n\n              case 8:\n                _context18.t1 = _context18.sent;\n                return _context18.abrupt(\"return\", _context18.t0.from.call(_context18.t0, _context18.t1));\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var address;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.resolveName(addressOrName);\n\n              case 2:\n                address = _context19.sent;\n\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                  });\n                }\n\n                return _context19.abrupt(\"return\", address);\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        var _this9 = this;\n\n        var blockNumber, params;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context21.next = 4;\n                return blockHashOrBlockTag;\n\n              case 4:\n                blockHashOrBlockTag = _context21.sent;\n                // If blockTag is a number (not \"latest\", etc), this is the block number\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n\n                if (!isHexString(blockHashOrBlockTag, 32)) {\n                  _context21.next = 11;\n                  break;\n                }\n\n                params.blockHash = blockHashOrBlockTag;\n                _context21.next = 23;\n                break;\n\n              case 11:\n                _context21.prev = 11;\n                _context21.t0 = this.formatter;\n                _context21.next = 15;\n                return this._getBlockTag(blockHashOrBlockTag);\n\n              case 15:\n                _context21.t1 = _context21.sent;\n                params.blockTag = _context21.t0.blockTag.call(_context21.t0, _context21.t1);\n\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n\n                _context21.next = 23;\n                break;\n\n              case 20:\n                _context21.prev = 20;\n                _context21.t2 = _context21[\"catch\"](11);\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n\n              case 23:\n                return _context21.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n                    var block, _blockNumber, i, tx, confirmations;\n\n                    return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n                      while (1) {\n                        switch (_context20.prev = _context20.next) {\n                          case 0:\n                            _context20.next = 2;\n                            return this.perform(\"getBlock\", params);\n\n                          case 2:\n                            block = _context20.sent;\n\n                            if (!(block == null)) {\n                              _context20.next = 11;\n                              break;\n                            }\n\n                            if (!(params.blockHash != null)) {\n                              _context20.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                              _context20.next = 7;\n                              break;\n                            }\n\n                            return _context20.abrupt(\"return\", null);\n\n                          case 7:\n                            if (!(params.blockTag != null)) {\n                              _context20.next = 10;\n                              break;\n                            }\n\n                            if (!(blockNumber > this._emitted.block)) {\n                              _context20.next = 10;\n                              break;\n                            }\n\n                            return _context20.abrupt(\"return\", null);\n\n                          case 10:\n                            return _context20.abrupt(\"return\", undefined);\n\n                          case 11:\n                            if (!includeTransactions) {\n                              _context20.next = 32;\n                              break;\n                            }\n\n                            _blockNumber = null;\n                            i = 0;\n\n                          case 14:\n                            if (!(i < block.transactions.length)) {\n                              _context20.next = 31;\n                              break;\n                            }\n\n                            tx = block.transactions[i];\n\n                            if (!(tx.blockNumber == null)) {\n                              _context20.next = 20;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context20.next = 28;\n                            break;\n\n                          case 20:\n                            if (!(tx.confirmations == null)) {\n                              _context20.next = 28;\n                              break;\n                            }\n\n                            if (!(_blockNumber == null)) {\n                              _context20.next = 25;\n                              break;\n                            }\n\n                            _context20.next = 24;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 24:\n                            _blockNumber = _context20.sent;\n\n                          case 25:\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = _blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 28:\n                            i++;\n                            _context20.next = 14;\n                            break;\n\n                          case 31:\n                            return _context20.abrupt(\"return\", this.formatter.blockWithTransactions(block));\n\n                          case 32:\n                            return _context20.abrupt(\"return\", this.formatter.block(block));\n\n                          case 33:\n                          case \"end\":\n                            return _context20.stop();\n                        }\n                      }\n                    }, _callee20, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 24:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[11, 20]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var _this10 = this;\n\n        var params;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context23.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context23.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context23.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n                    var result, tx, blockNumber, confirmations;\n                    return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n                      while (1) {\n                        switch (_context22.prev = _context22.next) {\n                          case 0:\n                            _context22.next = 2;\n                            return this.perform(\"getTransaction\", params);\n\n                          case 2:\n                            result = _context22.sent;\n\n                            if (!(result == null)) {\n                              _context22.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context22.next = 6;\n                              break;\n                            }\n\n                            return _context22.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context22.abrupt(\"return\", undefined);\n\n                          case 7:\n                            tx = this.formatter.transactionResponse(result);\n\n                            if (!(tx.blockNumber == null)) {\n                              _context22.next = 12;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context22.next = 19;\n                            break;\n\n                          case 12:\n                            if (!(tx.confirmations == null)) {\n                              _context22.next = 19;\n                              break;\n                            }\n\n                            _context22.next = 15;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 15:\n                            blockNumber = _context22.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 19:\n                            return _context22.abrupt(\"return\", this._wrapTransaction(tx));\n\n                          case 20:\n                          case \"end\":\n                            return _context22.stop();\n                        }\n                      }\n                    }, _callee22, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        var _this11 = this;\n\n        var params;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context25.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context25.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context25.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n                    var result, receipt, blockNumber, confirmations;\n                    return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n                      while (1) {\n                        switch (_context24.prev = _context24.next) {\n                          case 0:\n                            _context24.next = 2;\n                            return this.perform(\"getTransactionReceipt\", params);\n\n                          case 2:\n                            result = _context24.sent;\n\n                            if (!(result == null)) {\n                              _context24.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context24.next = 6;\n                              break;\n                            }\n\n                            return _context24.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context24.abrupt(\"return\", undefined);\n\n                          case 7:\n                            if (!(result.blockHash == null)) {\n                              _context24.next = 9;\n                              break;\n                            }\n\n                            return _context24.abrupt(\"return\", undefined);\n\n                          case 9:\n                            receipt = this.formatter.receipt(result);\n\n                            if (!(receipt.blockNumber == null)) {\n                              _context24.next = 14;\n                              break;\n                            }\n\n                            receipt.confirmations = 0;\n                            _context24.next = 21;\n                            break;\n\n                          case 14:\n                            if (!(receipt.confirmations == null)) {\n                              _context24.next = 21;\n                              break;\n                            }\n\n                            _context24.next = 17;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 17:\n                            blockNumber = _context24.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - receipt.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            receipt.confirmations = confirmations;\n\n                          case 21:\n                            return _context24.abrupt(\"return\", receipt);\n\n                          case 22:\n                          case \"end\":\n                            return _context24.stop();\n                        }\n                      }\n                    }, _callee24, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        var params, logs;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context26.next = 4;\n                return resolveProperties({\n                  filter: this._getFilter(filter)\n                });\n\n              case 4:\n                params = _context26.sent;\n                _context26.next = 7;\n                return this.perform(\"getLogs\", params);\n\n              case 7:\n                logs = _context26.sent;\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return _context26.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                return _context27.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n\n              case 3:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        var blockNumber;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return blockTag;\n\n              case 2:\n                blockTag = _context28.sent;\n\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                  _context28.next = 11;\n                  break;\n                }\n\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n\n                _context28.next = 7;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 7:\n                blockNumber = _context28.sent;\n                blockNumber += blockTag;\n\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n\n                return _context28.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n\n              case 11:\n                return _context28.abrupt(\"return\", this.formatter.blockTag(blockTag));\n\n              case 12:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        var network, transaction;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                network = _context29.sent;\n\n                // No ENS...\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"ENS\",\n                    network: network.name\n                  });\n                } // keccak256(\"resolver(bytes32)\")\n\n\n                transaction = {\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + namehash(name).substring(2)\n                };\n                _context29.t0 = this.formatter;\n                _context29.next = 8;\n                return this.call(transaction);\n\n              case 8:\n                _context29.t1 = _context29.sent;\n                return _context29.abrupt(\"return\", _context29.t0.callAddress.call(_context29.t0, _context29.t1));\n\n              case 10:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n        var resolverAddress, transaction;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return name;\n\n              case 2:\n                name = _context30.sent;\n                _context30.prev = 3;\n                return _context30.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n\n              case 7:\n                _context30.prev = 7;\n                _context30.t0 = _context30[\"catch\"](3);\n\n                if (!isHexString(name)) {\n                  _context30.next = 11;\n                  break;\n                }\n\n                throw _context30.t0;\n\n              case 11:\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                } // Get the addr from the resovler\n\n\n                _context30.next = 14;\n                return this._getResolver(name);\n\n              case 14:\n                resolverAddress = _context30.sent;\n\n                if (resolverAddress) {\n                  _context30.next = 17;\n                  break;\n                }\n\n                return _context30.abrupt(\"return\", null);\n\n              case 17:\n                // keccak256(\"addr(bytes32)\")\n                transaction = {\n                  to: resolverAddress,\n                  data: \"0x3b3b57de\" + namehash(name).substring(2)\n                };\n                _context30.t1 = this.formatter;\n                _context30.next = 21;\n                return this.call(transaction);\n\n              case 21:\n                _context30.t2 = _context30.sent;\n                return _context30.abrupt(\"return\", _context30.t1.callAddress.call(_context30.t1, _context30.t2));\n\n              case 23:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        var reverseName, resolverAddress, bytes, length, name, addr;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return address;\n\n              case 2:\n                address = _context31.sent;\n                address = this.formatter.address(address);\n                reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context31.next = 7;\n                return this._getResolver(reverseName);\n\n              case 7:\n                resolverAddress = _context31.sent;\n\n                if (resolverAddress) {\n                  _context31.next = 10;\n                  break;\n                }\n\n                return _context31.abrupt(\"return\", null);\n\n              case 10:\n                _context31.t0 = arrayify;\n                _context31.next = 13;\n                return this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(reverseName).substring(2)\n                });\n\n              case 13:\n                _context31.t1 = _context31.sent;\n                bytes = (0, _context31.t0)(_context31.t1);\n\n                if (!(bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32))) {\n                  _context31.next = 17;\n                  break;\n                }\n\n                return _context31.abrupt(\"return\", null);\n\n              case 17:\n                bytes = bytes.slice(32); // Not a length-prefixed string\n\n                if (!(bytes.length < 32)) {\n                  _context31.next = 20;\n                  break;\n                }\n\n                return _context31.abrupt(\"return\", null);\n\n              case 20:\n                // Get the length of the string (from the length-prefix)\n                length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n                bytes = bytes.slice(32); // Length longer than available data\n\n                if (!(length > bytes.length)) {\n                  _context31.next = 24;\n                  break;\n                }\n\n                return _context31.abrupt(\"return\", null);\n\n              case 24:\n                name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n                _context31.next = 27;\n                return this.resolveName(name);\n\n              case 27:\n                addr = _context31.sent;\n\n                if (!(addr != address)) {\n                  _context31.next = 30;\n                  break;\n                }\n\n                return _context31.abrupt(\"return\", null);\n\n              case 30:\n                return _context31.abrupt(\"return\", name);\n\n              case 31:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n\n      this._events.push(event);\n\n      this._startEvent(event);\n\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this12 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(function () {\n          event.listener.apply(_this12, args);\n        }, 0);\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this12._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this13 = this;\n\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n\n        if (found) {\n          return true;\n        }\n\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this13._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this14 = this;\n\n      var stopped = [];\n\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n\n          stopped.push(event);\n          return false;\n        });\n      }\n\n      stopped.forEach(function (event) {\n        _this14._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this15 = this;\n\n      return poll(function () {\n        return _this15._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n\n          throw error;\n        });\n      });\n    } // @TODO: Remove this and just create a singleton formatter\n\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this16 = this;\n\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this16._setFastBlockNumber(blockNumber);\n      });\n\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this17 = this;\n\n      if (value && !this._poller) {\n        this._poller = setInterval(this.poll.bind(this), this.pollingInterval);\n\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this17.poll(); // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n\n\n            _this17._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this17._poller) {\n                _this17.poll();\n              } // Clear out the bootstrap so we can do another\n\n\n              _this17._bootstrapPoll = null;\n            }, _this17.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this18 = this;\n\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n\n      this._pollingInterval = value;\n\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this18.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n\n      return defaultFormatter;\n    } // @TODO: Remove this and just use getNetwork\n\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n\n  return BaseProvider;\n}(Provider);","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexDataLength, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic((new.target), \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            const internalBlockNumber = this._internalBlockNumber;\n            if (maxAge > 0 && this._internalBlockNumber) {\n                const result = yield internalBlockNumber;\n                if ((getTime() - result.respTime) <= maxAge) {\n                    return result.blockNumber;\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            const blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events\");\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            });\n            return null;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(this.poll.bind(this), this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (confirmations == null) {\n                confirmations = 1;\n            }\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                let timer = null;\n                let done = false;\n                const handler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    this.removeListener(transactionHash, handler);\n                    resolve(receipt);\n                };\n                this.on(transactionHash, handler);\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    timer = setTimeout(() => {\n                        if (done) {\n                            return;\n                        }\n                        timer = null;\n                        done = true;\n                        this.removeListener(transactionHash, handler);\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return BigNumber.from(yield this.perform(\"getGasPrice\", {}));\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return BigNumber.from(yield this.perform(\"getBalance\", params));\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return BigNumber.from(yield this.perform(\"getTransactionCount\", params)).toNumber();\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return hexlify(yield this.perform(\"getCode\", params));\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            return hexlify(yield this.perform(\"getStorageAt\", params));\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        // @TODO: (confirmations? number, timeout? number)\n        result.wait = (confirmations) => __awaiter(this, void 0, void 0, function* () {\n            // We know this transaction *must* exist (whether it gets mined is\n            // another story), so setting an emitted value forces us to\n            // wait even if the node returns null for the receipt\n            if (confirmations !== 0) {\n                this._emitted[\"t:\" + tx.hash] = \"pending\";\n            }\n            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n            if (receipt == null && confirmations === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return hexlify(yield this.perform(\"call\", params));\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            return BigNumber.from(yield this.perform(\"estimateGas\", params));\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    return this.formatter.blockWithTransactions(block);\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    _getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            };\n            return this.formatter.callAddress(yield this.call(transaction));\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolverAddress = yield this._getResolver(name);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak256(\"addr(bytes32)\")\n            const transaction = {\n                to: resolverAddress,\n                data: (\"0x3b3b57de\" + namehash(name).substring(2))\n            };\n            return this.formatter.callAddress(yield this.call(transaction));\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = arrayify(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = toUtf8String(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}