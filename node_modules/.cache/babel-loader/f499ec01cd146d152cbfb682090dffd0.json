{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { hexlify, hexValue } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\"; // The transaction has already been sanitized by the calls in Provider\n\nfunction getTransactionString(transaction) {\n  var result = [];\n\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    var value = hexlify(transaction[key]);\n\n    if ({\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(value);\n    }\n\n    result.push(key + \"=\" + value);\n  }\n\n  return result.join(\"&\");\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != \"OK\") {\n    var error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    var error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    var _error = new Error(\"invalid response\");\n\n    _error.result = JSON.stringify(result);\n    throw _error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    var _error2 = new Error(result.error.message || \"unknown error\");\n\n    if (result.error.code) {\n      _error2.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      _error2.data = result.error.data;\n    }\n\n    throw _error2;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nvar defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nexport var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EtherscanProvider, _BaseProvider);\n\n  var _super2 = _createSuper(EtherscanProvider);\n\n  function EtherscanProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, EtherscanProvider);\n\n    logger.checkNew(this instanceof EtherscanProvider ? this.constructor : void 0, EtherscanProvider);\n    _this = _super2.call(this, network);\n    var name = \"invalid\";\n\n    if (_this.network) {\n      name = _this.network.name;\n    }\n\n    var baseUrl = null;\n\n    switch (name) {\n      case \"homestead\":\n        baseUrl = \"https://api.etherscan.io\";\n        break;\n\n      case \"ropsten\":\n        baseUrl = \"https://api-ropsten.etherscan.io\";\n        break;\n\n      case \"rinkeby\":\n        baseUrl = \"https://api-rinkeby.etherscan.io\";\n        break;\n\n      case \"kovan\":\n        baseUrl = \"https://api-kovan.etherscan.io\";\n        break;\n\n      case \"goerli\":\n        baseUrl = \"https://api-goerli.etherscan.io\";\n        break;\n\n      default:\n        throw new Error(\"unsupported network\");\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"baseUrl\", baseUrl);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", apiKey || defaultApiKey);\n    return _this;\n  }\n\n  _createClass(EtherscanProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.network);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this2 = this;\n\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(EtherscanProvider.prototype), \"perform\", _this2);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var url, apiKey, get, transaction, _transaction, topic0, logs, txs, i, log, tx;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = this.baseUrl;\n                apiKey = \"\";\n\n                if (this.apiKey) {\n                  apiKey += \"&apikey=\" + this.apiKey;\n                }\n\n                get = function get(url, procFunc) {\n                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this4 = this;\n\n                    var connection, result;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            this.emit(\"debug\", {\n                              action: \"request\",\n                              request: url,\n                              provider: this\n                            });\n                            connection = {\n                              url: url,\n                              throttleSlotInterval: 1000,\n                              throttleCallback: function throttleCallback(attempt, url) {\n                                if (_this4.apiKey === defaultApiKey) {\n                                  showThrottleMessage();\n                                }\n\n                                return Promise.resolve(true);\n                              }\n                            };\n                            _context2.next = 4;\n                            return fetchJson(connection, null, procFunc || getJsonResult);\n\n                          case 4:\n                            result = _context2.sent;\n                            this.emit(\"debug\", {\n                              action: \"response\",\n                              request: url,\n                              response: deepCopy(result),\n                              provider: this\n                            });\n                            return _context2.abrupt(\"return\", result);\n\n                          case 7:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                };\n\n                _context3.t0 = method;\n                _context3.next = _context3.t0 === \"getBlockNumber\" ? 7 : _context3.t0 === \"getGasPrice\" ? 9 : _context3.t0 === \"getBalance\" ? 11 : _context3.t0 === \"getTransactionCount\" ? 14 : _context3.t0 === \"getCode\" ? 17 : _context3.t0 === \"getStorageAt\" ? 20 : _context3.t0 === \"sendTransaction\" ? 24 : _context3.t0 === \"getBlock\" ? 27 : _context3.t0 === \"getTransaction\" ? 33 : _context3.t0 === \"getTransactionReceipt\" ? 36 : _context3.t0 === \"call\" ? 39 : _context3.t0 === \"estimateGas\" ? 46 : _context3.t0 === \"getLogs\" ? 51 : _context3.t0 === \"getEtherPrice\" ? 76 : 85;\n                break;\n\n              case 7:\n                url += \"/api?module=proxy&action=eth_blockNumber\" + apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 9:\n                url += \"/api?module=proxy&action=eth_gasPrice\" + apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 11:\n                // Returns base-10 result\n                url += \"/api?module=account&action=balance&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url, getResult));\n\n              case 14:\n                url += \"/api?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 17:\n                url += \"/api?module=proxy&action=eth_getCode&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 20:\n                url += \"/api?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n                url += \"&position=\" + params.position;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 24:\n                url += \"/api?module=proxy&action=eth_sendRawTransaction&hex=\" + params.signedTransaction;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url).catch(function (error) {\n                  if (error.responseText) {\n                    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n                    if (error.responseText.toLowerCase().indexOf(\"insufficient funds\") >= 0) {\n                      logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {});\n                    } // \"Transaction with the same hash was already imported.\"\n\n\n                    if (error.responseText.indexOf(\"same hash was already imported\") >= 0) {\n                      logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {});\n                    } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n                    if (error.responseText.indexOf(\"another transaction with same nonce\") >= 0) {\n                      logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {});\n                    }\n                  }\n\n                  throw error;\n                }));\n\n              case 27:\n                if (!params.blockTag) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                url += \"/api?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n\n                if (params.includeTransactions) {\n                  url += \"&boolean=true\";\n                } else {\n                  url += \"&boolean=false\";\n                }\n\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 32:\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n              case 33:\n                url += \"/api?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 36:\n                url += \"/api?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 39:\n                transaction = getTransactionString(params.transaction);\n\n                if (transaction) {\n                  transaction = \"&\" + transaction;\n                }\n\n                url += \"/api?module=proxy&action=eth_call\" + transaction; //url += \"&tag=\" + params.blockTag + apiKey;\n\n                if (!(params.blockTag !== \"latest\")) {\n                  _context3.next = 44;\n                  break;\n                }\n\n                throw new Error(\"EtherscanProvider does not support blockTag for call\");\n\n              case 44:\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 46:\n                _transaction = getTransactionString(params.transaction);\n\n                if (_transaction) {\n                  _transaction = \"&\" + _transaction;\n                }\n\n                url += \"/api?module=proxy&action=eth_estimateGas&\" + _transaction;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url));\n\n              case 51:\n                url += \"/api?module=logs&action=getLogs\";\n\n                if (params.filter.fromBlock) {\n                  url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                  url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                  url += \"&address=\" + params.filter.address;\n                } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      topics: params.filter.topics\n                    });\n                  }\n\n                  if (params.filter.topics.length === 1) {\n                    topic0 = params.filter.topics[0];\n\n                    if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                      logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        topic0: topic0\n                      });\n                    }\n\n                    url += \"&topic0=\" + topic0;\n                  }\n                }\n\n                url += apiKey;\n                _context3.next = 59;\n                return get(url, getResult);\n\n              case 59:\n                logs = _context3.sent;\n                // Cache txHash => blockHash\n                txs = {}; // Add any missing blockHash to the logs\n\n                i = 0;\n\n              case 62:\n                if (!(i < logs.length)) {\n                  _context3.next = 75;\n                  break;\n                }\n\n                log = logs[i];\n\n                if (!(log.blockHash != null)) {\n                  _context3.next = 66;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 72);\n\n              case 66:\n                if (!(txs[log.transactionHash] == null)) {\n                  _context3.next = 71;\n                  break;\n                }\n\n                _context3.next = 69;\n                return this.getTransaction(log.transactionHash);\n\n              case 69:\n                tx = _context3.sent;\n\n                if (tx) {\n                  txs[log.transactionHash] = tx.blockHash;\n                }\n\n              case 71:\n                log.blockHash = txs[log.transactionHash];\n\n              case 72:\n                i++;\n                _context3.next = 62;\n                break;\n\n              case 75:\n                return _context3.abrupt(\"return\", logs);\n\n              case 76:\n                if (!(this.network.name !== \"homestead\")) {\n                  _context3.next = 78;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", 0.0);\n\n              case 78:\n                url += \"/api?module=stats&action=ethprice\";\n                url += apiKey;\n                _context3.t1 = parseFloat;\n                _context3.next = 83;\n                return get(url, getResult);\n\n              case 83:\n                _context3.t2 = _context3.sent.ethusd;\n                return _context3.abrupt(\"return\", (0, _context3.t1)(_context3.t2));\n\n              case 85:\n                return _context3.abrupt(\"break\", 86);\n\n              case 86:\n                return _context3.abrupt(\"return\", _super.perform.call(this, method, params));\n\n              case 87:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    } // @TODO: Allow startBlock and endBlock to be Promises\n\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(addressOrName, startBlock, endBlock) {\n      var _this5 = this;\n\n      var url = this.baseUrl;\n      var apiKey = \"\";\n\n      if (this.apiKey) {\n        apiKey += \"&apikey=\" + this.apiKey;\n      }\n\n      if (startBlock == null) {\n        startBlock = 0;\n      }\n\n      if (endBlock == null) {\n        endBlock = 99999999;\n      }\n\n      return this.resolveName(addressOrName).then(function (address) {\n        url += \"/api?module=account&action=txlist&address=\" + address;\n        url += \"&startblock=\" + startBlock;\n        url += \"&endblock=\" + endBlock;\n        url += \"&sort=asc\" + apiKey;\n\n        _this5.emit(\"debug\", {\n          action: \"request\",\n          request: url,\n          provider: _this5\n        });\n\n        var connection = {\n          url: url,\n          throttleSlotInterval: 1000,\n          throttleCallback: function throttleCallback(attempt, url) {\n            if (_this5.apiKey === defaultApiKey) {\n              showThrottleMessage();\n            }\n\n            return Promise.resolve(true);\n          }\n        };\n        return fetchJson(connection, null, getResult).then(function (result) {\n          _this5.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: _this5\n          });\n\n          var output = [];\n          result.forEach(function (tx) {\n            [\"contractAddress\", \"to\"].forEach(function (key) {\n              if (tx[key] == \"\") {\n                delete tx[key];\n              }\n            });\n\n            if (tx.creates == null && tx.contractAddress != null) {\n              tx.creates = tx.contractAddress;\n            }\n\n            var item = _this5.formatter.transactionResponse(tx);\n\n            if (tx.timeStamp) {\n              item.timestamp = parseInt(tx.timeStamp);\n            }\n\n            output.push(item);\n          });\n          return output;\n        });\n      });\n    }\n  }]);\n\n  return EtherscanProvider;\n}(BaseProvider);","map":{"version":3,"sources":["../src.ts/etherscan-provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,sBAAlC;AAEA,SAAS,QAAT,EAAmB,cAAnB,QAAyC,2BAAzC;AACA,SAAS,SAAT,QAA0B,oBAA1B;AAEA,SAAS,mBAAT,QAAoC,aAApC;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAS,YAAT,QAA6B,iBAA7B,C,CAGA;;AACA,SAAS,oBAAT,CAA8B,WAA9B,EAA6D;AACzD,MAAM,MAAM,GAAG,EAAf;;AACA,OAAK,IAAI,GAAT,IAAgB,WAAhB,EAA6B;AACzB,QAAU,WAAY,CAAC,GAAD,CAAZ,IAAqB,IAA/B,EAAqC;AAAE;AAAW;;AAClD,QAAI,KAAK,GAAG,OAAO,CAAO,WAAY,CAAC,GAAD,CAAnB,CAAnB;;AACA,QAAU;AAAE,MAAA,QAAQ,EAAE,IAAZ;AAAkB,MAAA,QAAQ,EAAE,IAA5B;AAAkC,MAAA,KAAK,EAAE,IAAzC;AAA+C,MAAA,KAAK,EAAE;AAAtD,MAA8D,GAA9D,CAAV,EAA8E;AAC1E,MAAA,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAhB;AACH;;AACD,IAAA,MAAM,CAAC,IAAP,CAAY,GAAG,GAAG,GAAN,GAAY,KAAxB;AACH;;AACD,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP;AACH;;AAED,SAAS,SAAT,CAAmB,MAAnB,EAA8E;AAC1E;AACA,MAAI,MAAM,CAAC,MAAP,IAAiB,CAAjB,KAAuB,MAAM,CAAC,OAAP,KAAmB,kBAAnB,IAAyC,MAAM,CAAC,OAAP,KAAmB,uBAAnF,CAAJ,EAAiH;AAC7G,WAAO,MAAM,CAAC,MAAd;AACH;;AAED,MAAI,MAAM,CAAC,MAAP,IAAiB,CAAjB,IAAsB,MAAM,CAAC,OAAP,IAAkB,IAA5C,EAAkD;AAC9C,QAAM,KAAK,GAAQ,IAAI,KAAJ,CAAU,kBAAV,CAAnB;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,IAAI,CAAC,SAAL,CAAe,MAAf,CAAf;;AACA,QAAI,CAAC,MAAM,CAAC,MAAP,IAAiB,EAAlB,EAAsB,WAAtB,GAAoC,OAApC,CAA4C,YAA5C,KAA6D,CAAjE,EAAoE;AAChE,MAAA,KAAK,CAAC,aAAN,GAAsB,IAAtB;AACH;;AACD,UAAM,KAAN;AACH;;AAED,SAAO,MAAM,CAAC,MAAd;AACH;;AAED,SAAS,aAAT,CAAuB,MAAvB,EAAwH;AACpH;AACA,MAAI,MAAM,IAAU,MAAO,CAAC,MAAR,IAAkB,CAAlC,IAA6C,MAAO,CAAC,OAAR,IAAmB,OAAhE,IAA2E,CAAC,MAAM,CAAC,MAAP,IAAiB,EAAlB,EAAsB,WAAtB,GAAoC,OAApC,CAA4C,YAA5C,KAA6D,CAA5I,EAA+I;AAC3I,QAAM,KAAK,GAAQ,IAAI,KAAJ,CAAU,oBAAV,CAAnB;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,IAAI,CAAC,SAAL,CAAe,MAAf,CAAf;AACA,IAAA,KAAK,CAAC,aAAN,GAAsB,IAAtB;AACA,UAAM,KAAN;AACH;;AAED,MAAI,MAAM,CAAC,OAAP,IAAkB,KAAtB,EAA6B;AACzB;AACA,QAAM,MAAK,GAAQ,IAAI,KAAJ,CAAU,kBAAV,CAAnB;;AACA,IAAA,MAAK,CAAC,MAAN,GAAe,IAAI,CAAC,SAAL,CAAe,MAAf,CAAf;AACA,UAAM,MAAN;AACH;;AAED,MAAI,MAAM,CAAC,KAAX,EAAkB;AACd;AACA,QAAM,OAAK,GAAQ,IAAI,KAAJ,CAAU,MAAM,CAAC,KAAP,CAAa,OAAb,IAAwB,eAAlC,CAAnB;;AACA,QAAI,MAAM,CAAC,KAAP,CAAa,IAAjB,EAAuB;AAAE,MAAA,OAAK,CAAC,IAAN,GAAa,MAAM,CAAC,KAAP,CAAa,IAA1B;AAAiC;;AAC1D,QAAI,MAAM,CAAC,KAAP,CAAa,IAAjB,EAAuB;AAAE,MAAA,OAAK,CAAC,IAAN,GAAa,MAAM,CAAC,KAAP,CAAa,IAA1B;AAAiC;;AAC1D,UAAM,OAAN;AACH;;AAED,SAAO,MAAM,CAAC,MAAd;AACH,C,CAED;;;AACA,SAAS,WAAT,CAAqB,QAArB,EAAqC;AACjC,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAAE,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AAA2C;;AACzE,MAAI,QAAQ,KAAK,QAAjB,EAA2B;AAAE,WAAO,QAAP;AAAkB;;AAE/C,SAAO,QAAQ,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAf;AACH;;AAGD,IAAM,aAAa,GAAG,oCAAtB;AAEA,WAAa,iBAAb;AAAA;;AAAA;;AAII,6BAAY,OAAZ,EAAkC,MAAlC,EAAiD;AAAA;;AAAA;;AAC7C,IAAA,MAAM,CAAC,QAAP,gEAA4B,iBAA5B;AAEA,+BAAM,OAAN;AAEA,QAAI,IAAI,GAAG,SAAX;;AACA,QAAI,MAAK,OAAT,EAAkB;AAAE,MAAA,IAAI,GAAG,MAAK,OAAL,CAAa,IAApB;AAA2B;;AAE/C,QAAI,OAAO,GAAG,IAAd;;AACA,YAAO,IAAP;AACI,WAAK,WAAL;AACI,QAAA,OAAO,GAAG,0BAAV;AACA;;AACJ,WAAK,SAAL;AACI,QAAA,OAAO,GAAG,kCAAV;AACA;;AACJ,WAAK,SAAL;AACI,QAAA,OAAO,GAAG,kCAAV;AACA;;AACJ,WAAK,OAAL;AACI,QAAA,OAAO,GAAG,gCAAV;AACA;;AACJ,WAAK,QAAL;AACI,QAAA,OAAO,GAAG,iCAAV;AACA;;AACJ;AACI,cAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AAjBR;;AAoBA,IAAA,cAAc,gCAAO,SAAP,EAAkB,OAAlB,CAAd;AACA,IAAA,cAAc,gCAAO,QAAP,EAAiB,MAAM,IAAI,aAA3B,CAAd;AA9B6C;AA+BhD;;AAnCL;AAAA;AAAA,oCAqCuB;;;;;;iDACR,KAAK,O;;;;;;;;;AACf;AAvCL;AAAA;AAAA,4BAyCkB,MAzClB,EAyCkC,MAzClC,EAyC6C;AAAA;;;;;;;;;;;;;;;;;;;AACjC,gBAAA,G,GAAM,KAAK,O;AAEX,gBAAA,M,GAAS,E;;AACb,oBAAI,KAAK,MAAT,EAAiB;AAAE,kBAAA,MAAM,IAAI,aAAa,KAAK,MAA5B;AAAqC;;AAElD,gBAAA,G,GAAM,SAAN,GAAM,CAAO,GAAP,EAAoB,QAApB;AAAA,yBAAoE,SAAA,CAAA,MAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5E,iCAAK,IAAL,CAAU,OAAV,EAAmB;AACf,8BAAA,MAAM,EAAE,SADO;AAEf,8BAAA,OAAO,EAAE,GAFM;AAGf,8BAAA,QAAQ,EAAE;AAHK,6BAAnB;AAOM,4BAAA,UARsE,GAQzD;AACf,8BAAA,GAAG,EAAE,GADU;AAEf,8BAAA,oBAAoB,EAAE,IAFP;AAGf,8BAAA,gBAAgB,EAAE,0BAAC,OAAD,EAAkB,GAAlB,EAAiC;AAC/C,oCAAI,MAAI,CAAC,MAAL,KAAgB,aAApB,EAAmC;AAC/B,kCAAA,mBAAmB;AACtB;;AACD,uCAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACH;AARc,6BARyD;AAAA;AAmB7D,mCAAM,SAAS,CAAC,UAAD,EAAa,IAAb,EAAmB,QAAQ,IAAI,aAA/B,CAAf;;AAnB6D;AAmBtE,4BAAA,MAnBsE;AAqB5E,iCAAK,IAAL,CAAU,OAAV,EAAmB;AACf,8BAAA,MAAM,EAAE,UADO;AAEf,8BAAA,OAAO,EAAE,GAFM;AAGf,8BAAA,QAAQ,EAAE,QAAQ,CAAC,MAAD,CAHH;AAIf,8BAAA,QAAQ,EAAE;AAJK,6BAAnB;AArB4E,8DA4BrE,MA5BqE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,EAApE;AAAA,iB;;+BA+BJ,M;kDACC,gB,wBAIA,a,wBAIA,Y,yBAMA,qB,yBAMA,S,yBAKA,c,yBAOA,iB,yBAqBA,U,yBAaA,gB,yBAKA,uB,yBAMA,M,yBAYA,a,yBAQA,S,yBAqDA,e;;;;AArJD,gBAAA,GAAG,IAAI,6CAA6C,MAApD;kDACO,GAAG,CAAC,GAAD,C;;;AAGV,gBAAA,GAAG,IAAI,0CAA0C,MAAjD;kDACO,GAAG,CAAC,GAAD,C;;;AAGV;AACA,gBAAA,GAAG,IAAI,gDAAgD,MAAM,CAAC,OAA9D;AACA,gBAAA,GAAG,IAAI,UAAU,MAAM,CAAC,QAAjB,GAA4B,MAAnC;kDACO,GAAG,CAAC,GAAD,EAAM,SAAN,C;;;AAGV,gBAAA,GAAG,IAAI,8DAA8D,MAAM,CAAC,OAA5E;AACA,gBAAA,GAAG,IAAI,UAAU,MAAM,CAAC,QAAjB,GAA4B,MAAnC;kDACO,GAAG,CAAC,GAAD,C;;;AAIV,gBAAA,GAAG,IAAI,kDAAkD,MAAM,CAAC,OAAhE;AACA,gBAAA,GAAG,IAAI,UAAU,MAAM,CAAC,QAAjB,GAA4B,MAAnC;kDACO,GAAG,CAAC,GAAD,C;;;AAGV,gBAAA,GAAG,IAAI,uDAAuD,MAAM,CAAC,OAArE;AACA,gBAAA,GAAG,IAAI,eAAe,MAAM,CAAC,QAA7B;AACA,gBAAA,GAAG,IAAI,UAAU,MAAM,CAAC,QAAjB,GAA4B,MAAnC;kDACO,GAAG,CAAC,GAAD,C;;;AAIV,gBAAA,GAAG,IAAI,yDAAyD,MAAM,CAAC,iBAAvE;AACA,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,CAAH,CAAS,KAAT,CAAe,UAAC,KAAD,EAAU;AAC5B,sBAAI,KAAK,CAAC,YAAV,EAAwB;AACpB;AACA,wBAAI,KAAK,CAAC,YAAN,CAAmB,WAAnB,GAAiC,OAAjC,CAAyC,oBAAzC,KAAkE,CAAtE,EAAyE;AACrE,sBAAA,MAAM,CAAC,UAAP,CAAkB,oBAAlB,EAAwC,MAAM,CAAC,MAAP,CAAc,kBAAtD,EAA0E,EAA1E;AACH,qBAJmB,CAKpB;;;AACA,wBAAI,KAAK,CAAC,YAAN,CAAmB,OAAnB,CAA2B,gCAA3B,KAAgE,CAApE,EAAuE;AACnE,sBAAA,MAAM,CAAC,UAAP,CAAkB,6BAAlB,EAAiD,MAAM,CAAC,MAAP,CAAc,aAA/D,EAA8E,EAA9E;AACH,qBARmB,CASpB;;;AACA,wBAAI,KAAK,CAAC,YAAN,CAAmB,OAAnB,CAA2B,qCAA3B,KAAqE,CAAzE,EAA4E;AACxE,sBAAA,MAAM,CAAC,UAAP,CAAkB,yBAAlB,EAA6C,MAAM,CAAC,MAAP,CAAc,uBAA3D,EAAoF,EAApF;AACH;AACJ;;AACD,wBAAM,KAAN;AACH,iBAhBM,C;;;qBAmBH,MAAM,CAAC,Q;;;;;AACP,gBAAA,GAAG,IAAI,uDAAuD,MAAM,CAAC,QAArE;;AACA,oBAAI,MAAM,CAAC,mBAAX,EAAgC;AAC5B,kBAAA,GAAG,IAAI,eAAP;AACH,iBAFD,MAEO;AACH,kBAAA,GAAG,IAAI,gBAAP;AACH;;AACD,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,C;;;sBAER,IAAI,KAAJ,CAAU,uCAAV,C;;;AAGN,gBAAA,GAAG,IAAI,8DAA8D,MAAM,CAAC,eAA5E;AACA,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,C;;;AAGV,gBAAA,GAAG,IAAI,+DAA+D,MAAM,CAAC,eAA7E;AACA,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,C;;;AAIN,gBAAA,W,GAAc,oBAAoB,CAAC,MAAM,CAAC,WAAR,C;;AACtC,oBAAI,WAAJ,EAAiB;AAAE,kBAAA,WAAW,GAAG,MAAM,WAApB;AAAkC;;AACrD,gBAAA,GAAG,IAAI,sCAAsC,WAA7C,C,CACA;;sBACI,MAAM,CAAC,QAAP,KAAoB,Q;;;;;sBACd,IAAI,KAAJ,CAAU,sDAAV,C;;;AAEV,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,C;;;AAIN,gBAAA,Y,GAAc,oBAAoB,CAAC,MAAM,CAAC,WAAR,C;;AACtC,oBAAI,YAAJ,EAAiB;AAAE,kBAAA,YAAW,GAAG,MAAM,YAApB;AAAkC;;AACrD,gBAAA,GAAG,IAAI,8CAA8C,YAArD;AACA,gBAAA,GAAG,IAAI,MAAP;kDACO,GAAG,CAAC,GAAD,C;;;AAIV,gBAAA,GAAG,IAAI,iCAAP;;AAEA,oBAAI,MAAM,CAAC,MAAP,CAAc,SAAlB,EAA6B;AACzB,kBAAA,GAAG,IAAI,gBAAgB,WAAW,CAAC,MAAM,CAAC,MAAP,CAAc,SAAf,CAAlC;AACH;;AAED,oBAAI,MAAM,CAAC,MAAP,CAAc,OAAlB,EAA2B;AACvB,kBAAA,GAAG,IAAI,cAAc,WAAW,CAAC,MAAM,CAAC,MAAP,CAAc,OAAf,CAAhC;AACH;;AAED,oBAAI,MAAM,CAAC,MAAP,CAAc,OAAlB,EAA2B;AACvB,kBAAA,GAAG,IAAI,cAAc,MAAM,CAAC,MAAP,CAAc,OAAnC;AACH,iB,CAED;;;AACA,oBAAI,MAAM,CAAC,MAAP,CAAc,MAAd,IAAwB,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,MAArB,GAA8B,CAA1D,EAA6D;AACzD,sBAAI,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,MAArB,GAA8B,CAAlC,EAAqC;AACjC,oBAAA,MAAM,CAAC,UAAP,CAAkB,yBAAlB,EAA6C,MAAM,CAAC,MAAP,CAAc,qBAA3D,EAAkF;AAAE,sBAAA,MAAM,EAAE,MAAM,CAAC,MAAP,CAAc;AAAxB,qBAAlF;AACH;;AAED,sBAAI,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,MAArB,KAAgC,CAApC,EAAuC;AAC7B,oBAAA,MAD6B,GACpB,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,CAArB,CADoB;;AAEnC,wBAAI,OAAO,MAAP,KAAmB,QAAnB,IAA+B,MAAM,CAAC,MAAP,KAAkB,EAArD,EAAyD;AACrD,sBAAA,MAAM,CAAC,UAAP,CAAkB,0BAAlB,EAA8C,MAAM,CAAC,MAAP,CAAc,qBAA5D,EAAmF;AAAE,wBAAA,MAAM,EAAE;AAAV,uBAAnF;AACH;;AACD,oBAAA,GAAG,IAAI,aAAa,MAApB;AACH;AACJ;;AAED,gBAAA,GAAG,IAAI,MAAP;;AAEyB,uBAAM,GAAG,CAAC,GAAD,EAAM,SAAN,CAAT;;;AAAnB,gBAAA,I;AAEN;AACI,gBAAA,G,GAAkC,E,EAEtC;;AACS,gBAAA,C,GAAI,C;;;sBAAG,CAAC,GAAG,IAAI,CAAC,M;;;;;AACf,gBAAA,G,GAAM,IAAI,CAAC,CAAD,C;;sBACZ,GAAG,CAAC,SAAJ,IAAiB,I;;;;;;;;sBACjB,GAAG,CAAC,GAAG,CAAC,eAAL,CAAH,IAA4B,I;;;;;;AACjB,uBAAM,KAAK,cAAL,CAAoB,GAAG,CAAC,eAAxB,CAAN;;;AAAL,gBAAA,E;;AACN,oBAAI,EAAJ,EAAQ;AACJ,kBAAA,GAAG,CAAC,GAAG,CAAC,eAAL,CAAH,GAA2B,EAAE,CAAC,SAA9B;AACH;;;AAEL,gBAAA,GAAG,CAAC,SAAJ,GAAgB,GAAG,CAAC,GAAG,CAAC,eAAL,CAAnB;;;AAT6B,gBAAA,CAAC,E;;;;;kDAY3B,I;;;sBAIH,KAAK,OAAL,CAAa,IAAb,KAAsB,W;;;;;kDAAsB,G;;;AAChD,gBAAA,GAAG,IAAI,mCAAP;AACA,gBAAA,GAAG,IAAI,MAAP;+BACO,U;;AAAY,uBAAM,GAAG,CAAC,GAAD,EAAM,SAAN,CAAT;;;8CAA2B,M;;;;;;;kDAM/C,MAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb,EAAc,MAAd,EAAsB,MAAtB,C;;;;;;;;;AACV,KAhPL,CAkPI;;AAlPJ;AAAA;AAAA,+BAmPe,aAnPf,EAmPwD,UAnPxD,EAmP+E,QAnP/E,EAmPkG;AAAA;;AAE1F,UAAI,GAAG,GAAG,KAAK,OAAf;AAEA,UAAI,MAAM,GAAG,EAAb;;AACA,UAAI,KAAK,MAAT,EAAiB;AAAE,QAAA,MAAM,IAAI,aAAa,KAAK,MAA5B;AAAqC;;AAExD,UAAI,UAAU,IAAI,IAAlB,EAAwB;AAAE,QAAA,UAAU,GAAG,CAAb;AAAiB;;AAC3C,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AAAE,QAAA,QAAQ,GAAG,QAAX;AAAsB;;AAE9C,aAAO,KAAK,WAAL,CAAiB,aAAjB,EAAgC,IAAhC,CAAqC,UAAC,OAAD,EAAY;AACpD,QAAA,GAAG,IAAI,+CAA+C,OAAtD;AACA,QAAA,GAAG,IAAI,iBAAiB,UAAxB;AACA,QAAA,GAAG,IAAI,eAAe,QAAtB;AACA,QAAA,GAAG,IAAI,cAAc,MAArB;;AAEA,QAAA,MAAI,CAAC,IAAL,CAAU,OAAV,EAAmB;AACf,UAAA,MAAM,EAAE,SADO;AAEf,UAAA,OAAO,EAAE,GAFM;AAGf,UAAA,QAAQ,EAAE;AAHK,SAAnB;;AAMA,YAAM,UAAU,GAAG;AACf,UAAA,GAAG,EAAE,GADU;AAEf,UAAA,oBAAoB,EAAE,IAFP;AAGf,UAAA,gBAAgB,EAAE,0BAAC,OAAD,EAAkB,GAAlB,EAAiC;AAC/C,gBAAI,MAAI,CAAC,MAAL,KAAgB,aAApB,EAAmC;AAC/B,cAAA,mBAAmB;AACtB;;AACD,mBAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACH;AARc,SAAnB;AAWA,eAAO,SAAS,CAAC,UAAD,EAAa,IAAb,EAAmB,SAAnB,CAAT,CAAuC,IAAvC,CAA4C,UAAC,MAAD,EAAuB;AACtE,UAAA,MAAI,CAAC,IAAL,CAAU,OAAV,EAAmB;AACf,YAAA,MAAM,EAAE,UADO;AAEf,YAAA,OAAO,EAAE,GAFM;AAGf,YAAA,QAAQ,EAAE,QAAQ,CAAC,MAAD,CAHH;AAIf,YAAA,QAAQ,EAAE;AAJK,WAAnB;;AAOA,cAAI,MAAM,GAA+B,EAAzC;AACA,UAAA,MAAM,CAAC,OAAP,CAAe,UAAC,EAAD,EAAO;AAClB,aAAC,iBAAD,EAAoB,IAApB,EAA0B,OAA1B,CAAkC,UAAS,GAAT,EAAY;AAC1C,kBAAI,EAAE,CAAC,GAAD,CAAF,IAAW,EAAf,EAAmB;AAAE,uBAAO,EAAE,CAAC,GAAD,CAAT;AAAiB;AACzC,aAFD;;AAGA,gBAAI,EAAE,CAAC,OAAH,IAAc,IAAd,IAAsB,EAAE,CAAC,eAAH,IAAsB,IAAhD,EAAsD;AAClD,cAAA,EAAE,CAAC,OAAH,GAAa,EAAE,CAAC,eAAhB;AACH;;AACD,gBAAI,IAAI,GAAG,MAAI,CAAC,SAAL,CAAe,mBAAf,CAAmC,EAAnC,CAAX;;AACA,gBAAI,EAAE,CAAC,SAAP,EAAkB;AAAE,cAAA,IAAI,CAAC,SAAL,GAAiB,QAAQ,CAAC,EAAE,CAAC,SAAJ,CAAzB;AAA0C;;AAC9D,YAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACH,WAVD;AAWA,iBAAO,MAAP;AACH,SArBM,CAAP;AAsBH,OA7CM,CAAP;AA8CH;AA3SL;;AAAA;AAAA,EAAuC,YAAvC","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { hexlify, hexValue } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionString(transaction) {\n    const result = [];\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = hexlify(transaction[key]);\n        if ({ gasLimit: true, gasPrice: true, nonce: true, value: true }[key]) {\n            value = hexValue(value);\n        }\n        result.push(key + \"=\" + value);\n    }\n    return result.join(\"&\");\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || result.message != \"OK\") {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nexport class EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        logger.checkNew(new.target, EtherscanProvider);\n        super(network);\n        let name = \"invalid\";\n        if (this.network) {\n            name = this.network.name;\n        }\n        let baseUrl = null;\n        switch (name) {\n            case \"homestead\":\n                baseUrl = \"https://api.etherscan.io\";\n                break;\n            case \"ropsten\":\n                baseUrl = \"https://api-ropsten.etherscan.io\";\n                break;\n            case \"rinkeby\":\n                baseUrl = \"https://api-rinkeby.etherscan.io\";\n                break;\n            case \"kovan\":\n                baseUrl = \"https://api-kovan.etherscan.io\";\n                break;\n            case \"goerli\":\n                baseUrl = \"https://api-goerli.etherscan.io\";\n                break;\n            default:\n                throw new Error(\"unsupported network\");\n        }\n        defineReadOnly(this, \"baseUrl\", baseUrl);\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = this.baseUrl;\n            let apiKey = \"\";\n            if (this.apiKey) {\n                apiKey += \"&apikey=\" + this.apiKey;\n            }\n            const get = (url, procFunc) => __awaiter(this, void 0, void 0, function* () {\n                this.emit(\"debug\", {\n                    action: \"request\",\n                    request: url,\n                    provider: this\n                });\n                const connection = {\n                    url: url,\n                    throttleSlotInterval: 1000,\n                    throttleCallback: (attempt, url) => {\n                        if (this.apiKey === defaultApiKey) {\n                            showThrottleMessage();\n                        }\n                        return Promise.resolve(true);\n                    }\n                };\n                const result = yield fetchJson(connection, null, procFunc || getJsonResult);\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    request: url,\n                    response: deepCopy(result),\n                    provider: this\n                });\n                return result;\n            });\n            switch (method) {\n                case \"getBlockNumber\":\n                    url += \"/api?module=proxy&action=eth_blockNumber\" + apiKey;\n                    return get(url);\n                case \"getGasPrice\":\n                    url += \"/api?module=proxy&action=eth_gasPrice\" + apiKey;\n                    return get(url);\n                case \"getBalance\":\n                    // Returns base-10 result\n                    url += \"/api?module=account&action=balance&address=\" + params.address;\n                    url += \"&tag=\" + params.blockTag + apiKey;\n                    return get(url, getResult);\n                case \"getTransactionCount\":\n                    url += \"/api?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n                    url += \"&tag=\" + params.blockTag + apiKey;\n                    return get(url);\n                case \"getCode\":\n                    url += \"/api?module=proxy&action=eth_getCode&address=\" + params.address;\n                    url += \"&tag=\" + params.blockTag + apiKey;\n                    return get(url);\n                case \"getStorageAt\":\n                    url += \"/api?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n                    url += \"&position=\" + params.position;\n                    url += \"&tag=\" + params.blockTag + apiKey;\n                    return get(url);\n                case \"sendTransaction\":\n                    url += \"/api?module=proxy&action=eth_sendRawTransaction&hex=\" + params.signedTransaction;\n                    url += apiKey;\n                    return get(url).catch((error) => {\n                        if (error.responseText) {\n                            // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n                            if (error.responseText.toLowerCase().indexOf(\"insufficient funds\") >= 0) {\n                                logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {});\n                            }\n                            // \"Transaction with the same hash was already imported.\"\n                            if (error.responseText.indexOf(\"same hash was already imported\") >= 0) {\n                                logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {});\n                            }\n                            // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n                            if (error.responseText.indexOf(\"another transaction with same nonce\") >= 0) {\n                                logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {});\n                            }\n                        }\n                        throw error;\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        url += \"/api?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n                        if (params.includeTransactions) {\n                            url += \"&boolean=true\";\n                        }\n                        else {\n                            url += \"&boolean=false\";\n                        }\n                        url += apiKey;\n                        return get(url);\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    url += \"/api?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n                    url += apiKey;\n                    return get(url);\n                case \"getTransactionReceipt\":\n                    url += \"/api?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n                    url += apiKey;\n                    return get(url);\n                case \"call\": {\n                    let transaction = getTransactionString(params.transaction);\n                    if (transaction) {\n                        transaction = \"&\" + transaction;\n                    }\n                    url += \"/api?module=proxy&action=eth_call\" + transaction;\n                    //url += \"&tag=\" + params.blockTag + apiKey;\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    url += apiKey;\n                    return get(url);\n                }\n                case \"estimateGas\": {\n                    let transaction = getTransactionString(params.transaction);\n                    if (transaction) {\n                        transaction = \"&\" + transaction;\n                    }\n                    url += \"/api?module=proxy&action=eth_estimateGas&\" + transaction;\n                    url += apiKey;\n                    return get(url);\n                }\n                case \"getLogs\": {\n                    url += \"/api?module=logs&action=getLogs\";\n                    if (params.filter.fromBlock) {\n                        url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        url += \"&address=\" + params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            url += \"&topic0=\" + topic0;\n                        }\n                    }\n                    url += apiKey;\n                    const logs = yield get(url, getResult);\n                    // Cache txHash => blockHash\n                    let txs = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (txs[log.transactionHash] == null) {\n                            const tx = yield this.getTransaction(log.transactionHash);\n                            if (tx) {\n                                txs[log.transactionHash] = tx.blockHash;\n                            }\n                        }\n                        log.blockHash = txs[log.transactionHash];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    url += \"/api?module=stats&action=ethprice\";\n                    url += apiKey;\n                    return parseFloat((yield get(url, getResult)).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // @TODO: Allow startBlock and endBlock to be Promises\n    getHistory(addressOrName, startBlock, endBlock) {\n        let url = this.baseUrl;\n        let apiKey = \"\";\n        if (this.apiKey) {\n            apiKey += \"&apikey=\" + this.apiKey;\n        }\n        if (startBlock == null) {\n            startBlock = 0;\n        }\n        if (endBlock == null) {\n            endBlock = 99999999;\n        }\n        return this.resolveName(addressOrName).then((address) => {\n            url += \"/api?module=account&action=txlist&address=\" + address;\n            url += \"&startblock=\" + startBlock;\n            url += \"&endblock=\" + endBlock;\n            url += \"&sort=asc\" + apiKey;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.apiKey === defaultApiKey) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            return fetchJson(connection, null, getResult).then((result) => {\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    request: url,\n                    response: deepCopy(result),\n                    provider: this\n                });\n                let output = [];\n                result.forEach((tx) => {\n                    [\"contractAddress\", \"to\"].forEach(function (key) {\n                        if (tx[key] == \"\") {\n                            delete tx[key];\n                        }\n                    });\n                    if (tx.creates == null && tx.contractAddress != null) {\n                        tx.creates = tx.contractAddress;\n                    }\n                    let item = this.formatter.transactionResponse(tx);\n                    if (tx.timeStamp) {\n                        item.timestamp = parseInt(tx.timeStamp);\n                    }\n                    output.push(item);\n                });\n                return output;\n            });\n        });\n    }\n}\n//# sourceMappingURL=etherscan-provider.js.map"]},"metadata":{},"sourceType":"module"}