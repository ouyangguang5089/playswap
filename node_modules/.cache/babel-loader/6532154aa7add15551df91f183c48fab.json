{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\nvar varint = require('varint');\n\nvar intTable = require('./int-table');\n\nvar codecNameToCodeVarint = require('./varint-table');\n\nvar util = require('./util');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n\nexports = module.exports;\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\nexports.addPrefix = function (multicodecStrOrCode, data) {\n  var prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n};\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nexports.rmPrefix = function (data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n/**\n * Get the codec of the prefixed data.\n * @param {Uint8Array} prefixedData\n * @returns {string}\n */\n\n\nexports.getCodec = function (prefixedData) {\n  var code = varint.decode(prefixedData);\n  var codecName = intTable.get(code);\n\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n\n  return codecName;\n};\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\n\n\nexports.getName = function (codec) {\n  return intTable.get(codec);\n};\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\n\n\nexports.getNumber = function (name) {\n  var code = codecNameToCodeVarint[name];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n\n  return util.varintUint8ArrayDecode(code)[0];\n};\n/**\n * Get the code of the prefixed data.\n * @param {Uint8Array} prefixedData\n * @returns {number}\n */\n\n\nexports.getCode = function (prefixedData) {\n  return varint.decode(prefixedData);\n};\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Uint8Array}\n */\n\n\nexports.getCodeVarint = function (codecName) {\n  var code = codecNameToCodeVarint[codecName];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n\n  return code;\n};\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\n\n\nexports.getVarint = function (code) {\n  return varint.encode(code);\n}; // Make the constants top-level constants\n\n\nvar constants = require('./constants');\n\nObject.assign(exports, constants); // Human friendly names for printing, e.g. in error messages\n\nexports.print = require('./print');","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/multicodec/src/index.js"],"names":["varint","require","intTable","codecNameToCodeVarint","util","uint8ArrayConcat","exports","module","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","varintUint8ArrayDecode","getCode","getCodeVarint","getVarint","encode","constants","Object","assign","print"],"mappings":"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","sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Uint8Array} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = (codec) => {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = (name) => {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return util.varintUint8ArrayDecode(code)[0]\n}\n\n/**\n * Get the code of the prefixed data.\n * @param {Uint8Array} prefixedData\n * @returns {number}\n */\nexports.getCode = (prefixedData) => {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Uint8Array}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = (code) => {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\nObject.assign(exports, constants)\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print')\n"]},"metadata":{},"sourceType":"script"}