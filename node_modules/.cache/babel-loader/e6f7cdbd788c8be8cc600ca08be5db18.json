{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"../constants\");\n\nvar encoding_1 = require(\"./encoding\");\n\nfunction isCompressed(publicKey) {\n  return publicKey.length === constants_1.KEY_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n}\n\nexports.isCompressed = isCompressed;\n\nfunction isDecompressed(publicKey) {\n  return publicKey.length === constants_1.DECOMPRESSED_LENGTH || publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isDecompressed = isDecompressed;\n\nfunction isPrefixed(publicKey) {\n  if (isCompressed(publicKey)) {\n    return publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n  }\n\n  return publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isPrefixed = isPrefixed;\n\nfunction sanitizePublicKey(publicKey) {\n  return isPrefixed(publicKey) ? publicKey : Buffer.from(\"04\".concat(publicKey.toString('hex')), 'hex');\n}\n\nexports.sanitizePublicKey = sanitizePublicKey;\n\nfunction exportRecoveryParam(recoveryParam) {\n  return encoding_1.hexToBuffer(encoding_1.sanitizeHex((recoveryParam + 27).toString(16)));\n}\n\nexports.exportRecoveryParam = exportRecoveryParam;\n\nfunction importRecoveryParam(v) {\n  return encoding_1.hexToNumber(encoding_1.removeHexLeadingZeros(encoding_1.bufferToHex(v))) - 27;\n}\n\nexports.importRecoveryParam = importRecoveryParam;\n\nfunction splitSignature(sig) {\n  return {\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64),\n    v: sig.slice(64, 65)\n  };\n}\n\nexports.splitSignature = splitSignature;\n\nfunction joinSignature(sig) {\n  return encoding_1.concatBuffers(sig.r, sig.s, sig.v);\n}\n\nexports.joinSignature = joinSignature;\n\nfunction isValidDERSignature(sig) {\n  return encoding_1.bufferToHex(sig).startsWith('30') && sig.length > 65;\n}\n\nexports.isValidDERSignature = isValidDERSignature;\n\nfunction sanitizeRSVSignature(sig) {\n  return {\n    signature: sig.slice(0, 64),\n    recovery: importRecoveryParam(sig.slice(64, 65))\n  };\n}\n\nexports.sanitizeRSVSignature = sanitizeRSVSignature;","map":{"version":3,"sources":["../../../src/helpers/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst encoding_1 = require(\"./encoding\");\nfunction isCompressed(publicKey) {\n    return (publicKey.length === constants_1.KEY_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH);\n}\nexports.isCompressed = isCompressed;\nfunction isDecompressed(publicKey) {\n    return (publicKey.length === constants_1.DECOMPRESSED_LENGTH ||\n        publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH);\n}\nexports.isDecompressed = isDecompressed;\nfunction isPrefixed(publicKey) {\n    if (isCompressed(publicKey)) {\n        return publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n    }\n    return publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\nexports.isPrefixed = isPrefixed;\nfunction sanitizePublicKey(publicKey) {\n    return isPrefixed(publicKey)\n        ? publicKey\n        : Buffer.from(`04${publicKey.toString('hex')}`, 'hex');\n}\nexports.sanitizePublicKey = sanitizePublicKey;\nfunction exportRecoveryParam(recoveryParam) {\n    return encoding_1.hexToBuffer(encoding_1.sanitizeHex((recoveryParam + 27).toString(16)));\n}\nexports.exportRecoveryParam = exportRecoveryParam;\nfunction importRecoveryParam(v) {\n    return encoding_1.hexToNumber(encoding_1.removeHexLeadingZeros(encoding_1.bufferToHex(v))) - 27;\n}\nexports.importRecoveryParam = importRecoveryParam;\nfunction splitSignature(sig) {\n    return {\n        r: sig.slice(0, 32),\n        s: sig.slice(32, 64),\n        v: sig.slice(64, 65),\n    };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(sig) {\n    return encoding_1.concatBuffers(sig.r, sig.s, sig.v);\n}\nexports.joinSignature = joinSignature;\nfunction isValidDERSignature(sig) {\n    return encoding_1.bufferToHex(sig).startsWith('30') && sig.length > 65;\n}\nexports.isValidDERSignature = isValidDERSignature;\nfunction sanitizeRSVSignature(sig) {\n    return {\n        signature: sig.slice(0, 64),\n        recovery: importRecoveryParam(sig.slice(64, 65)),\n    };\n}\nexports.sanitizeRSVSignature = sanitizeRSVSignature;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}