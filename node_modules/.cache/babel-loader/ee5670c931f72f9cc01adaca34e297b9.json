{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar decode = require('parse-entities');\n\nvar locate = require('../locate/tag');\n\nmodule.exports = autoLink;\nautoLink.locator = locate;\nautoLink.notInLink = true;\nvar C_LT = '<';\nvar C_GT = '>';\nvar C_AT_SIGN = '@';\nvar C_SLASH = '/';\nvar MAILTO = 'mailto:';\nvar MAILTO_LENGTH = MAILTO.length;\n/* Tokenise a link. */\n\nfunction autoLink(eat, value, silent) {\n  var self;\n  var subvalue;\n  var length;\n  var index;\n  var queue;\n  var character;\n  var hasAtCharacter;\n  var link;\n  var now;\n  var content;\n  var tokenizers;\n  var exit;\n\n  if (value.charAt(0) !== C_LT) {\n    return;\n  }\n\n  self = this;\n  subvalue = '';\n  length = value.length;\n  index = 0;\n  queue = '';\n  hasAtCharacter = false;\n  link = '';\n  index++;\n  subvalue = C_LT;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === C_GT || character === C_AT_SIGN || character === ':' && value.charAt(index + 1) === C_SLASH) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  link += queue;\n  queue = '';\n  character = value.charAt(index);\n  link += character;\n  index++;\n\n  if (character === C_AT_SIGN) {\n    hasAtCharacter = true;\n  } else {\n    if (character !== ':' || value.charAt(index + 1) !== C_SLASH) {\n      return;\n    }\n\n    link += C_SLASH;\n    index++;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === C_GT) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!queue || character !== C_GT) {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  link += queue;\n  content = link;\n  subvalue += link + character;\n  now = eat.now();\n  now.column++;\n  now.offset++;\n\n  if (hasAtCharacter) {\n    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {\n      content = content.substr(MAILTO_LENGTH);\n      now.column += MAILTO_LENGTH;\n      now.offset += MAILTO_LENGTH;\n    } else {\n      link = MAILTO + link;\n    }\n  }\n  /* Temporarily remove all tokenizers except text in autolinks. */\n\n\n  tokenizers = self.inlineTokenizers;\n  self.inlineTokenizers = {\n    text: tokenizers.text\n  };\n  exit = self.enterLink();\n  content = self.tokenizeInline(content, now);\n  self.inlineTokenizers = tokenizers;\n  exit();\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(link, {\n      nonTerminated: false\n    }),\n    children: content\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/auto-link.js"],"names":["whitespace","require","decode","locate","module","exports","autoLink","locator","notInLink","C_LT","C_GT","C_AT_SIGN","C_SLASH","MAILTO","MAILTO_LENGTH","length","eat","value","silent","self","subvalue","index","queue","character","hasAtCharacter","link","now","content","tokenizers","exit","charAt","column","offset","slice","toLowerCase","substr","inlineTokenizers","text","enterLink","tokenizeInline","type","title","url","nonTerminated","children"],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar decode = require('parse-entities');\nvar locate = require('../locate/tag');\n\nmodule.exports = autoLink;\nautoLink.locator = locate;\nautoLink.notInLink = true;\n\nvar C_LT = '<';\nvar C_GT = '>';\nvar C_AT_SIGN = '@';\nvar C_SLASH = '/';\nvar MAILTO = 'mailto:';\nvar MAILTO_LENGTH = MAILTO.length;\n\n/* Tokenise a link. */\nfunction autoLink(eat, value, silent) {\n  var self;\n  var subvalue;\n  var length;\n  var index;\n  var queue;\n  var character;\n  var hasAtCharacter;\n  var link;\n  var now;\n  var content;\n  var tokenizers;\n  var exit;\n\n  if (value.charAt(0) !== C_LT) {\n    return;\n  }\n\n  self = this;\n  subvalue = '';\n  length = value.length;\n  index = 0;\n  queue = '';\n  hasAtCharacter = false;\n  link = '';\n\n  index++;\n  subvalue = C_LT;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (\n      whitespace(character) ||\n      character === C_GT ||\n      character === C_AT_SIGN ||\n      (character === ':' && value.charAt(index + 1) === C_SLASH)\n    ) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  link += queue;\n  queue = '';\n\n  character = value.charAt(index);\n  link += character;\n  index++;\n\n  if (character === C_AT_SIGN) {\n    hasAtCharacter = true;\n  } else {\n    if (\n      character !== ':' ||\n      value.charAt(index + 1) !== C_SLASH\n    ) {\n      return;\n    }\n\n    link += C_SLASH;\n    index++;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === C_GT) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!queue || character !== C_GT) {\n    return;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  link += queue;\n  content = link;\n  subvalue += link + character;\n  now = eat.now();\n  now.column++;\n  now.offset++;\n\n  if (hasAtCharacter) {\n    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {\n      content = content.substr(MAILTO_LENGTH);\n      now.column += MAILTO_LENGTH;\n      now.offset += MAILTO_LENGTH;\n    } else {\n      link = MAILTO + link;\n    }\n  }\n\n  /* Temporarily remove all tokenizers except text in autolinks. */\n  tokenizers = self.inlineTokenizers;\n  self.inlineTokenizers = {text: tokenizers.text};\n\n  exit = self.enterLink();\n\n  content = self.tokenizeInline(content, now);\n\n  self.inlineTokenizers = tokenizers;\n  exit();\n\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(link, {nonTerminated: false}),\n    children: content\n  });\n}\n"]},"metadata":{},"sourceType":"script"}