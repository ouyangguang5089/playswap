{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var Formatter = /*#__PURE__*/function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n\n    logger.checkNew(this instanceof Formatter ? this.constructor : void 0, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n\n  _createClass(Formatter, [{\n    key: \"getDefaultFormats\",\n    value: function getDefaultFormats() {\n      var _this = this;\n\n      var formats = {};\n      var address = this.address.bind(this);\n      var bigNumber = this.bigNumber.bind(this);\n      var blockTag = this.blockTag.bind(this);\n      var data = this.data.bind(this);\n      var hash = this.hash.bind(this);\n      var hex = this.hex.bind(this);\n      var number = this.number.bind(this);\n\n      var strictData = function strictData(v) {\n        return _this.data(v, true);\n      };\n\n      formats.transaction = {\n        hash: hash,\n        blockHash: Formatter.allowNull(hash, null),\n        blockNumber: Formatter.allowNull(number, null),\n        transactionIndex: Formatter.allowNull(number, null),\n        confirmations: Formatter.allowNull(number, null),\n        from: address,\n        gasPrice: bigNumber,\n        gasLimit: bigNumber,\n        to: Formatter.allowNull(address, null),\n        value: bigNumber,\n        nonce: number,\n        data: data,\n        r: Formatter.allowNull(this.uint256),\n        s: Formatter.allowNull(this.uint256),\n        v: Formatter.allowNull(number),\n        creates: Formatter.allowNull(address, null),\n        raw: Formatter.allowNull(data)\n      };\n      formats.transactionRequest = {\n        from: Formatter.allowNull(address),\n        nonce: Formatter.allowNull(number),\n        gasLimit: Formatter.allowNull(bigNumber),\n        gasPrice: Formatter.allowNull(bigNumber),\n        to: Formatter.allowNull(address),\n        value: Formatter.allowNull(bigNumber),\n        data: Formatter.allowNull(strictData)\n      };\n      formats.receiptLog = {\n        transactionIndex: number,\n        blockNumber: number,\n        transactionHash: hash,\n        address: address,\n        topics: Formatter.arrayOf(hash),\n        data: data,\n        logIndex: number,\n        blockHash: hash\n      };\n      formats.receipt = {\n        to: Formatter.allowNull(this.address, null),\n        from: Formatter.allowNull(this.address, null),\n        contractAddress: Formatter.allowNull(address, null),\n        transactionIndex: number,\n        root: Formatter.allowNull(hash),\n        gasUsed: bigNumber,\n        logsBloom: Formatter.allowNull(data),\n        blockHash: hash,\n        transactionHash: hash,\n        logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n        blockNumber: number,\n        confirmations: Formatter.allowNull(number, null),\n        cumulativeGasUsed: bigNumber,\n        status: Formatter.allowNull(number)\n      };\n      formats.block = {\n        hash: hash,\n        parentHash: hash,\n        number: number,\n        timestamp: number,\n        nonce: Formatter.allowNull(hex),\n        difficulty: this.difficulty.bind(this),\n        gasLimit: bigNumber,\n        gasUsed: bigNumber,\n        miner: address,\n        extraData: data,\n        transactions: Formatter.allowNull(Formatter.arrayOf(hash))\n      };\n      formats.blockWithTransactions = shallowCopy(formats.block);\n      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n      formats.filter = {\n        fromBlock: Formatter.allowNull(blockTag, undefined),\n        toBlock: Formatter.allowNull(blockTag, undefined),\n        blockHash: Formatter.allowNull(hash, undefined),\n        address: Formatter.allowNull(address, undefined),\n        topics: Formatter.allowNull(this.topics.bind(this), undefined)\n      };\n      formats.filterLog = {\n        blockNumber: Formatter.allowNull(number),\n        blockHash: Formatter.allowNull(hash),\n        transactionIndex: number,\n        removed: Formatter.allowNull(this.boolean.bind(this)),\n        address: address,\n        data: Formatter.allowFalsish(data, \"0x\"),\n        topics: Formatter.arrayOf(hash),\n        transactionHash: hash,\n        logIndex: number\n      };\n      return formats;\n    } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n\n  }, {\n    key: \"number\",\n    value: function number(_number) {\n      return BigNumber.from(_number).toNumber();\n    } // Strict! Used on input.\n\n  }, {\n    key: \"bigNumber\",\n    value: function bigNumber(value) {\n      return BigNumber.from(value);\n    } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n  }, {\n    key: \"boolean\",\n    value: function boolean(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        value = value.toLowerCase();\n\n        if (value === \"true\") {\n          return true;\n        }\n\n        if (value === \"false\") {\n          return false;\n        }\n      }\n\n      throw new Error(\"invalid boolean - \" + value);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex(value, strict) {\n      if (typeof value === \"string\") {\n        if (!strict && value.substring(0, 2) !== \"0x\") {\n          value = \"0x\" + value;\n        }\n\n        if (isHexString(value)) {\n          return value.toLowerCase();\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n  }, {\n    key: \"data\",\n    value: function data(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (result.length % 2 !== 0) {\n        throw new Error(\"invalid data; odd-length - \" + value);\n      }\n\n      return result;\n    } // Requires an address\n    // Strict! Used on input.\n\n  }, {\n    key: \"address\",\n    value: function address(value) {\n      return getAddress(value);\n    }\n  }, {\n    key: \"callAddress\",\n    value: function callAddress(value) {\n      if (!isHexString(value, 32)) {\n        return null;\n      }\n\n      var address = getAddress(hexDataSlice(value, 12));\n      return address === AddressZero ? null : address;\n    }\n  }, {\n    key: \"contractAddress\",\n    value: function contractAddress(value) {\n      return getContractAddress(value);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"blockTag\",\n    value: function blockTag(_blockTag) {\n      if (_blockTag == null) {\n        return \"latest\";\n      }\n\n      if (_blockTag === \"earliest\") {\n        return \"0x0\";\n      }\n\n      if (_blockTag === \"latest\" || _blockTag === \"pending\") {\n        return _blockTag;\n      }\n\n      if (typeof _blockTag === \"number\" || isHexString(_blockTag)) {\n        return hexValue(_blockTag);\n      }\n\n      throw new Error(\"invalid blockTag\");\n    } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n  }, {\n    key: \"hash\",\n    value: function hash(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n\n      return result;\n    } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(value) {\n      if (value == null) {\n        return null;\n      }\n\n      var v = BigNumber.from(value);\n\n      try {\n        return v.toNumber();\n      } catch (error) {}\n\n      return null;\n    }\n  }, {\n    key: \"uint256\",\n    value: function uint256(value) {\n      if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n      }\n\n      return hexZeroPad(value, 32);\n    }\n  }, {\n    key: \"_block\",\n    value: function _block(value, format) {\n      if (value.author != null && value.miner == null) {\n        value.miner = value.author;\n      }\n\n      return Formatter.check(format, value);\n    }\n  }, {\n    key: \"block\",\n    value: function block(value) {\n      return this._block(value, this.formats.block);\n    }\n  }, {\n    key: \"blockWithTransactions\",\n    value: function blockWithTransactions(value) {\n      return this._block(value, this.formats.blockWithTransactions);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"transactionRequest\",\n    value: function transactionRequest(value) {\n      return Formatter.check(this.formats.transactionRequest, value);\n    }\n  }, {\n    key: \"transactionResponse\",\n    value: function transactionResponse(transaction) {\n      // Rename gas to gasLimit\n      if (transaction.gas != null && transaction.gasLimit == null) {\n        transaction.gasLimit = transaction.gas;\n      } // Some clients (TestRPC) do strange things like return 0x0 for the\n      // 0 address; correct this to be a real address\n\n\n      if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n        transaction.to = \"0x0000000000000000000000000000000000000000\";\n      } // Rename input to data\n\n\n      if (transaction.input != null && transaction.data == null) {\n        transaction.data = transaction.input;\n      } // If to and creates are empty, populate the creates from the transaction\n\n\n      if (transaction.to == null && transaction.creates == null) {\n        transaction.creates = this.contractAddress(transaction);\n      } // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n\n      /*\n      if (!transaction.raw) {\n             // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n           if (transaction.v && transaction.r && transaction.s) {\n               let raw = [\n                   stripZeros(hexlify(transaction.nonce)),\n                   stripZeros(hexlify(transaction.gasPrice)),\n                   stripZeros(hexlify(transaction.gasLimit)),\n                   (transaction.to || \"0x\"),\n                   stripZeros(hexlify(transaction.value || \"0x\")),\n                   hexlify(transaction.data || \"0x\"),\n                   stripZeros(hexlify(transaction.v || \"0x\")),\n                   stripZeros(hexlify(transaction.r)),\n                   stripZeros(hexlify(transaction.s)),\n               ];\n                 transaction.raw = rlpEncode(raw);\n           }\n       }\n       */\n\n\n      var result = Formatter.check(this.formats.transaction, transaction);\n\n      if (transaction.chainId != null) {\n        var chainId = transaction.chainId;\n\n        if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n      } else {\n        var _chainId = transaction.networkId; // geth-etc returns chainId\n\n        if (_chainId == null && result.v == null) {\n          _chainId = transaction.chainId;\n        }\n\n        if (isHexString(_chainId)) {\n          _chainId = BigNumber.from(_chainId).toNumber();\n        }\n\n        if (typeof _chainId !== \"number\" && result.v != null) {\n          _chainId = (result.v - 35) / 2;\n\n          if (_chainId < 0) {\n            _chainId = 0;\n          }\n\n          _chainId = parseInt(_chainId);\n        }\n\n        if (typeof _chainId !== \"number\") {\n          _chainId = 0;\n        }\n\n        result.chainId = _chainId;\n      } // 0x0000... should actually be null\n\n\n      if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n        result.blockHash = null;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(value) {\n      return parseTransaction(value);\n    }\n  }, {\n    key: \"receiptLog\",\n    value: function receiptLog(value) {\n      return Formatter.check(this.formats.receiptLog, value);\n    }\n  }, {\n    key: \"receipt\",\n    value: function receipt(value) {\n      var result = Formatter.check(this.formats.receipt, value);\n\n      if (value.status != null) {\n        result.byzantium = true;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"topics\",\n    value: function topics(value) {\n      var _this2 = this;\n\n      if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return _this2.topics(v);\n        });\n      } else if (value != null) {\n        return this.hash(value, true);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      return Formatter.check(this.formats.filter, value);\n    }\n  }, {\n    key: \"filterLog\",\n    value: function filterLog(value) {\n      return Formatter.check(this.formats.filterLog, value);\n    }\n  }], [{\n    key: \"check\",\n    value: function check(format, object) {\n      var result = {};\n\n      for (var key in format) {\n        try {\n          var value = format[key](object[key]);\n\n          if (value !== undefined) {\n            result[key] = value;\n          }\n        } catch (error) {\n          error.checkKey = key;\n          error.checkValue = object[key];\n          throw error;\n        }\n      }\n\n      return result;\n    } // if value is null-ish, nullValue is returned\n\n  }, {\n    key: \"allowNull\",\n    value: function allowNull(format, nullValue) {\n      return function (value) {\n        if (value == null) {\n          return nullValue;\n        }\n\n        return format(value);\n      };\n    } // If value is false-ish, replaceValue is returned\n\n  }, {\n    key: \"allowFalsish\",\n    value: function allowFalsish(format, replaceValue) {\n      return function (value) {\n        if (!value) {\n          return replaceValue;\n        }\n\n        return format(value);\n      };\n    } // Requires an Array satisfying check\n\n  }, {\n    key: \"arrayOf\",\n    value: function arrayOf(format) {\n      return function (array) {\n        if (!Array.isArray(array)) {\n          throw new Error(\"not an array\");\n        }\n\n        var result = [];\n        array.forEach(function (value) {\n          result.push(format(value));\n        });\n        return result;\n      };\n    }\n  }]);\n\n  return Formatter;\n}(); // Show the throttle message only once\n\nvar throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["../src.ts/formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            gasPrice: bigNumber,\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            root: Formatter.allowNull(hash),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            status: Formatter.allowNull(number)\n        };\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: address,\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        return Formatter.check(format, value);\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n        /*\n        if (!transaction.raw) {\n \n             // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n             if (transaction.v && transaction.r && transaction.s) {\n                 let raw = [\n                     stripZeros(hexlify(transaction.nonce)),\n                     stripZeros(hexlify(transaction.gasPrice)),\n                     stripZeros(hexlify(transaction.gasLimit)),\n                     (transaction.to || \"0x\"),\n                     stripZeros(hexlify(transaction.value || \"0x\")),\n                     hexlify(transaction.data || \"0x\"),\n                     stripZeros(hexlify(transaction.v || \"0x\")),\n                     stripZeros(hexlify(transaction.r)),\n                     stripZeros(hexlify(transaction.s)),\n                 ];\n \n                 transaction.raw = rlpEncode(raw);\n             }\n         }\n         */\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        if (value.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}