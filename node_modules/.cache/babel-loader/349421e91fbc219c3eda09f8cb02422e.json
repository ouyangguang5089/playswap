{"ast":null,"code":"import _defineProperty from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{BLOCKED_PRICE_IMPACT_NON_EXPERT}from'../constants';import{CurrencyAmount,JSBI,Percent,TokenAmount}from'@uniswap/sdk';import{ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_LOW,ALLOWED_PRICE_IMPACT_MEDIUM}from'../constants';import{Field}from'../state/swap/actions';import{basisPointsToPercent}from'./index';var BASE_FEE=new Percent(JSBI.BigInt(30),JSBI.BigInt(10000));var ONE_HUNDRED_PERCENT=new Percent(JSBI.BigInt(10000),JSBI.BigInt(10000));var INPUT_FRACTION_AFTER_FEE=ONE_HUNDRED_PERCENT.subtract(BASE_FEE);// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade){// for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n// e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\nvar realizedLPFee=!trade?undefined:ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(function(currentFee){return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);},ONE_HUNDRED_PERCENT));// remove lp fees from price impact\nvar priceImpactWithoutFeeFraction=trade&&realizedLPFee?trade.priceImpact.subtract(realizedLPFee):undefined;// the x*y=k impact\nvar priceImpactWithoutFeePercent=priceImpactWithoutFeeFraction?new Percent(priceImpactWithoutFeeFraction===null||priceImpactWithoutFeeFraction===void 0?void 0:priceImpactWithoutFeeFraction.numerator,priceImpactWithoutFeeFraction===null||priceImpactWithoutFeeFraction===void 0?void 0:priceImpactWithoutFeeFraction.denominator):undefined;// the amount of the input that accrues to LPs\nvar realizedLPFeeAmount=realizedLPFee&&trade&&(trade.inputAmount instanceof TokenAmount?new TokenAmount(trade.inputAmount.token,realizedLPFee.multiply(trade.inputAmount.raw).quotient):CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient));return{priceImpactWithoutFee:priceImpactWithoutFeePercent,realizedLPFee:realizedLPFeeAmount};}// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(trade,allowedSlippage){var _ref;var pct=basisPointsToPercent(allowedSlippage);return _ref={},_defineProperty(_ref,Field.INPUT,trade===null||trade===void 0?void 0:trade.maximumAmountIn(pct)),_defineProperty(_ref,Field.OUTPUT,trade===null||trade===void 0?void 0:trade.minimumAmountOut(pct)),_ref;}export function warningSeverity(priceImpact){if(!(priceImpact===null||priceImpact===void 0?void 0:priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)))return 4;if(!(priceImpact===null||priceImpact===void 0?void 0:priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH)))return 3;if(!(priceImpact===null||priceImpact===void 0?void 0:priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)))return 2;if(!(priceImpact===null||priceImpact===void 0?void 0:priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW)))return 1;return 0;}export function formatExecutionPrice(trade,inverted){if(!trade){return'';}return inverted?\"\".concat(trade.executionPrice.invert().toSignificant(6),\" \").concat(trade.inputAmount.currency.symbol,\" / \").concat(trade.outputAmount.currency.symbol):\"\".concat(trade.executionPrice.toSignificant(6),\" \").concat(trade.outputAmount.currency.symbol,\" / \").concat(trade.inputAmount.currency.symbol);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/utils/prices.ts"],"names":["BLOCKED_PRICE_IMPACT_NON_EXPERT","CurrencyAmount","JSBI","Percent","TokenAmount","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","Field","basisPointsToPercent","BASE_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeTradePriceBreakdown","trade","realizedLPFee","undefined","route","pairs","reduce","currentFee","multiply","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFeePercent","numerator","denominator","realizedLPFeeAmount","inputAmount","token","raw","quotient","ether","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","pct","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","executionPrice","invert","toSignificant","currency","symbol","outputAmount"],"mappings":"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","sourcesContent":["import { BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants'\nimport { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@uniswap/sdk'\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../constants'\nimport { Field } from '../state/swap/actions'\nimport { basisPointsToPercent } from './index'\n\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(\n  trade?: Trade | null\n): { priceImpactWithoutFee: Percent | undefined; realizedLPFee: CurrencyAmount | undefined | null } {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT\n        )\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    (trade.inputAmount instanceof TokenAmount\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade | undefined,\n  allowedSlippage: number\n): { [field in Field]?: CurrencyAmount } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct)\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n"]},"metadata":{},"sourceType":"module"}