{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar utils_1 = require(\"@walletconnect/utils\");\n\nvar socket_transport_1 = tslib_1.__importDefault(require(\"@walletconnect/socket-transport\"));\n\nvar errors_1 = require(\"./errors\");\n\nvar events_1 = tslib_1.__importDefault(require(\"./events\"));\n\nvar storage_1 = tslib_1.__importDefault(require(\"./storage\"));\n\nvar Connector = /*#__PURE__*/function () {\n  function Connector(opts) {\n    _classCallCheck(this, Connector);\n\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new events_1.default();\n    this._clientMeta = utils_1.getMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new storage_1.default();\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(errors_1.ERROR_MISSING_REQUIRED);\n    }\n\n    if (opts.connectorOpts.bridge) {\n      this.bridge = opts.connectorOpts.bridge;\n    }\n\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n\n    var session = opts.connectorOpts.session || this._getStorageSession();\n\n    if (session) {\n      this.session = session;\n    }\n\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n\n    this._transport = opts.transport || new socket_transport_1.default({\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n\n    this._subscribeToInternalEvents();\n\n    this._initTransport();\n\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n\n  _createClass(Connector, [{\n    key: \"on\",\n    value: function on(event, callback) {\n      var eventEmitter = {\n        event: event,\n        callback: callback\n      };\n\n      this._eventManager.subscribe(eventEmitter);\n    }\n  }, {\n    key: \"createInstantRequest\",\n    value: function createInstantRequest(instantRequest) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var request, endInstantRequest, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._generateKey();\n\n              case 2:\n                this._key = _context.sent;\n                request = this._formatRequest({\n                  method: \"wc_instantRequest\",\n                  params: [{\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    request: this._formatRequest(instantRequest)\n                  }]\n                });\n                this.handshakeId = request.id;\n                this.handshakeTopic = utils_1.uuid();\n\n                this._eventManager.trigger({\n                  event: \"display_uri\",\n                  params: [this.uri]\n                });\n\n                this.on(\"modal_closed\", function () {\n                  throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);\n                });\n\n                endInstantRequest = function endInstantRequest() {\n                  _this.killSession();\n                };\n\n                _context.prev = 9;\n                _context.next = 12;\n                return this._sendCallRequest(request);\n\n              case 12:\n                result = _context.sent;\n\n                if (result) {\n                  endInstantRequest();\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](9);\n                endInstantRequest();\n                throw _context.t0;\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[9, 17]]);\n      }));\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(opts) {\n      var _this2 = this;\n\n      if (!this._qrcodeModal) {\n        throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return tslib_1.__awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (this.connected) {\n                    resolve({\n                      chainId: this.chainId,\n                      accounts: this.accounts\n                    });\n                  }\n\n                  if (this.connected) {\n                    _context2.next = 10;\n                    break;\n                  }\n\n                  _context2.prev = 2;\n                  _context2.next = 5;\n                  return this.createSession(opts);\n\n                case 5:\n                  _context2.next = 10;\n                  break;\n\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t0 = _context2[\"catch\"](2);\n                  reject(_context2.t0);\n\n                case 10:\n                  this.on(\"modal_closed\", function () {\n                    return reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED));\n                  });\n                  this.on(\"connect\", function (error, payload) {\n                    if (error) {\n                      return reject(error);\n                    }\n\n                    resolve(payload.params[0]);\n                  });\n\n                case 12:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this, [[2, 7]]);\n        }));\n      });\n    }\n  }, {\n    key: \"createSession\",\n    value: function createSession(opts) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var request;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._connected) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n\n              case 2:\n                if (!this.pending) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                _context3.next = 6;\n                return this._generateKey();\n\n              case 6:\n                this._key = _context3.sent;\n                request = this._formatRequest({\n                  method: \"wc_sessionRequest\",\n                  params: [{\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    chainId: opts && opts.chainId ? opts.chainId : null\n                  }]\n                });\n                this.handshakeId = request.id;\n                this.handshakeTopic = utils_1.uuid();\n\n                this._sendSessionRequest(request, \"Session update rejected\", {\n                  topic: this.handshakeTopic\n                });\n\n                this._eventManager.trigger({\n                  event: \"display_uri\",\n                  params: [this.uri]\n                });\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"approveSession\",\n    value: function approveSession(sessionStatus) {\n      if (this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n      }\n\n      this.chainId = sessionStatus.chainId;\n      this.accounts = sessionStatus.accounts;\n      this.networkId = sessionStatus.networkId || 0;\n      this.rpcUrl = sessionStatus.rpcUrl || \"\";\n      var sessionParams = {\n        approved: true,\n        chainId: this.chainId,\n        networkId: this.networkId,\n        accounts: this.accounts,\n        rpcUrl: this.rpcUrl,\n        peerId: this.clientId,\n        peerMeta: this.clientMeta\n      };\n      var response = {\n        id: this.handshakeId,\n        jsonrpc: \"2.0\",\n        result: sessionParams\n      };\n\n      this._sendResponse(response);\n\n      this._connected = true;\n\n      this._setStorageSession();\n\n      this._eventManager.trigger({\n        event: \"connect\",\n        params: [{\n          peerId: this.peerId,\n          peerMeta: this.peerMeta,\n          chainId: this.chainId,\n          accounts: this.accounts\n        }]\n      });\n    }\n  }, {\n    key: \"rejectSession\",\n    value: function rejectSession(sessionError) {\n      if (this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n      }\n\n      var message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;\n\n      var response = this._formatResponse({\n        id: this.handshakeId,\n        error: {\n          message: message\n        }\n      });\n\n      this._sendResponse(response);\n\n      this._connected = false;\n\n      this._eventManager.trigger({\n        event: \"disconnect\",\n        params: [{\n          message: message\n        }]\n      });\n\n      this._removeStorageSession();\n    }\n  }, {\n    key: \"updateSession\",\n    value: function updateSession(sessionStatus) {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      this.chainId = sessionStatus.chainId;\n      this.accounts = sessionStatus.accounts;\n      this.networkId = sessionStatus.networkId || 0;\n      this.rpcUrl = sessionStatus.rpcUrl || \"\";\n      var sessionParams = {\n        approved: true,\n        chainId: this.chainId,\n        networkId: this.networkId,\n        accounts: this.accounts,\n        rpcUrl: this.rpcUrl\n      };\n\n      var request = this._formatRequest({\n        method: \"wc_sessionUpdate\",\n        params: [sessionParams]\n      });\n\n      this._sendSessionRequest(request, \"Session update rejected\");\n\n      this._eventManager.trigger({\n        event: \"session_update\",\n        params: [{\n          chainId: this.chainId,\n          accounts: this.accounts\n        }]\n      });\n\n      this._manageStorageSession();\n    }\n  }, {\n    key: \"killSession\",\n    value: function killSession(sessionError) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var message, sessionParams, request;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                message = sessionError ? sessionError.message : \"Session Disconnected\";\n                sessionParams = {\n                  approved: false,\n                  chainId: null,\n                  networkId: null,\n                  accounts: null\n                };\n                request = this._formatRequest({\n                  method: \"wc_sessionUpdate\",\n                  params: [sessionParams]\n                });\n                _context4.next = 5;\n                return this._sendRequest(request);\n\n              case 5:\n                this._handleSessionDisconnect(message);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(tx) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var parsedTx, request, result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._connected) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                parsedTx = utils_1.parseTransactionData(tx);\n                request = this._formatRequest({\n                  method: \"eth_sendTransaction\",\n                  params: [parsedTx]\n                });\n                _context5.next = 6;\n                return this._sendCallRequest(request);\n\n              case 6:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(tx) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var parsedTx, request, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this._connected) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                parsedTx = utils_1.parseTransactionData(tx);\n                request = this._formatRequest({\n                  method: \"eth_signTransaction\",\n                  params: [parsedTx]\n                });\n                _context6.next = 6;\n                return this._sendCallRequest(request);\n\n              case 6:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(params) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._connected) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                request = this._formatRequest({\n                  method: \"eth_sign\",\n                  params: params\n                });\n                _context7.next = 5;\n                return this._sendCallRequest(request);\n\n              case 5:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"signPersonalMessage\",\n    value: function signPersonalMessage(params) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (this._connected) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                params = utils_1.parsePersonalSign(params);\n                request = this._formatRequest({\n                  method: \"personal_sign\",\n                  params: params\n                });\n                _context8.next = 6;\n                return this._sendCallRequest(request);\n\n              case 6:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"signTypedData\",\n    value: function signTypedData(params) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this._connected) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                request = this._formatRequest({\n                  method: \"eth_signTypedData\",\n                  params: params\n                });\n                _context9.next = 5;\n                return this._sendCallRequest(request);\n\n              case 5:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }, {\n    key: \"updateChain\",\n    value: function updateChain(chainParams) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this._connected) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Session currently disconnected\");\n\n              case 2:\n                request = this._formatRequest({\n                  method: \"wallet_updateChain\",\n                  params: [chainParams]\n                });\n                _context10.next = 5;\n                return this._sendCallRequest(request);\n\n              case 5:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"unsafeSend\",\n    value: function unsafeSend(request, options) {\n      var _this3 = this;\n\n      this._sendRequest(request, options);\n\n      return new Promise(function (resolve, reject) {\n        _this3._subscribeToResponse(request.id, function (error, payload) {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          if (!payload) {\n            throw new Error(errors_1.ERROR_MISSING_JSON_RPC);\n          }\n\n          resolve(payload);\n        });\n      });\n    }\n  }, {\n    key: \"sendCustomRequest\",\n    value: function sendCustomRequest(request, options) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var formattedRequest, result;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this._connected) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n\n              case 2:\n                _context11.t0 = request.method;\n                _context11.next = _context11.t0 === \"eth_accounts\" ? 5 : _context11.t0 === \"eth_chainId\" ? 6 : _context11.t0 === \"eth_sendTransaction\" ? 7 : _context11.t0 === \"eth_signTransaction\" ? 7 : _context11.t0 === \"personal_sign\" ? 9 : 11;\n                break;\n\n              case 5:\n                return _context11.abrupt(\"return\", this.accounts);\n\n              case 6:\n                return _context11.abrupt(\"return\", utils_1.convertNumberToHex(this.chainId));\n\n              case 7:\n                if (request.params) {\n                  request.params[0] = utils_1.parseTransactionData(request.params[0]);\n                }\n\n                return _context11.abrupt(\"break\", 12);\n\n              case 9:\n                if (request.params) {\n                  request.params = utils_1.parsePersonalSign(request.params);\n                }\n\n                return _context11.abrupt(\"break\", 12);\n\n              case 11:\n                return _context11.abrupt(\"break\", 12);\n\n              case 12:\n                formattedRequest = this._formatRequest(request);\n                _context11.next = 15;\n                return this._sendCallRequest(formattedRequest, options);\n\n              case 15:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n\n              case 17:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n  }, {\n    key: \"approveRequest\",\n    value: function approveRequest(response) {\n      if (utils_1.isJsonRpcResponseSuccess(response)) {\n        var formattedResponse = this._formatResponse(response);\n\n        this._sendResponse(formattedResponse);\n      } else {\n        throw new Error(errors_1.ERROR_MISSING_RESULT);\n      }\n    }\n  }, {\n    key: \"rejectRequest\",\n    value: function rejectRequest(response) {\n      if (utils_1.isJsonRpcResponseError(response)) {\n        var formattedResponse = this._formatResponse(response);\n\n        this._sendResponse(formattedResponse);\n      } else {\n        throw new Error(errors_1.ERROR_MISSING_ERROR);\n      }\n    }\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(request, options) {\n      var _a, _b;\n\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var callRequest, encryptionPayload, topic, payload, silent;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                callRequest = this._formatRequest(request);\n                _context12.next = 3;\n                return this._encrypt(callRequest);\n\n              case 3:\n                encryptionPayload = _context12.sent;\n                topic = typeof ((_a = options) === null || _a === void 0 ? void 0 : _a.topic) !== \"undefined\" ? options.topic : this.peerId;\n                payload = JSON.stringify(encryptionPayload);\n                silent = typeof ((_b = options) === null || _b === void 0 ? void 0 : _b.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : utils_1.isSilentPayload(callRequest);\n\n                this._transport.send(payload, topic, silent);\n\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"_sendResponse\",\n    value: function _sendResponse(response) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var encryptionPayload, topic, payload, silent;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._encrypt(response);\n\n              case 2:\n                encryptionPayload = _context13.sent;\n                topic = this.peerId;\n                payload = JSON.stringify(encryptionPayload);\n                silent = true;\n\n                this._transport.send(payload, topic, silent);\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_sendSessionRequest\",\n    value: function _sendSessionRequest(request, errorMsg, options) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this._sendRequest(request, options);\n\n                this._subscribeToSessionResponse(request.id, errorMsg);\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n  }, {\n    key: \"_sendCallRequest\",\n    value: function _sendCallRequest(request, options) {\n      this._sendRequest(request, options);\n\n      if (utils_1.isMobile() && utils_1.signingMethods.includes(request.method)) {\n        var mobileLinkUrl = utils_1.getLocal(utils_1.mobileLinkChoiceKey);\n\n        if (mobileLinkUrl) {\n          window.location.href = mobileLinkUrl.href;\n        }\n      }\n\n      return this._subscribeToCallResponse(request.id);\n    }\n  }, {\n    key: \"_formatRequest\",\n    value: function _formatRequest(request) {\n      if (typeof request.method === \"undefined\") {\n        throw new Error(errors_1.ERROR_MISSING_METHOD);\n      }\n\n      var formattedRequest = {\n        id: typeof request.id === \"undefined\" ? utils_1.payloadId() : request.id,\n        jsonrpc: \"2.0\",\n        method: request.method,\n        params: typeof request.params === \"undefined\" ? [] : request.params\n      };\n      return formattedRequest;\n    }\n  }, {\n    key: \"_formatResponse\",\n    value: function _formatResponse(response) {\n      if (typeof response.id === \"undefined\") {\n        throw new Error(errors_1.ERROR_MISSING_ID);\n      }\n\n      var baseResponse = {\n        id: response.id,\n        jsonrpc: \"2.0\"\n      };\n\n      if (utils_1.isJsonRpcResponseError(response)) {\n        var error = utils_1.formatRpcError(response.error);\n        var errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n          error: error\n        });\n        return errorResponse;\n      } else if (utils_1.isJsonRpcResponseSuccess(response)) {\n        var successResponse = Object.assign(Object.assign({}, baseResponse), response);\n        return successResponse;\n      }\n\n      throw new Error(errors_1.ERROR_INVALID_RESPONSE);\n    }\n  }, {\n    key: \"_handleSessionDisconnect\",\n    value: function _handleSessionDisconnect(errorMsg) {\n      var message = errorMsg || \"Session Disconnected\";\n\n      if (!this._connected) {\n        if (this._qrcodeModal) {\n          this._qrcodeModal.close();\n        }\n\n        utils_1.removeLocal(utils_1.mobileLinkChoiceKey);\n      }\n\n      if (this._connected) {\n        this._connected = false;\n      }\n\n      this._eventManager.trigger({\n        event: \"disconnect\",\n        params: [{\n          message: message\n        }]\n      });\n\n      this._removeStorageSession();\n\n      this._transport.close();\n    }\n  }, {\n    key: \"_handleSessionResponse\",\n    value: function _handleSessionResponse(errorMsg, sessionParams) {\n      if (sessionParams) {\n        if (sessionParams.approved) {\n          if (!this._connected) {\n            this._connected = true;\n\n            if (sessionParams.chainId) {\n              this.chainId = sessionParams.chainId;\n            }\n\n            if (sessionParams.accounts) {\n              this.accounts = sessionParams.accounts;\n            }\n\n            if (sessionParams.peerId && !this.peerId) {\n              this.peerId = sessionParams.peerId;\n            }\n\n            if (sessionParams.peerMeta && !this.peerMeta) {\n              this.peerMeta = sessionParams.peerMeta;\n            }\n\n            this._eventManager.trigger({\n              event: \"connect\",\n              params: [{\n                peerId: this.peerId,\n                peerMeta: this.peerMeta,\n                chainId: this.chainId,\n                accounts: this.accounts\n              }]\n            });\n          } else {\n            if (sessionParams.chainId) {\n              this.chainId = sessionParams.chainId;\n            }\n\n            if (sessionParams.accounts) {\n              this.accounts = sessionParams.accounts;\n            }\n\n            this._eventManager.trigger({\n              event: \"session_update\",\n              params: [{\n                chainId: this.chainId,\n                accounts: this.accounts\n              }]\n            });\n          }\n\n          this._manageStorageSession();\n        } else {\n          this._handleSessionDisconnect(errorMsg);\n        }\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    }\n  }, {\n    key: \"_handleIncomingMessages\",\n    value: function _handleIncomingMessages(socketMessage) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var activeTopics, encryptionPayload, payload;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                activeTopics = [this.clientId, this.handshakeTopic];\n\n                if (activeTopics.includes(socketMessage.topic)) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\");\n\n              case 3:\n                _context15.prev = 3;\n                encryptionPayload = JSON.parse(socketMessage.payload);\n                _context15.next = 10;\n                break;\n\n              case 7:\n                _context15.prev = 7;\n                _context15.t0 = _context15[\"catch\"](3);\n                return _context15.abrupt(\"return\");\n\n              case 10:\n                _context15.next = 12;\n                return this._decrypt(encryptionPayload);\n\n              case 12:\n                payload = _context15.sent;\n\n                if (payload) {\n                  this._eventManager.trigger(payload);\n                }\n\n              case 14:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"_subscribeToSessionRequest\",\n    value: function _subscribeToSessionRequest() {\n      this._transport.subscribe(this.handshakeTopic);\n    }\n  }, {\n    key: \"_subscribeToResponse\",\n    value: function _subscribeToResponse(id, callback) {\n      this.on(\"response:\".concat(id), callback);\n    }\n  }, {\n    key: \"_subscribeToSessionResponse\",\n    value: function _subscribeToSessionResponse(id, errorMsg) {\n      var _this4 = this;\n\n      this._subscribeToResponse(id, function (error, payload) {\n        if (error) {\n          _this4._handleSessionResponse(error.message);\n\n          return;\n        }\n\n        if (payload.result) {\n          _this4._handleSessionResponse(errorMsg, payload.result);\n        } else if (payload.error && payload.error.message) {\n          _this4._handleSessionResponse(payload.error.message);\n        } else {\n          _this4._handleSessionResponse(errorMsg);\n        }\n      });\n    }\n  }, {\n    key: \"_subscribeToCallResponse\",\n    value: function _subscribeToCallResponse(id) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this5._subscribeToResponse(id, function (error, payload) {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          if (payload.result) {\n            resolve(payload.result);\n          } else if (payload.error && payload.error.message) {\n            reject(new Error(payload.error.message));\n          } else {\n            reject(new Error(errors_1.ERROR_INVALID_RESPONSE));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_subscribeToInternalEvents\",\n    value: function _subscribeToInternalEvents() {\n      var _this6 = this;\n\n      this.on(\"display_uri\", function () {\n        if (_this6._qrcodeModal) {\n          _this6._qrcodeModal.open(_this6.uri, function () {\n            _this6._eventManager.trigger({\n              event: \"modal_closed\",\n              params: []\n            });\n          }, _this6._qrcodeModalOptions);\n        }\n      });\n      this.on(\"connect\", function () {\n        if (_this6._qrcodeModal) {\n          _this6._qrcodeModal.close();\n        }\n      });\n      this.on(\"wc_sessionRequest\", function (error, payload) {\n        if (error) {\n          _this6._eventManager.trigger({\n            event: \"error\",\n            params: [{\n              code: \"SESSION_REQUEST_ERROR\",\n              message: error.toString()\n            }]\n          });\n        }\n\n        _this6.handshakeId = payload.id;\n        _this6.peerId = payload.params[0].peerId;\n        _this6.peerMeta = payload.params[0].peerMeta;\n        var internalPayload = Object.assign(Object.assign({}, payload), {\n          method: \"session_request\"\n        });\n\n        _this6._eventManager.trigger(internalPayload);\n      });\n      this.on(\"wc_sessionUpdate\", function (error, payload) {\n        if (error) {\n          _this6._handleSessionResponse(error.message);\n        }\n\n        _this6._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n      });\n    }\n  }, {\n    key: \"_initTransport\",\n    value: function _initTransport() {\n      var _this7 = this;\n\n      this._transport.on(\"message\", function (socketMessage) {\n        return _this7._handleIncomingMessages(socketMessage);\n      });\n\n      this._transport.on(\"open\", function () {\n        return _this7._eventManager.trigger({\n          event: \"transport_open\",\n          params: []\n        });\n      });\n\n      this._transport.on(\"close\", function () {\n        return _this7._eventManager.trigger({\n          event: \"transport_close\",\n          params: []\n        });\n      });\n\n      this._transport.open();\n    }\n  }, {\n    key: \"_formatUri\",\n    value: function _formatUri() {\n      var protocol = this.protocol;\n      var handshakeTopic = this.handshakeTopic;\n      var version = this.version;\n      var bridge = encodeURIComponent(this.bridge);\n      var key = this.key;\n      var uri = \"\".concat(protocol, \":\").concat(handshakeTopic, \"@\").concat(version, \"?bridge=\").concat(bridge, \"&key=\").concat(key);\n      return uri;\n    }\n  }, {\n    key: \"_parseUri\",\n    value: function _parseUri(uri) {\n      var result = utils_1.parseWalletConnectUri(uri);\n\n      if (result.protocol === this.protocol) {\n        if (!result.handshakeTopic) {\n          throw Error(\"Invalid or missing handshakeTopic parameter value\");\n        }\n\n        var handshakeTopic = result.handshakeTopic;\n\n        if (!result.bridge) {\n          throw Error(\"Invalid or missing bridge url parameter value\");\n        }\n\n        var bridge = decodeURIComponent(result.bridge);\n\n        if (!result.key) {\n          throw Error(\"Invalid or missing kkey parameter value\");\n        }\n\n        var key = result.key;\n        return {\n          handshakeTopic: handshakeTopic,\n          bridge: bridge,\n          key: key\n        };\n      } else {\n        throw new Error(errors_1.ERROR_INVALID_URI);\n      }\n    }\n  }, {\n    key: \"_generateKey\",\n    value: function _generateKey() {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!this._cryptoLib) {\n                  _context16.next = 5;\n                  break;\n                }\n\n                _context16.next = 3;\n                return this._cryptoLib.generateKey();\n\n              case 3:\n                result = _context16.sent;\n                return _context16.abrupt(\"return\", result);\n\n              case 5:\n                return _context16.abrupt(\"return\", null);\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"_encrypt\",\n    value: function _encrypt(data) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var key, result;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                key = this._key;\n\n                if (!(this._cryptoLib && key)) {\n                  _context17.next = 6;\n                  break;\n                }\n\n                _context17.next = 4;\n                return this._cryptoLib.encrypt(data, key);\n\n              case 4:\n                result = _context17.sent;\n                return _context17.abrupt(\"return\", result);\n\n              case 6:\n                return _context17.abrupt(\"return\", null);\n\n              case 7:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"_decrypt\",\n    value: function _decrypt(payload) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var key, result;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                key = this._key;\n\n                if (!(this._cryptoLib && key)) {\n                  _context18.next = 6;\n                  break;\n                }\n\n                _context18.next = 4;\n                return this._cryptoLib.decrypt(payload, key);\n\n              case 4:\n                result = _context18.sent;\n                return _context18.abrupt(\"return\", result);\n\n              case 6:\n                return _context18.abrupt(\"return\", null);\n\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n    }\n  }, {\n    key: \"_getStorageSession\",\n    value: function _getStorageSession() {\n      var result = null;\n\n      if (this._sessionStorage) {\n        result = this._sessionStorage.getSession();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_setStorageSession\",\n    value: function _setStorageSession() {\n      if (this._sessionStorage) {\n        this._sessionStorage.setSession(this.session);\n      }\n    }\n  }, {\n    key: \"_removeStorageSession\",\n    value: function _removeStorageSession() {\n      if (this._sessionStorage) {\n        this._sessionStorage.removeSession();\n      }\n    }\n  }, {\n    key: \"_manageStorageSession\",\n    value: function _manageStorageSession() {\n      if (this._connected) {\n        this._setStorageSession();\n      } else {\n        this._removeStorageSession();\n      }\n    }\n  }, {\n    key: \"_registerPushServer\",\n    value: function _registerPushServer(pushServerOpts) {\n      var _this8 = this;\n\n      if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n      }\n\n      if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n      }\n\n      if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n      }\n\n      var pushSubscription = {\n        bridge: this.bridge,\n        topic: this.clientId,\n        type: pushServerOpts.type,\n        token: pushServerOpts.token,\n        peerName: \"\",\n        language: pushServerOpts.language || \"\"\n      };\n      this.on(\"connect\", function (error, payload) {\n        return tslib_1.__awaiter(_this8, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n          var peerName, response, json;\n          return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n            while (1) {\n              switch (_context19.prev = _context19.next) {\n                case 0:\n                  if (!error) {\n                    _context19.next = 2;\n                    break;\n                  }\n\n                  throw error;\n\n                case 2:\n                  if (pushServerOpts.peerMeta) {\n                    peerName = payload.params[0].peerMeta.name;\n                    pushSubscription.peerName = peerName;\n                  }\n\n                  _context19.prev = 3;\n                  _context19.next = 6;\n                  return fetch(\"\".concat(pushServerOpts.url, \"/new\"), {\n                    method: \"POST\",\n                    headers: {\n                      Accept: \"application/json\",\n                      \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(pushSubscription)\n                  });\n\n                case 6:\n                  response = _context19.sent;\n                  _context19.next = 9;\n                  return response.json();\n\n                case 9:\n                  json = _context19.sent;\n\n                  if (json.success) {\n                    _context19.next = 12;\n                    break;\n                  }\n\n                  throw Error(\"Failed to register in Push Server\");\n\n                case 12:\n                  _context19.next = 17;\n                  break;\n\n                case 14:\n                  _context19.prev = 14;\n                  _context19.t0 = _context19[\"catch\"](3);\n                  throw Error(\"Failed to register in Push Server\");\n\n                case 17:\n                case \"end\":\n                  return _context19.stop();\n              }\n            }\n          }, _callee19, null, [[3, 14]]);\n        }));\n      });\n    }\n  }, {\n    key: \"bridge\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._bridge = value;\n    },\n    get: function get() {\n      return this._bridge;\n    }\n  }, {\n    key: \"key\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      var key = utils_1.convertHexToArrayBuffer(value);\n      this._key = key;\n    },\n    get: function get() {\n      if (this._key) {\n        var key = utils_1.convertArrayBufferToHex(this._key, true);\n        return key;\n      }\n\n      return \"\";\n    }\n  }, {\n    key: \"clientId\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._clientId = value;\n    },\n    get: function get() {\n      var clientId = this._clientId;\n\n      if (!clientId) {\n        clientId = this._clientId = utils_1.uuid();\n      }\n\n      return this._clientId;\n    }\n  }, {\n    key: \"peerId\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._peerId = value;\n    },\n    get: function get() {\n      return this._peerId;\n    }\n  }, {\n    key: \"clientMeta\",\n    set: function set(value) {},\n    get: function get() {\n      var clientMeta = this._clientMeta;\n\n      if (!clientMeta) {\n        clientMeta = this._clientMeta = utils_1.getMeta();\n      }\n\n      return clientMeta;\n    }\n  }, {\n    key: \"peerMeta\",\n    set: function set(value) {\n      this._peerMeta = value;\n    },\n    get: function get() {\n      var peerMeta = this._peerMeta;\n      return peerMeta;\n    }\n  }, {\n    key: \"handshakeTopic\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._handshakeTopic = value;\n    },\n    get: function get() {\n      return this._handshakeTopic;\n    }\n  }, {\n    key: \"handshakeId\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._handshakeId = value;\n    },\n    get: function get() {\n      return this._handshakeId;\n    }\n  }, {\n    key: \"uri\",\n    get: function get() {\n      var _uri = this._formatUri();\n\n      return _uri;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      var _this$_parseUri = this._parseUri(value),\n          handshakeTopic = _this$_parseUri.handshakeTopic,\n          bridge = _this$_parseUri.bridge,\n          key = _this$_parseUri.key;\n\n      this.handshakeTopic = handshakeTopic;\n      this.bridge = bridge;\n      this.key = key;\n    }\n  }, {\n    key: \"chainId\",\n    set: function set(value) {\n      this._chainId = value;\n    },\n    get: function get() {\n      var chainId = this._chainId;\n      return chainId;\n    }\n  }, {\n    key: \"networkId\",\n    set: function set(value) {\n      this._networkId = value;\n    },\n    get: function get() {\n      var networkId = this._networkId;\n      return networkId;\n    }\n  }, {\n    key: \"accounts\",\n    set: function set(value) {\n      this._accounts = value;\n    },\n    get: function get() {\n      var accounts = this._accounts;\n      return accounts;\n    }\n  }, {\n    key: \"rpcUrl\",\n    set: function set(value) {\n      this._rpcUrl = value;\n    },\n    get: function get() {\n      var rpcUrl = this._rpcUrl;\n      return rpcUrl;\n    }\n  }, {\n    key: \"connected\",\n    set: function set(value) {},\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"pending\",\n    set: function set(value) {},\n    get: function get() {\n      return !!this._handshakeTopic;\n    }\n  }, {\n    key: \"session\",\n    get: function get() {\n      return {\n        connected: this.connected,\n        accounts: this.accounts,\n        chainId: this.chainId,\n        bridge: this.bridge,\n        key: this.key,\n        clientId: this.clientId,\n        clientMeta: this.clientMeta,\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        handshakeId: this.handshakeId,\n        handshakeTopic: this.handshakeTopic\n      };\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      this._connected = value.connected;\n      this.accounts = value.accounts;\n      this.chainId = value.chainId;\n      this.bridge = value.bridge;\n      this.key = value.key;\n      this.clientId = value.clientId;\n      this.clientMeta = value.clientMeta;\n      this.peerId = value.peerId;\n      this.peerMeta = value.peerMeta;\n      this.handshakeId = value.handshakeId;\n      this.handshakeTopic = value.handshakeTopic;\n    }\n  }]);\n\n  return Connector;\n}();\n\nexports.default = Connector;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst utils_1 = require(\"@walletconnect/utils\");\nconst socket_transport_1 = tslib_1.__importDefault(require(\"@walletconnect/socket-transport\"));\nconst errors_1 = require(\"./errors\");\nconst events_1 = tslib_1.__importDefault(require(\"./events\"));\nconst storage_1 = tslib_1.__importDefault(require(\"./storage\"));\nclass Connector {\n    constructor(opts) {\n        this.protocol = \"wc\";\n        this.version = 1;\n        this._bridge = \"\";\n        this._key = null;\n        this._clientId = \"\";\n        this._clientMeta = null;\n        this._peerId = \"\";\n        this._peerMeta = null;\n        this._handshakeId = 0;\n        this._handshakeTopic = \"\";\n        this._connected = false;\n        this._accounts = [];\n        this._chainId = 0;\n        this._networkId = 0;\n        this._rpcUrl = \"\";\n        this._eventManager = new events_1.default();\n        this._clientMeta = utils_1.getMeta() || opts.connectorOpts.clientMeta || null;\n        this._cryptoLib = opts.cryptoLib;\n        this._sessionStorage = opts.sessionStorage || new storage_1.default();\n        this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n            throw new Error(errors_1.ERROR_MISSING_REQUIRED);\n        }\n        if (opts.connectorOpts.bridge) {\n            this.bridge = opts.connectorOpts.bridge;\n        }\n        if (opts.connectorOpts.uri) {\n            this.uri = opts.connectorOpts.uri;\n        }\n        const session = opts.connectorOpts.session || this._getStorageSession();\n        if (session) {\n            this.session = session;\n        }\n        if (this.handshakeId) {\n            this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n        }\n        this._transport =\n            opts.transport ||\n                new socket_transport_1.default({\n                    url: this.bridge,\n                    subscriptions: [this.clientId],\n                });\n        this._subscribeToInternalEvents();\n        this._initTransport();\n        if (opts.connectorOpts.uri) {\n            this._subscribeToSessionRequest();\n        }\n        if (opts.pushServerOpts) {\n            this._registerPushServer(opts.pushServerOpts);\n        }\n    }\n    set bridge(value) {\n        if (!value) {\n            return;\n        }\n        this._bridge = value;\n    }\n    get bridge() {\n        return this._bridge;\n    }\n    set key(value) {\n        if (!value) {\n            return;\n        }\n        const key = utils_1.convertHexToArrayBuffer(value);\n        this._key = key;\n    }\n    get key() {\n        if (this._key) {\n            const key = utils_1.convertArrayBufferToHex(this._key, true);\n            return key;\n        }\n        return \"\";\n    }\n    set clientId(value) {\n        if (!value) {\n            return;\n        }\n        this._clientId = value;\n    }\n    get clientId() {\n        let clientId = this._clientId;\n        if (!clientId) {\n            clientId = this._clientId = utils_1.uuid();\n        }\n        return this._clientId;\n    }\n    set peerId(value) {\n        if (!value) {\n            return;\n        }\n        this._peerId = value;\n    }\n    get peerId() {\n        return this._peerId;\n    }\n    set clientMeta(value) {\n    }\n    get clientMeta() {\n        let clientMeta = this._clientMeta;\n        if (!clientMeta) {\n            clientMeta = this._clientMeta = utils_1.getMeta();\n        }\n        return clientMeta;\n    }\n    set peerMeta(value) {\n        this._peerMeta = value;\n    }\n    get peerMeta() {\n        const peerMeta = this._peerMeta;\n        return peerMeta;\n    }\n    set handshakeTopic(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeTopic = value;\n    }\n    get handshakeTopic() {\n        return this._handshakeTopic;\n    }\n    set handshakeId(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeId = value;\n    }\n    get handshakeId() {\n        return this._handshakeId;\n    }\n    get uri() {\n        const _uri = this._formatUri();\n        return _uri;\n    }\n    set uri(value) {\n        if (!value) {\n            return;\n        }\n        const { handshakeTopic, bridge, key } = this._parseUri(value);\n        this.handshakeTopic = handshakeTopic;\n        this.bridge = bridge;\n        this.key = key;\n    }\n    set chainId(value) {\n        this._chainId = value;\n    }\n    get chainId() {\n        const chainId = this._chainId;\n        return chainId;\n    }\n    set networkId(value) {\n        this._networkId = value;\n    }\n    get networkId() {\n        const networkId = this._networkId;\n        return networkId;\n    }\n    set accounts(value) {\n        this._accounts = value;\n    }\n    get accounts() {\n        const accounts = this._accounts;\n        return accounts;\n    }\n    set rpcUrl(value) {\n        this._rpcUrl = value;\n    }\n    get rpcUrl() {\n        const rpcUrl = this._rpcUrl;\n        return rpcUrl;\n    }\n    set connected(value) {\n    }\n    get connected() {\n        return this._connected;\n    }\n    set pending(value) {\n    }\n    get pending() {\n        return !!this._handshakeTopic;\n    }\n    get session() {\n        return {\n            connected: this.connected,\n            accounts: this.accounts,\n            chainId: this.chainId,\n            bridge: this.bridge,\n            key: this.key,\n            clientId: this.clientId,\n            clientMeta: this.clientMeta,\n            peerId: this.peerId,\n            peerMeta: this.peerMeta,\n            handshakeId: this.handshakeId,\n            handshakeTopic: this.handshakeTopic,\n        };\n    }\n    set session(value) {\n        if (!value) {\n            return;\n        }\n        this._connected = value.connected;\n        this.accounts = value.accounts;\n        this.chainId = value.chainId;\n        this.bridge = value.bridge;\n        this.key = value.key;\n        this.clientId = value.clientId;\n        this.clientMeta = value.clientMeta;\n        this.peerId = value.peerId;\n        this.peerMeta = value.peerMeta;\n        this.handshakeId = value.handshakeId;\n        this.handshakeTopic = value.handshakeTopic;\n    }\n    on(event, callback) {\n        const eventEmitter = {\n            event,\n            callback,\n        };\n        this._eventManager.subscribe(eventEmitter);\n    }\n    createInstantRequest(instantRequest) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_instantRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        request: this._formatRequest(instantRequest),\n                    },\n                ],\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = utils_1.uuid();\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [this.uri],\n            });\n            this.on(\"modal_closed\", () => {\n                throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);\n            });\n            const endInstantRequest = () => {\n                this.killSession();\n            };\n            try {\n                const result = yield this._sendCallRequest(request);\n                if (result) {\n                    endInstantRequest();\n                }\n                return result;\n            }\n            catch (error) {\n                endInstantRequest();\n                throw error;\n            }\n        });\n    }\n    connect(opts) {\n        if (!this._qrcodeModal) {\n            throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);\n        }\n        return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                resolve({\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                });\n            }\n            if (!this.connected) {\n                try {\n                    yield this.createSession(opts);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            }\n            this.on(\"modal_closed\", () => reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED)));\n            this.on(\"connect\", (error, payload) => {\n                if (error) {\n                    return reject(error);\n                }\n                resolve(payload.params[0]);\n            });\n        }));\n    }\n    createSession(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n            }\n            if (this.pending) {\n                return;\n            }\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_sessionRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        chainId: opts && opts.chainId ? opts.chainId : null,\n                    },\n                ],\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = utils_1.uuid();\n            this._sendSessionRequest(request, \"Session update rejected\", {\n                topic: this.handshakeTopic,\n            });\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [this.uri],\n            });\n        });\n    }\n    approveSession(sessionStatus) {\n        if (this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n            peerId: this.clientId,\n            peerMeta: this.clientMeta,\n        };\n        const response = {\n            id: this.handshakeId,\n            jsonrpc: \"2.0\",\n            result: sessionParams,\n        };\n        this._sendResponse(response);\n        this._connected = true;\n        this._setStorageSession();\n        this._eventManager.trigger({\n            event: \"connect\",\n            params: [\n                {\n                    peerId: this.peerId,\n                    peerMeta: this.peerMeta,\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n    }\n    rejectSession(sessionError) {\n        if (this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n        }\n        const message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;\n        const response = this._formatResponse({\n            id: this.handshakeId,\n            error: { message },\n        });\n        this._sendResponse(response);\n        this._connected = false;\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n    }\n    updateSession(sessionStatus) {\n        if (!this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n        };\n        const request = this._formatRequest({\n            method: \"wc_sessionUpdate\",\n            params: [sessionParams],\n        });\n        this._sendSessionRequest(request, \"Session update rejected\");\n        this._eventManager.trigger({\n            event: \"session_update\",\n            params: [\n                {\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n        this._manageStorageSession();\n    }\n    killSession(sessionError) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const message = sessionError ? sessionError.message : \"Session Disconnected\";\n            const sessionParams = {\n                approved: false,\n                chainId: null,\n                networkId: null,\n                accounts: null,\n            };\n            const request = this._formatRequest({\n                method: \"wc_sessionUpdate\",\n                params: [sessionParams],\n            });\n            yield this._sendRequest(request);\n            this._handleSessionDisconnect(message);\n        });\n    }\n    sendTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = utils_1.parseTransactionData(tx);\n            const request = this._formatRequest({\n                method: \"eth_sendTransaction\",\n                params: [parsedTx],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = utils_1.parseTransactionData(tx);\n            const request = this._formatRequest({\n                method: \"eth_signTransaction\",\n                params: [parsedTx],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_sign\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signPersonalMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            params = utils_1.parsePersonalSign(params);\n            const request = this._formatRequest({\n                method: \"personal_sign\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTypedData(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_signTypedData\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    updateChain(chainParams) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(\"Session currently disconnected\");\n            }\n            const request = this._formatRequest({\n                method: \"wallet_updateChain\",\n                params: [chainParams],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    unsafeSend(request, options) {\n        this._sendRequest(request, options);\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(request.id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (!payload) {\n                    throw new Error(errors_1.ERROR_MISSING_JSON_RPC);\n                }\n                resolve(payload);\n            });\n        });\n    }\n    sendCustomRequest(request, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            switch (request.method) {\n                case \"eth_accounts\":\n                    return this.accounts;\n                case \"eth_chainId\":\n                    return utils_1.convertNumberToHex(this.chainId);\n                case \"eth_sendTransaction\":\n                case \"eth_signTransaction\":\n                    if (request.params) {\n                        request.params[0] = utils_1.parseTransactionData(request.params[0]);\n                    }\n                    break;\n                case \"personal_sign\":\n                    if (request.params) {\n                        request.params = utils_1.parsePersonalSign(request.params);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            const formattedRequest = this._formatRequest(request);\n            const result = yield this._sendCallRequest(formattedRequest, options);\n            return result;\n        });\n    }\n    approveRequest(response) {\n        if (utils_1.isJsonRpcResponseSuccess(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(errors_1.ERROR_MISSING_RESULT);\n        }\n    }\n    rejectRequest(response) {\n        if (utils_1.isJsonRpcResponseError(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(errors_1.ERROR_MISSING_ERROR);\n        }\n    }\n    _sendRequest(request, options) {\n        var _a, _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const callRequest = this._formatRequest(request);\n            const encryptionPayload = yield this._encrypt(callRequest);\n            const topic = typeof ((_a = options) === null || _a === void 0 ? void 0 : _a.topic) !== \"undefined\" ? options.topic : this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = typeof ((_b = options) === null || _b === void 0 ? void 0 : _b.forcePushNotification) !== \"undefined\"\n                ? !options.forcePushNotification\n                : utils_1.isSilentPayload(callRequest);\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendResponse(response) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const encryptionPayload = yield this._encrypt(response);\n            const topic = this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = true;\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendSessionRequest(request, errorMsg, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this._sendRequest(request, options);\n            this._subscribeToSessionResponse(request.id, errorMsg);\n        });\n    }\n    _sendCallRequest(request, options) {\n        this._sendRequest(request, options);\n        if (utils_1.isMobile() && utils_1.signingMethods.includes(request.method)) {\n            const mobileLinkUrl = utils_1.getLocal(utils_1.mobileLinkChoiceKey);\n            if (mobileLinkUrl) {\n                window.location.href = mobileLinkUrl.href;\n            }\n        }\n        return this._subscribeToCallResponse(request.id);\n    }\n    _formatRequest(request) {\n        if (typeof request.method === \"undefined\") {\n            throw new Error(errors_1.ERROR_MISSING_METHOD);\n        }\n        const formattedRequest = {\n            id: typeof request.id === \"undefined\" ? utils_1.payloadId() : request.id,\n            jsonrpc: \"2.0\",\n            method: request.method,\n            params: typeof request.params === \"undefined\" ? [] : request.params,\n        };\n        return formattedRequest;\n    }\n    _formatResponse(response) {\n        if (typeof response.id === \"undefined\") {\n            throw new Error(errors_1.ERROR_MISSING_ID);\n        }\n        const baseResponse = { id: response.id, jsonrpc: \"2.0\" };\n        if (utils_1.isJsonRpcResponseError(response)) {\n            const error = utils_1.formatRpcError(response.error);\n            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });\n            return errorResponse;\n        }\n        else if (utils_1.isJsonRpcResponseSuccess(response)) {\n            const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n            return successResponse;\n        }\n        throw new Error(errors_1.ERROR_INVALID_RESPONSE);\n    }\n    _handleSessionDisconnect(errorMsg) {\n        const message = errorMsg || \"Session Disconnected\";\n        if (!this._connected) {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n            utils_1.removeLocal(utils_1.mobileLinkChoiceKey);\n        }\n        if (this._connected) {\n            this._connected = false;\n        }\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n        this._transport.close();\n    }\n    _handleSessionResponse(errorMsg, sessionParams) {\n        if (sessionParams) {\n            if (sessionParams.approved) {\n                if (!this._connected) {\n                    this._connected = true;\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    if (sessionParams.peerId && !this.peerId) {\n                        this.peerId = sessionParams.peerId;\n                    }\n                    if (sessionParams.peerMeta && !this.peerMeta) {\n                        this.peerMeta = sessionParams.peerMeta;\n                    }\n                    this._eventManager.trigger({\n                        event: \"connect\",\n                        params: [\n                            {\n                                peerId: this.peerId,\n                                peerMeta: this.peerMeta,\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                else {\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    this._eventManager.trigger({\n                        event: \"session_update\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                this._manageStorageSession();\n            }\n            else {\n                this._handleSessionDisconnect(errorMsg);\n            }\n        }\n        else {\n            this._handleSessionDisconnect(errorMsg);\n        }\n    }\n    _handleIncomingMessages(socketMessage) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const activeTopics = [this.clientId, this.handshakeTopic];\n            if (!activeTopics.includes(socketMessage.topic)) {\n                return;\n            }\n            let encryptionPayload;\n            try {\n                encryptionPayload = JSON.parse(socketMessage.payload);\n            }\n            catch (error) {\n                return;\n            }\n            const payload = yield this._decrypt(encryptionPayload);\n            if (payload) {\n                this._eventManager.trigger(payload);\n            }\n        });\n    }\n    _subscribeToSessionRequest() {\n        this._transport.subscribe(this.handshakeTopic);\n    }\n    _subscribeToResponse(id, callback) {\n        this.on(`response:${id}`, callback);\n    }\n    _subscribeToSessionResponse(id, errorMsg) {\n        this._subscribeToResponse(id, (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n                return;\n            }\n            if (payload.result) {\n                this._handleSessionResponse(errorMsg, payload.result);\n            }\n            else if (payload.error && payload.error.message) {\n                this._handleSessionResponse(payload.error.message);\n            }\n            else {\n                this._handleSessionResponse(errorMsg);\n            }\n        });\n    }\n    _subscribeToCallResponse(id) {\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (payload.result) {\n                    resolve(payload.result);\n                }\n                else if (payload.error && payload.error.message) {\n                    reject(new Error(payload.error.message));\n                }\n                else {\n                    reject(new Error(errors_1.ERROR_INVALID_RESPONSE));\n                }\n            });\n        });\n    }\n    _subscribeToInternalEvents() {\n        this.on(\"display_uri\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.open(this.uri, () => {\n                    this._eventManager.trigger({\n                        event: \"modal_closed\",\n                        params: [],\n                    });\n                }, this._qrcodeModalOptions);\n            }\n        });\n        this.on(\"connect\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n        });\n        this.on(\"wc_sessionRequest\", (error, payload) => {\n            if (error) {\n                this._eventManager.trigger({\n                    event: \"error\",\n                    params: [\n                        {\n                            code: \"SESSION_REQUEST_ERROR\",\n                            message: error.toString(),\n                        },\n                    ],\n                });\n            }\n            this.handshakeId = payload.id;\n            this.peerId = payload.params[0].peerId;\n            this.peerMeta = payload.params[0].peerMeta;\n            const internalPayload = Object.assign(Object.assign({}, payload), { method: \"session_request\" });\n            this._eventManager.trigger(internalPayload);\n        });\n        this.on(\"wc_sessionUpdate\", (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n            }\n            this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n        });\n    }\n    _initTransport() {\n        this._transport.on(\"message\", (socketMessage) => this._handleIncomingMessages(socketMessage));\n        this._transport.on(\"open\", () => this._eventManager.trigger({ event: \"transport_open\", params: [] }));\n        this._transport.on(\"close\", () => this._eventManager.trigger({ event: \"transport_close\", params: [] }));\n        this._transport.open();\n    }\n    _formatUri() {\n        const protocol = this.protocol;\n        const handshakeTopic = this.handshakeTopic;\n        const version = this.version;\n        const bridge = encodeURIComponent(this.bridge);\n        const key = this.key;\n        const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n        return uri;\n    }\n    _parseUri(uri) {\n        const result = utils_1.parseWalletConnectUri(uri);\n        if (result.protocol === this.protocol) {\n            if (!result.handshakeTopic) {\n                throw Error(\"Invalid or missing handshakeTopic parameter value\");\n            }\n            const handshakeTopic = result.handshakeTopic;\n            if (!result.bridge) {\n                throw Error(\"Invalid or missing bridge url parameter value\");\n            }\n            const bridge = decodeURIComponent(result.bridge);\n            if (!result.key) {\n                throw Error(\"Invalid or missing kkey parameter value\");\n            }\n            const key = result.key;\n            return { handshakeTopic, bridge, key };\n        }\n        else {\n            throw new Error(errors_1.ERROR_INVALID_URI);\n        }\n    }\n    _generateKey() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this._cryptoLib) {\n                const result = yield this._cryptoLib.generateKey();\n                return result;\n            }\n            return null;\n        });\n    }\n    _encrypt(data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.encrypt(data, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _decrypt(payload) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.decrypt(payload, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _getStorageSession() {\n        let result = null;\n        if (this._sessionStorage) {\n            result = this._sessionStorage.getSession();\n        }\n        return result;\n    }\n    _setStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.setSession(this.session);\n        }\n    }\n    _removeStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.removeSession();\n        }\n    }\n    _manageStorageSession() {\n        if (this._connected) {\n            this._setStorageSession();\n        }\n        else {\n            this._removeStorageSession();\n        }\n    }\n    _registerPushServer(pushServerOpts) {\n        if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n        }\n        if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n        }\n        if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n        }\n        const pushSubscription = {\n            bridge: this.bridge,\n            topic: this.clientId,\n            type: pushServerOpts.type,\n            token: pushServerOpts.token,\n            peerName: \"\",\n            language: pushServerOpts.language || \"\",\n        };\n        this.on(\"connect\", (error, payload) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (error) {\n                throw error;\n            }\n            if (pushServerOpts.peerMeta) {\n                const peerName = payload.params[0].peerMeta.name;\n                pushSubscription.peerName = peerName;\n            }\n            try {\n                const response = yield fetch(`${pushServerOpts.url}/new`, {\n                    method: \"POST\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(pushSubscription),\n                });\n                const json = yield response.json();\n                if (!json.success) {\n                    throw Error(\"Failed to register in Push Server\");\n                }\n            }\n            catch (error) {\n                throw Error(\"Failed to register in Push Server\");\n            }\n        }));\n    }\n}\nexports.default = Connector;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}