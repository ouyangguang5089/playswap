{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = require(\"../color\");\n\nvar util_1 = require(\"../util\");\n\nvar defaults = require(\"lodash/defaults\");\n\nvar DefaultOpts = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n};\n\nfunction _findMaxPopulation(swatches) {\n  var p = 0;\n  swatches.forEach(function (s) {\n    p = Math.max(p, s.getPopulation());\n  });\n  return p;\n}\n\nfunction _isAlreadySelected(palette, s) {\n  return palette.Vibrant === s || palette.DarkVibrant === s || palette.LightVibrant === s || palette.Muted === s || palette.DarkMuted === s || palette.LightMuted === s;\n}\n\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n  function weightedMean() {\n    var values = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      values[_i] = arguments[_i];\n    }\n\n    var sum = 0;\n    var weightSum = 0;\n\n    for (var i = 0; i < values.length; i += 2) {\n      var value = values[i];\n      var weight = values[i + 1];\n      sum += value * weight;\n      weightSum += weight;\n    }\n\n    return sum / weightSum;\n  }\n\n  function invertDiff(value, targetValue) {\n    return 1 - Math.abs(value - targetValue);\n  }\n\n  return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\n\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n  var max = null;\n  var maxValue = 0;\n  swatches.forEach(function (swatch) {\n    var _a = swatch.getHsl(),\n        s = _a[1],\n        l = _a[2];\n\n    if (s >= minSaturation && s <= maxSaturation && l >= minLuma && l <= maxLuma && !_isAlreadySelected(palette, swatch)) {\n      var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts);\n\n      if (max === null || value > maxValue) {\n        max = swatch;\n        maxValue = value;\n      }\n    }\n  });\n  return max;\n}\n\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n  var palette = {}; // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts); // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts); // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  return palette;\n}\n\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n  if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n    if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n      var _a = palette.DarkMuted.getHsl(),\n          h = _a[0],\n          s = _a[1],\n          l = _a[2];\n\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n\n    if (palette.LightVibrant === null && palette.LightMuted !== null) {\n      var _b = palette.LightMuted.getHsl(),\n          h = _b[0],\n          s = _b[1],\n          l = _b[2];\n\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n  }\n\n  if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n    var _c = palette.DarkVibrant.getHsl(),\n        h = _c[0],\n        s = _c[1],\n        l = _c[2];\n\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  } else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n    var _d = palette.LightVibrant.getHsl(),\n        h = _d[0],\n        s = _d[1],\n        l = _d[2];\n\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n    var _e = palette.Vibrant.getHsl(),\n        h = _e[0],\n        s = _e[1],\n        l = _e[2];\n\n    l = opts.targetDarkLuma;\n    palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.LightVibrant === null && palette.Vibrant !== null) {\n    var _f = palette.Vibrant.getHsl(),\n        h = _f[0],\n        s = _f[1],\n        l = _f[2];\n\n    l = opts.targetLightLuma;\n    palette.LightVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.Muted === null && palette.Vibrant !== null) {\n    var _g = palette.Vibrant.getHsl(),\n        h = _g[0],\n        s = _g[1],\n        l = _g[2];\n\n    l = opts.targetMutesSaturation;\n    palette.Muted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n    var _h = palette.DarkVibrant.getHsl(),\n        h = _h[0],\n        s = _h[1],\n        l = _h[2];\n\n    l = opts.targetMutesSaturation;\n    palette.DarkMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.LightMuted === null && palette.LightVibrant !== null) {\n    var _j = palette.LightVibrant.getHsl(),\n        h = _j[0],\n        s = _j[1],\n        l = _j[2];\n\n    l = opts.targetMutesSaturation;\n    palette.LightMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n}\n\nvar DefaultGenerator = function DefaultGenerator(swatches, opts) {\n  opts = defaults({}, opts, DefaultOpts);\n\n  var maxPopulation = _findMaxPopulation(swatches);\n\n  var palette = _generateVariationColors(swatches, maxPopulation, opts);\n\n  _generateEmptySwatches(palette, maxPopulation, opts);\n\n  return palette;\n};\n\nexports.default = DefaultGenerator;","map":{"version":3,"sources":["../../src/generator/default.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"../color\");\nvar util_1 = require(\"../util\");\nvar defaults = require(\"lodash/defaults\");\nvar DefaultOpts = {\n    targetDarkLuma: 0.26,\n    maxDarkLuma: 0.45,\n    minLightLuma: 0.55,\n    targetLightLuma: 0.74,\n    minNormalLuma: 0.3,\n    targetNormalLuma: 0.5,\n    maxNormalLuma: 0.7,\n    targetMutesSaturation: 0.3,\n    maxMutesSaturation: 0.4,\n    targetVibrantSaturation: 1.0,\n    minVibrantSaturation: 0.35,\n    weightSaturation: 3,\n    weightLuma: 6.5,\n    weightPopulation: 0.5\n};\nfunction _findMaxPopulation(swatches) {\n    var p = 0;\n    swatches.forEach(function (s) {\n        p = Math.max(p, s.getPopulation());\n    });\n    return p;\n}\nfunction _isAlreadySelected(palette, s) {\n    return palette.Vibrant === s ||\n        palette.DarkVibrant === s ||\n        palette.LightVibrant === s ||\n        palette.Muted === s ||\n        palette.DarkMuted === s ||\n        palette.LightMuted === s;\n}\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n    function weightedMean() {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var sum = 0;\n        var weightSum = 0;\n        for (var i = 0; i < values.length; i += 2) {\n            var value = values[i];\n            var weight = values[i + 1];\n            sum += value * weight;\n            weightSum += weight;\n        }\n        return sum / weightSum;\n    }\n    function invertDiff(value, targetValue) {\n        return 1 - Math.abs(value - targetValue);\n    }\n    return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n    var max = null;\n    var maxValue = 0;\n    swatches.forEach(function (swatch) {\n        var _a = swatch.getHsl(), s = _a[1], l = _a[2];\n        if (s >= minSaturation && s <= maxSaturation &&\n            l >= minLuma && l <= maxLuma &&\n            !_isAlreadySelected(palette, swatch)) {\n            var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts);\n            if (max === null || value > maxValue) {\n                max = swatch;\n                maxValue = value;\n            }\n        }\n    });\n    return max;\n}\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n    var palette = {};\n    // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    return palette;\n}\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n    if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n        if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n            var _a = palette.DarkMuted.getHsl(), h = _a[0], s = _a[1], l = _a[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n        }\n        if (palette.LightVibrant === null && palette.LightMuted !== null) {\n            var _b = palette.LightMuted.getHsl(), h = _b[0], s = _b[1], l = _b[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n        }\n    }\n    if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n        var _c = palette.DarkVibrant.getHsl(), h = _c[0], s = _c[1], l = _c[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n        var _d = palette.LightVibrant.getHsl(), h = _d[0], s = _d[1], l = _d[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n        var _e = palette.Vibrant.getHsl(), h = _e[0], s = _e[1], l = _e[2];\n        l = opts.targetDarkLuma;\n        palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.LightVibrant === null && palette.Vibrant !== null) {\n        var _f = palette.Vibrant.getHsl(), h = _f[0], s = _f[1], l = _f[2];\n        l = opts.targetLightLuma;\n        palette.LightVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.Muted === null && palette.Vibrant !== null) {\n        var _g = palette.Vibrant.getHsl(), h = _g[0], s = _g[1], l = _g[2];\n        l = opts.targetMutesSaturation;\n        palette.Muted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n        var _h = palette.DarkVibrant.getHsl(), h = _h[0], s = _h[1], l = _h[2];\n        l = opts.targetMutesSaturation;\n        palette.DarkMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.LightMuted === null && palette.LightVibrant !== null) {\n        var _j = palette.LightVibrant.getHsl(), h = _j[0], s = _j[1], l = _j[2];\n        l = opts.targetMutesSaturation;\n        palette.LightMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n}\nvar DefaultGenerator = function (swatches, opts) {\n    opts = defaults({}, opts, DefaultOpts);\n    var maxPopulation = _findMaxPopulation(swatches);\n    var palette = _generateVariationColors(swatches, maxPopulation, opts);\n    _generateEmptySwatches(palette, maxPopulation, opts);\n    return palette;\n};\nexports.default = DefaultGenerator;\n//# sourceMappingURL=default.js.map"]},"metadata":{},"sourceType":"script"}