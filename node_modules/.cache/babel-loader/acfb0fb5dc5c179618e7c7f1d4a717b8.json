{"ast":null,"code":"var _regeneratorRuntime = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar promiseToCallback = require('promise-to-callback');\n\nmodule.exports = createAsyncMiddleware;\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return function (req, res, next, end) {\n    var nextDonePromise = null;\n    var finishedPromise = asyncMiddleware(req, res, getNextPromise);\n    promiseToCallback(finishedPromise)(function (err) {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)(function (nextErr, nextHandlerSignalDone) {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr);\n            return end(nextErr);\n          }\n\n          nextHandlerSignalDone(err);\n        });\n      } else {\n        // next handler was not called - complete middleware\n        end(err);\n      }\n    });\n\n    function getNextPromise() {\n      return _getNextPromise.apply(this, arguments);\n    }\n\n    function _getNextPromise() {\n      _getNextPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nextDonePromise = getNextDoneCallback();\n                _context.next = 3;\n                return nextDonePromise;\n\n              case 3:\n                return _context.abrupt(\"return\", undefined);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getNextPromise.apply(this, arguments);\n    }\n\n    function getNextDoneCallback() {\n      return new Promise(function (resolve) {\n        next(function (cb) {\n          return resolve(cb);\n        });\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"],"names":["promiseToCallback","require","module","exports","createAsyncMiddleware","asyncMiddleware","req","res","next","end","nextDonePromise","finishedPromise","getNextPromise","err","nextErr","nextHandlerSignalDone","console","error","getNextDoneCallback","undefined","Promise","resolve","cb"],"mappings":";;;;AAAA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,qBAAjB;;AAEA,SAASA,qBAAT,CAA+BC,eAA/B,EAAgD;AAC9C,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,EAAyB;AAC9B,QAAIC,eAAe,GAAG,IAAtB;AACA,QAAMC,eAAe,GAAGN,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWK,cAAX,CAAvC;AACAZ,IAAAA,iBAAiB,CAACW,eAAD,CAAjB,CAAmC,UAACE,GAAD,EAAS;AAC1C;AACA,UAAIH,eAAJ,EAAqB;AACnB;AACAV,QAAAA,iBAAiB,CAACU,eAAD,CAAjB,CAAmC,UAACI,OAAD,EAAUC,qBAAV,EAAoC;AACrE;AACA;AACA,cAAID,OAAJ,EAAa;AACXE,YAAAA,OAAO,CAACC,KAAR,CAAcH,OAAd;AACA,mBAAOL,GAAG,CAACK,OAAD,CAAV;AACD;;AACDC,UAAAA,qBAAqB,CAACF,GAAD,CAArB;AACD,SARD;AASD,OAXD,MAWO;AACL;AACAJ,QAAAA,GAAG,CAACI,GAAD,CAAH;AACD;AACF,KAjBD;;AAH8B,aAsBfD,cAtBe;AAAA;AAAA;;AAAA;AAAA,iFAsB9B;AAAA;AAAA;AAAA;AAAA;AACEF,gBAAAA,eAAe,GAAGQ,mBAAmB,EAArC;AADF;AAAA,uBAEQR,eAFR;;AAAA;AAAA,iDAGSS,SAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtB8B;AAAA;AAAA;;AA4B9B,aAASD,mBAAT,GAA+B;AAC7B,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9Bb,QAAAA,IAAI,CAAC,UAACc,EAAD;AAAA,iBAAQD,OAAO,CAACC,EAAD,CAAf;AAAA,SAAD,CAAJ;AACD,OAFM,CAAP;AAGD;AACF,GAjCD;AAkCD","sourcesContent":["const promiseToCallback = require('promise-to-callback')\n\nmodule.exports = createAsyncMiddleware\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    let nextDonePromise = null\n    const finishedPromise = asyncMiddleware(req, res, getNextPromise)\n    promiseToCallback(finishedPromise)((err) => {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)((nextErr, nextHandlerSignalDone) => {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr)\n            return end(nextErr)\n          }\n          nextHandlerSignalDone(err)\n        })\n      } else {\n        // next handler was not called - complete middleware\n        end(err)\n      }\n    })\n\n    async function getNextPromise() {\n      nextDonePromise = getNextDoneCallback()\n      await nextDonePromise\n      return undefined\n    }\n\n    function getNextDoneCallback() {\n      return new Promise((resolve) => {\n        next((cb) => resolve(cb))\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}