{"ast":null,"code":"import _objectSpread from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{Field,resetMintState,typeInput}from'./actions';var initialState={independentField:Field.CURRENCY_A,typedValue:'',otherTypedValue:''};export default createReducer(initialState,function(builder){return builder.addCase(resetMintState,function(){return initialState;}).addCase(typeInput,function(state,_ref){var _ref$payload=_ref.payload,field=_ref$payload.field,typedValue=_ref$payload.typedValue,noLiquidity=_ref$payload.noLiquidity;if(noLiquidity){// they're typing into the field they've last typed in\nif(field===state.independentField){return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}// they're typing into a new field, store the other value\nelse{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue,otherTypedValue:state.typedValue});}}else{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue,otherTypedValue:''});}});});","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"0JAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OAASC,KAAT,CAAgBC,cAAhB,CAAgCC,SAAhC,KAAiD,WAAjD,CAQA,GAAMC,CAAAA,YAAuB,CAAG,CAC9BC,gBAAgB,CAAEJ,KAAK,CAACK,UADM,CAE9BC,UAAU,CAAE,EAFkB,CAG9BC,eAAe,CAAE,EAHa,CAAhC,CAMA,cAAeR,CAAAA,aAAa,CAAYI,YAAZ,CAA0B,SAAAK,OAAO,QAC3DA,CAAAA,OAAO,CACJC,OADH,CACWR,cADX,CAC2B,iBAAME,CAAAA,YAAN,EAD3B,EAEGM,OAFH,CAEWP,SAFX,CAEsB,SAACQ,KAAD,MAA4D,uBAAlDC,OAAkD,CAAvCC,KAAuC,cAAvCA,KAAuC,CAAhCN,UAAgC,cAAhCA,UAAgC,CAApBO,WAAoB,cAApBA,WAAoB,CAC9E,GAAIA,WAAJ,CAAiB,CACf;AACA,GAAID,KAAK,GAAKF,KAAK,CAACN,gBAApB,CAAsC,CACpC,sCACKM,KADL,MAEEN,gBAAgB,CAAEQ,KAFpB,CAGEN,UAAU,CAAVA,UAHF,GAKD,CACD;AAPA,IAQK,CACH,sCACKI,KADL,MAEEN,gBAAgB,CAAEQ,KAFpB,CAGEN,UAAU,CAAVA,UAHF,CAIEC,eAAe,CAAEG,KAAK,CAACJ,UAJzB,GAMD,CACF,CAlBD,IAkBO,CACL,sCACKI,KADL,MAEEN,gBAAgB,CAAEQ,KAFpB,CAGEN,UAAU,CAAVA,UAHF,CAIEC,eAAe,CAAE,EAJnB,GAMD,CACF,CA7BH,CAD2D,EAAjC,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n}\n\nexport default createReducer<MintState>(initialState, builder =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: ''\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}