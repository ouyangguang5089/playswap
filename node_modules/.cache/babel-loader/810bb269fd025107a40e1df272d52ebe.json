{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar eccryptoJS = tslib_1.__importStar(require(\"eccrypto-js\"));\n\nvar utils_1 = require(\"@walletconnect/utils\");\n\nfunction generateKey(length) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _length, buffer, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _length = (length || 256) / 8;\n            buffer = eccryptoJS.randomBytes(_length);\n            result = utils_1.convertBufferToArrayBuffer(buffer);\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.generateKey = generateKey;\n\nfunction verifyHmac(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cipherText = utils_1.convertHexToBuffer(payload.data);\n            iv = utils_1.convertHexToBuffer(payload.iv);\n            hmac = utils_1.convertHexToBuffer(payload.hmac);\n            hmacHex = utils_1.convertBufferToHex(hmac, true);\n            unsigned = utils_1.concatBuffers(cipherText, iv);\n            _context2.next = 7;\n            return eccryptoJS.hmacSha256Sign(key, unsigned);\n\n          case 7:\n            chmac = _context2.sent;\n            chmacHex = utils_1.convertBufferToHex(chmac, true);\n\n            if (!(utils_1.removeHexPrefix(hmacHex) === utils_1.removeHexPrefix(chmacHex))) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 11:\n            return _context2.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.verifyHmac = verifyHmac;\n\nfunction encrypt(data, key, providedIv) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _key = utils_1.convertArrayBufferToBuffer(key);\n            _context3.t0 = providedIv;\n\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 5;\n            return generateKey(128);\n\n          case 5:\n            _context3.t0 = _context3.sent;\n\n          case 6:\n            ivArrayBuffer = _context3.t0;\n            iv = utils_1.convertArrayBufferToBuffer(ivArrayBuffer);\n            ivHex = utils_1.convertBufferToHex(iv, true);\n            contentString = JSON.stringify(data);\n            content = utils_1.convertUtf8ToBuffer(contentString);\n            _context3.next = 13;\n            return eccryptoJS.aesCbcEncrypt(iv, _key, content);\n\n          case 13:\n            cipherText = _context3.sent;\n            cipherTextHex = utils_1.convertBufferToHex(cipherText, true);\n            unsigned = utils_1.concatBuffers(cipherText, iv);\n            _context3.next = 18;\n            return eccryptoJS.hmacSha256Sign(_key, unsigned);\n\n          case 18:\n            hmac = _context3.sent;\n            hmacHex = utils_1.convertBufferToHex(hmac, true);\n            return _context3.abrupt(\"return\", {\n              data: cipherTextHex,\n              hmac: hmacHex,\n              iv: ivHex\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _key, verified, cipherText, iv, buffer, utf8, data;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _key = utils_1.convertArrayBufferToBuffer(key);\n\n            if (_key) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new Error(\"Missing key: required for decryption\");\n\n          case 3:\n            _context4.next = 5;\n            return verifyHmac(payload, _key);\n\n          case 5:\n            verified = _context4.sent;\n\n            if (verified) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            cipherText = utils_1.convertHexToBuffer(payload.data);\n            iv = utils_1.convertHexToBuffer(payload.iv);\n            _context4.next = 12;\n            return eccryptoJS.aesCbcDecrypt(iv, _key, cipherText);\n\n          case 12:\n            buffer = _context4.sent;\n            utf8 = utils_1.convertBufferToUtf8(buffer);\n            _context4.prev = 14;\n            data = JSON.parse(utf8);\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](14);\n            return _context4.abrupt(\"return\", null);\n\n          case 21:\n            return _context4.abrupt(\"return\", data);\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 18]]);\n  }));\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst eccryptoJS = tslib_1.__importStar(require(\"eccrypto-js\"));\nconst utils_1 = require(\"@walletconnect/utils\");\nfunction generateKey(length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _length = (length || 256) / 8;\n        const buffer = eccryptoJS.randomBytes(_length);\n        const result = utils_1.convertBufferToArrayBuffer(buffer);\n        return result;\n    });\n}\nexports.generateKey = generateKey;\nfunction verifyHmac(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const cipherText = utils_1.convertHexToBuffer(payload.data);\n        const iv = utils_1.convertHexToBuffer(payload.iv);\n        const hmac = utils_1.convertHexToBuffer(payload.hmac);\n        const hmacHex = utils_1.convertBufferToHex(hmac, true);\n        const unsigned = utils_1.concatBuffers(cipherText, iv);\n        const chmac = yield eccryptoJS.hmacSha256Sign(key, unsigned);\n        const chmacHex = utils_1.convertBufferToHex(chmac, true);\n        if (utils_1.removeHexPrefix(hmacHex) === utils_1.removeHexPrefix(chmacHex)) {\n            return true;\n        }\n        return false;\n    });\n}\nexports.verifyHmac = verifyHmac;\nfunction encrypt(data, key, providedIv) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = utils_1.convertArrayBufferToBuffer(key);\n        const ivArrayBuffer = providedIv || (yield generateKey(128));\n        const iv = utils_1.convertArrayBufferToBuffer(ivArrayBuffer);\n        const ivHex = utils_1.convertBufferToHex(iv, true);\n        const contentString = JSON.stringify(data);\n        const content = utils_1.convertUtf8ToBuffer(contentString);\n        const cipherText = yield eccryptoJS.aesCbcEncrypt(iv, _key, content);\n        const cipherTextHex = utils_1.convertBufferToHex(cipherText, true);\n        const unsigned = utils_1.concatBuffers(cipherText, iv);\n        const hmac = yield eccryptoJS.hmacSha256Sign(_key, unsigned);\n        const hmacHex = utils_1.convertBufferToHex(hmac, true);\n        return {\n            data: cipherTextHex,\n            hmac: hmacHex,\n            iv: ivHex,\n        };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = utils_1.convertArrayBufferToBuffer(key);\n        if (!_key) {\n            throw new Error(\"Missing key: required for decryption\");\n        }\n        const verified = yield verifyHmac(payload, _key);\n        if (!verified) {\n            return null;\n        }\n        const cipherText = utils_1.convertHexToBuffer(payload.data);\n        const iv = utils_1.convertHexToBuffer(payload.iv);\n        const buffer = yield eccryptoJS.aesCbcDecrypt(iv, _key, cipherText);\n        const utf8 = utils_1.convertBufferToUtf8(buffer);\n        let data;\n        try {\n            data = JSON.parse(utf8);\n        }\n        catch (error) {\n            return null;\n        }\n        return data;\n    });\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}