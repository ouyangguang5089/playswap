{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar entities = require('parse-entities');\n\nmodule.exports = factory;\n/* Factory to create an entity decoder. */\n\nfunction factory(ctx) {\n  decoder.raw = decodeRaw;\n  return decoder;\n  /* Normalize `position` to add an `indent`. */\n\n  function normalize(position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    var result = [];\n\n    while (++line) {\n      if (!(line in offsets)) {\n        break;\n      }\n\n      result.push((offsets[line] || 0) + 1);\n    }\n\n    return {\n      start: position,\n      indent: result\n    };\n  }\n  /* Handle a warning.\n   * See https://github.com/wooorm/parse-entities\n   * for the warnings. */\n\n\n  function handleWarning(reason, position, code) {\n    if (code === 3) {\n      return;\n    }\n\n    ctx.file.message(reason, position);\n  }\n  /* Decode `value` (at `position`) into text-nodes. */\n\n\n  function decoder(value, position, handler) {\n    entities(value, {\n      position: normalize(position),\n      warning: handleWarning,\n      text: handler,\n      reference: handler,\n      textContext: ctx,\n      referenceContext: ctx\n    });\n  }\n  /* Decode `value` (at `position`) into a string. */\n\n\n  function decodeRaw(value, position, options) {\n    return entities(value, xtend(options, {\n      position: normalize(position),\n      warning: handleWarning\n    }));\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/decode.js"],"names":["xtend","require","entities","module","exports","factory","ctx","decoder","raw","decodeRaw","normalize","position","offsets","offset","line","result","push","start","indent","handleWarning","reason","code","file","message","value","handler","warning","text","reference","textContext","referenceContext","options"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;AACA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AACpBC,EAAAA,OAAO,CAACC,GAAR,GAAcC,SAAd;AAEA,SAAOF,OAAP;AAEA;;AACA,WAASG,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,QAAIC,OAAO,GAAGN,GAAG,CAACO,MAAlB;AACA,QAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,WAAO,EAAED,IAAT,EAAe;AACb,UAAI,EAAEA,IAAI,IAAIF,OAAV,CAAJ,EAAwB;AACtB;AACD;;AAEDG,MAAAA,MAAM,CAACC,IAAP,CAAY,CAACJ,OAAO,CAACE,IAAD,CAAP,IAAiB,CAAlB,IAAuB,CAAnC;AACD;;AAED,WAAO;AACLG,MAAAA,KAAK,EAAEN,QADF;AAELO,MAAAA,MAAM,EAAEH;AAFH,KAAP;AAID;AAED;;;;;AAGA,WAASI,aAAT,CAAuBC,MAAvB,EAA+BT,QAA/B,EAAyCU,IAAzC,EAA+C;AAC7C,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACd;AACD;;AAEDf,IAAAA,GAAG,CAACgB,IAAJ,CAASC,OAAT,CAAiBH,MAAjB,EAAyBT,QAAzB;AACD;AAED;;;AACA,WAASJ,OAAT,CAAiBiB,KAAjB,EAAwBb,QAAxB,EAAkCc,OAAlC,EAA2C;AACzCvB,IAAAA,QAAQ,CAACsB,KAAD,EAAQ;AACdb,MAAAA,QAAQ,EAAED,SAAS,CAACC,QAAD,CADL;AAEde,MAAAA,OAAO,EAAEP,aAFK;AAGdQ,MAAAA,IAAI,EAAEF,OAHQ;AAIdG,MAAAA,SAAS,EAAEH,OAJG;AAKdI,MAAAA,WAAW,EAAEvB,GALC;AAMdwB,MAAAA,gBAAgB,EAAExB;AANJ,KAAR,CAAR;AAQD;AAED;;;AACA,WAASG,SAAT,CAAmBe,KAAnB,EAA0Bb,QAA1B,EAAoCoB,OAApC,EAA6C;AAC3C,WAAO7B,QAAQ,CAACsB,KAAD,EAAQxB,KAAK,CAAC+B,OAAD,EAAU;AACpCpB,MAAAA,QAAQ,EAAED,SAAS,CAACC,QAAD,CADiB;AAEpCe,MAAAA,OAAO,EAAEP;AAF2B,KAAV,CAAb,CAAf;AAID;AACF","sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\nvar entities = require('parse-entities');\n\nmodule.exports = factory;\n\n/* Factory to create an entity decoder. */\nfunction factory(ctx) {\n  decoder.raw = decodeRaw;\n\n  return decoder;\n\n  /* Normalize `position` to add an `indent`. */\n  function normalize(position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    var result = [];\n\n    while (++line) {\n      if (!(line in offsets)) {\n        break;\n      }\n\n      result.push((offsets[line] || 0) + 1);\n    }\n\n    return {\n      start: position,\n      indent: result\n    };\n  }\n\n  /* Handle a warning.\n   * See https://github.com/wooorm/parse-entities\n   * for the warnings. */\n  function handleWarning(reason, position, code) {\n    if (code === 3) {\n      return;\n    }\n\n    ctx.file.message(reason, position);\n  }\n\n  /* Decode `value` (at `position`) into text-nodes. */\n  function decoder(value, position, handler) {\n    entities(value, {\n      position: normalize(position),\n      warning: handleWarning,\n      text: handler,\n      reference: handler,\n      textContext: ctx,\n      referenceContext: ctx\n    });\n  }\n\n  /* Decode `value` (at `position`) into a string. */\n  function decodeRaw(value, position, options) {\n    return entities(value, xtend(options, {\n      position: normalize(position),\n      warning: handleWarning\n    }));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}