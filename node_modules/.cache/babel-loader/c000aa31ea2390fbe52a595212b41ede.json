{"ast":null,"code":"/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\n\n\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined';\n}\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\n\n\nfunction isNull(payload) {\n  return getType(payload) === 'Null';\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isPlainObject(payload) {\n  if (getType(payload) !== 'Object') return false;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {}}\r\n */\n\n\nfunction isEmptyObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length === 0;\n}\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object';\n}\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\n\n\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\n\n\nfunction isFunction(payload) {\n  return getType(payload) === 'Function';\n}\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\n\n\nfunction isArray(payload) {\n  return getType(payload) === 'Array';\n}\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isString(payload) {\n  return getType(payload) === 'String';\n}\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isFullString(payload) {\n  return isString(payload) && payload !== '';\n}\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isEmptyString(payload) {\n  return payload === '';\n}\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\n\n\nfunction isNumber(payload) {\n  return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\n\n\nfunction isBoolean(payload) {\n  return getType(payload) === 'Boolean';\n}\n/**\r\n * Returns whether the payload is a regular expression (RegExp)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\n\n\nfunction isRegExp(payload) {\n  return getType(payload) === 'RegExp';\n}\n/**\r\n * Returns whether the payload is a Map\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Map}\r\n */\n\n\nfunction isMap(payload) {\n  return getType(payload) === 'Map';\n}\n/**\r\n * Returns whether the payload is a WeakMap\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakMap}\r\n */\n\n\nfunction isWeakMap(payload) {\n  return getType(payload) === 'WeakMap';\n}\n/**\r\n * Returns whether the payload is a Set\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Set}\r\n */\n\n\nfunction isSet(payload) {\n  return getType(payload) === 'Set';\n}\n/**\r\n * Returns whether the payload is a WeakSet\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakSet}\r\n */\n\n\nfunction isWeakSet(payload) {\n  return getType(payload) === 'WeakSet';\n}\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\n\n\nfunction isSymbol(payload) {\n  return getType(payload) === 'Symbol';\n}\n/**\r\n * Returns whether the payload is a Date, and that the date is valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\n\n\nfunction isDate(payload) {\n  return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a Blob\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Blob}\r\n */\n\n\nfunction isBlob(payload) {\n  return getType(payload) === 'Blob';\n}\n/**\r\n * Returns whether the payload is a File\r\n *\r\n * @param {*} payload\r\n * @returns {payload is File}\r\n */\n\n\nfunction isFile(payload) {\n  return getType(payload) === 'File';\n}\n/**\r\n * Returns whether the payload is a Promise\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Promise}\r\n */\n\n\nfunction isPromise(payload) {\n  return getType(payload) === 'Promise';\n}\n/**\r\n * Returns whether the payload is an Error\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Error}\r\n */\n\n\nfunction isError(payload) {\n  return getType(payload) === 'Error';\n}\n/**\r\n * Returns whether the payload is `NaN` but also a `number`\r\n *\r\n * @param {*} payload\r\n * @returns {payload is typeof NaN}\r\n */\n\n\nfunction isNaNValue(payload) {\n  return getType(payload) === 'Number' && isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\n\n\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n/**\r\n * Returns true whether the payload is null or undefined\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is null | undefined)}\r\n */\n\n\nfunction isNullOrUndefined(payload) {\n  return isNull(payload) || isUndefined(payload);\n}\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\n\n\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError('Type must be a function');\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\n    throw new TypeError('Type is not a class');\n  } // Classes usually have names (as functions usually have names)\n\n\n  var name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyObject, isEmptyString, isError, isFile, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/is-what/dist/index.esm.js"],"names":["getType","payload","Object","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","constructor","getPrototypeOf","isObject","isEmptyObject","keys","length","isAnyObject","isObjectLike","isFunction","isArray","isString","isFullString","isEmptyString","isNumber","isNaN","isBoolean","isRegExp","isMap","isWeakMap","isSet","isWeakSet","isSymbol","isDate","isBlob","isFile","isPromise","isError","isNaNValue","isPrimitive","isNullOrUndefined","isType","type","Function","TypeError","hasOwnProperty","name","Boolean"],"mappings":"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","sourcesContent":["/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\r\nfunction getType(payload) {\r\n    return Object.prototype.toString.call(payload).slice(8, -1);\r\n}\r\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isUndefined(payload) {\r\n    return getType(payload) === 'Undefined';\r\n}\r\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\r\nfunction isNull(payload) {\r\n    return getType(payload) === 'Null';\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isPlainObject(payload) {\r\n    if (getType(payload) !== 'Object')\r\n        return false;\r\n    return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isObject(payload) {\r\n    return isPlainObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {}}\r\n */\r\nfunction isEmptyObject(payload) {\r\n    return isPlainObject(payload) && Object.keys(payload).length === 0;\r\n}\r\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isAnyObject(payload) {\r\n    return getType(payload) === 'Object';\r\n}\r\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\r\nfunction isObjectLike(payload) {\r\n    return isAnyObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\r\nfunction isFunction(payload) {\r\n    return getType(payload) === 'Function';\r\n}\r\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isArray(payload) {\r\n    return getType(payload) === 'Array';\r\n}\r\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isString(payload) {\r\n    return getType(payload) === 'String';\r\n}\r\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isFullString(payload) {\r\n    return isString(payload) && payload !== '';\r\n}\r\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isEmptyString(payload) {\r\n    return payload === '';\r\n}\r\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\r\nfunction isNumber(payload) {\r\n    return getType(payload) === 'Number' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\r\nfunction isBoolean(payload) {\r\n    return getType(payload) === 'Boolean';\r\n}\r\n/**\r\n * Returns whether the payload is a regular expression (RegExp)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\r\nfunction isRegExp(payload) {\r\n    return getType(payload) === 'RegExp';\r\n}\r\n/**\r\n * Returns whether the payload is a Map\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Map}\r\n */\r\nfunction isMap(payload) {\r\n    return getType(payload) === 'Map';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakMap\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakMap}\r\n */\r\nfunction isWeakMap(payload) {\r\n    return getType(payload) === 'WeakMap';\r\n}\r\n/**\r\n * Returns whether the payload is a Set\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Set}\r\n */\r\nfunction isSet(payload) {\r\n    return getType(payload) === 'Set';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakSet\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakSet}\r\n */\r\nfunction isWeakSet(payload) {\r\n    return getType(payload) === 'WeakSet';\r\n}\r\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\r\nfunction isSymbol(payload) {\r\n    return getType(payload) === 'Symbol';\r\n}\r\n/**\r\n * Returns whether the payload is a Date, and that the date is valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\r\nfunction isDate(payload) {\r\n    return getType(payload) === 'Date' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a Blob\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Blob}\r\n */\r\nfunction isBlob(payload) {\r\n    return getType(payload) === 'Blob';\r\n}\r\n/**\r\n * Returns whether the payload is a File\r\n *\r\n * @param {*} payload\r\n * @returns {payload is File}\r\n */\r\nfunction isFile(payload) {\r\n    return getType(payload) === 'File';\r\n}\r\n/**\r\n * Returns whether the payload is a Promise\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Promise}\r\n */\r\nfunction isPromise(payload) {\r\n    return getType(payload) === 'Promise';\r\n}\r\n/**\r\n * Returns whether the payload is an Error\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Error}\r\n */\r\nfunction isError(payload) {\r\n    return getType(payload) === 'Error';\r\n}\r\n/**\r\n * Returns whether the payload is `NaN` but also a `number`\r\n *\r\n * @param {*} payload\r\n * @returns {payload is typeof NaN}\r\n */\r\nfunction isNaNValue(payload) {\r\n    return getType(payload) === 'Number' && isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\r\nfunction isPrimitive(payload) {\r\n    return (isBoolean(payload) ||\r\n        isNull(payload) ||\r\n        isUndefined(payload) ||\r\n        isNumber(payload) ||\r\n        isString(payload) ||\r\n        isSymbol(payload));\r\n}\r\n/**\r\n * Returns true whether the payload is null or undefined\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is null | undefined)}\r\n */\r\nfunction isNullOrUndefined(payload) {\r\n    return isNull(payload) || isUndefined(payload);\r\n}\r\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\r\nfunction isType(payload, type) {\r\n    if (!(type instanceof Function)) {\r\n        throw new TypeError('Type must be a function');\r\n    }\r\n    if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\r\n        throw new TypeError('Type is not a class');\r\n    }\r\n    // Classes usually have names (as functions usually have names)\r\n    var name = type.name;\r\n    return getType(payload) === name || Boolean(payload && payload.constructor === type);\r\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyObject, isEmptyString, isError, isFile, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };\n"]},"metadata":{},"sourceType":"module"}