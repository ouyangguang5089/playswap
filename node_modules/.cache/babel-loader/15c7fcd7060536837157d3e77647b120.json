{"ast":null,"code":"import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import copy from'copy-to-clipboard';import{useCallback,useEffect,useState}from'react';export default function useCopyClipboard(){var timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:500;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCopied=_useState2[0],setIsCopied=_useState2[1];var staticCopy=useCallback(function(text){var didCopy=copy(text);setIsCopied(didCopy);},[]);useEffect(function(){if(isCopied){var hide=setTimeout(function(){setIsCopied(false);},timeout);return function(){clearTimeout(hide);};}return undefined;},[isCopied,setIsCopied,timeout]);return[isCopied,staticCopy];}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/hooks/useCopyClipboard.ts"],"names":["copy","useCallback","useEffect","useState","useCopyClipboard","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","hide","setTimeout","clearTimeout","undefined"],"mappings":"2JAAA,MAAOA,CAAAA,IAAP,KAAiB,mBAAjB,CACA,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CAEA,cAAe,SAASC,CAAAA,gBAAT,EAA8E,IAApDC,CAAAA,OAAoD,2DAA1C,GAA0C,eAC3DF,QAAQ,CAAC,KAAD,CADmD,wCACpFG,QADoF,eAC1EC,WAD0E,eAG3F,GAAMC,CAAAA,UAAU,CAAGP,WAAW,CAAC,SAAAQ,IAAI,CAAI,CACrC,GAAMC,CAAAA,OAAO,CAAGV,IAAI,CAACS,IAAD,CAApB,CACAF,WAAW,CAACG,OAAD,CAAX,CACD,CAH6B,CAG3B,EAH2B,CAA9B,CAKAR,SAAS,CAAC,UAAM,CACd,GAAII,QAAJ,CAAc,CACZ,GAAMK,CAAAA,IAAI,CAAGC,UAAU,CAAC,UAAM,CAC5BL,WAAW,CAAC,KAAD,CAAX,CACD,CAFsB,CAEpBF,OAFoB,CAAvB,CAIA,MAAO,WAAM,CACXQ,YAAY,CAACF,IAAD,CAAZ,CACD,CAFD,CAGD,CACD,MAAOG,CAAAA,SAAP,CACD,CAXQ,CAWN,CAACR,QAAD,CAAWC,WAAX,CAAwBF,OAAxB,CAXM,CAAT,CAaA,MAAO,CAACC,QAAD,CAAWE,UAAX,CAAP,CACD","sourcesContent":["import copy from 'copy-to-clipboard'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport default function useCopyClipboard(timeout = 500): [boolean, (toCopy: string) => void] {\n  const [isCopied, setIsCopied] = useState(false)\n\n  const staticCopy = useCallback(text => {\n    const didCopy = copy(text)\n    setIsCopied(didCopy)\n  }, [])\n\n  useEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false)\n      }, timeout)\n\n      return () => {\n        clearTimeout(hide)\n      }\n    }\n    return undefined\n  }, [isCopied, setIsCopied, timeout])\n\n  return [isCopied, staticCopy]\n}\n"]},"metadata":{},"sourceType":"module"}