{"ast":null,"code":"import _regeneratorRuntime from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{currencyEquals,ETHER,WETH}from'@uniswap/sdk';import{useMemo}from'react';import{tryParseAmount}from'../state/swap/hooks';import{useTransactionAdder}from'../state/transactions/hooks';import{useCurrencyBalance}from'../state/wallet/hooks';import{useActiveWeb3React}from'./index';import{useWETHContract}from'./useContract';export var WrapType;(function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";})(WrapType||(WrapType={}));var NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */export default function useWrapCallback(inputCurrency,outputCurrency,typedValue){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var wethContract=useWETHContract();var balance=useCurrencyBalance(account!==null&&account!==void 0?account:undefined,inputCurrency);// we can always parse the amount typed as the input currency, since wrapping is 1:1\nvar inputAmount=useMemo(function(){return tryParseAmount(typedValue,inputCurrency);},[inputCurrency,typedValue]);var addTransaction=useTransactionAdder();return useMemo(function(){if(!wethContract||!chainId||!inputCurrency||!outputCurrency)return NOT_APPLICABLE;var sufficientBalance=inputAmount&&balance&&!balance.lessThan(inputAmount);if(inputCurrency===ETHER&&currencyEquals(WETH[chainId],outputCurrency)){return{wrapType:WrapType.WRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var txReceipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return wethContract.deposit({value:\"0x\".concat(inputAmount.raw.toString(16))});case 3:txReceipt=_context.sent;addTransaction(txReceipt,{summary:\"Wrap \".concat(inputAmount.toSignificant(6),\" ETH to WETH\")});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error('Could not deposit',_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:'Insufficient ETH balance'};}else if(currencyEquals(WETH[chainId],inputCurrency)&&outputCurrency===ETHER){return{wrapType:WrapType.UNWRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var txReceipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return wethContract.withdraw(\"0x\".concat(inputAmount.raw.toString(16)));case 3:txReceipt=_context2.sent;addTransaction(txReceipt,{summary:\"Unwrap \".concat(inputAmount.toSignificant(6),\" WETH to ETH\")});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.error('Could not withdraw',_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:'Insufficient WETH balance'};}else{return NOT_APPLICABLE;}},[wethContract,chainId,inputCurrency,outputCurrency,inputAmount,balance,addTransaction]);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/hooks/useWrapCallback.ts"],"names":["currencyEquals","ETHER","WETH","useMemo","tryParseAmount","useTransactionAdder","useCurrencyBalance","useActiveWeb3React","useWETHContract","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","wethContract","balance","undefined","inputAmount","addTransaction","sufficientBalance","lessThan","WRAP","execute","deposit","value","raw","toString","txReceipt","summary","toSignificant","console","error","inputError","UNWRAP","withdraw"],"mappings":"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","sourcesContent":["import { Currency, currencyEquals, ETHER, WETH } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useActiveWeb3React } from './index'\nimport { useWETHContract } from './useContract'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { chainId, account } = useActiveWeb3React()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.raw.toString(16)}` })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} ETH to WETH` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient ETH balance'\n      }\n    } else if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.raw.toString(16)}`)\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WETH to ETH` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WETH balance'\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n"]},"metadata":{},"sourceType":"module"}