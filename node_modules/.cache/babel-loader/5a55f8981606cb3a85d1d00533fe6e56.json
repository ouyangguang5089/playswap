{"ast":null,"code":"import{useMemo}from'react';import contenthashToUri from'../utils/contenthashToUri';import{parseENSAddress}from'../utils/parseENSAddress';import uriToHttp from'../utils/uriToHttp';import useENSContentHash from'./useENSContentHash';export default function useHttpLocations(uri){var ens=useMemo(function(){return uri?parseENSAddress(uri):undefined;},[uri]);var resolvedContentHash=useENSContentHash(ens===null||ens===void 0?void 0:ens.ensName);return useMemo(function(){if(ens){return resolvedContentHash.contenthash?uriToHttp(contenthashToUri(resolvedContentHash.contenthash)):[];}else{return uri?uriToHttp(uri):[];}},[ens,resolvedContentHash.contenthash,uri]);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/hooks/useHttpLocations.ts"],"names":["useMemo","contenthashToUri","parseENSAddress","uriToHttp","useENSContentHash","useHttpLocations","uri","ens","undefined","resolvedContentHash","ensName","contenthash"],"mappings":"AAAA,OAASA,OAAT,KAAwB,OAAxB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,2BAA7B,CACA,OAASC,eAAT,KAAgC,0BAAhC,CACA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CAEA,cAAe,SAASC,CAAAA,gBAAT,CAA0BC,GAA1B,CAA6D,CAC1E,GAAMC,CAAAA,GAAG,CAAGP,OAAO,CAAC,iBAAOM,CAAAA,GAAG,CAAGJ,eAAe,CAACI,GAAD,CAAlB,CAA0BE,SAApC,EAAD,CAAiD,CAACF,GAAD,CAAjD,CAAnB,CACA,GAAMG,CAAAA,mBAAmB,CAAGL,iBAAiB,CAACG,GAAD,SAACA,GAAD,iBAACA,GAAG,CAAEG,OAAN,CAA7C,CACA,MAAOV,CAAAA,OAAO,CAAC,UAAM,CACnB,GAAIO,GAAJ,CAAS,CACP,MAAOE,CAAAA,mBAAmB,CAACE,WAApB,CAAkCR,SAAS,CAACF,gBAAgB,CAACQ,mBAAmB,CAACE,WAArB,CAAjB,CAA3C,CAAiG,EAAxG,CACD,CAFD,IAEO,CACL,MAAOL,CAAAA,GAAG,CAAGH,SAAS,CAACG,GAAD,CAAZ,CAAoB,EAA9B,CACD,CACF,CANa,CAMX,CAACC,GAAD,CAAME,mBAAmB,CAACE,WAA1B,CAAuCL,GAAvC,CANW,CAAd,CAOD","sourcesContent":["import { useMemo } from 'react'\nimport contenthashToUri from '../utils/contenthashToUri'\nimport { parseENSAddress } from '../utils/parseENSAddress'\nimport uriToHttp from '../utils/uriToHttp'\nimport useENSContentHash from './useENSContentHash'\n\nexport default function useHttpLocations(uri: string | undefined): string[] {\n  const ens = useMemo(() => (uri ? parseENSAddress(uri) : undefined), [uri])\n  const resolvedContentHash = useENSContentHash(ens?.ensName)\n  return useMemo(() => {\n    if (ens) {\n      return resolvedContentHash.contenthash ? uriToHttp(contenthashToUri(resolvedContentHash.contenthash)) : []\n    } else {\n      return uri ? uriToHttp(uri) : []\n    }\n  }, [ens, resolvedContentHash.contenthash, uri])\n}\n"]},"metadata":{},"sourceType":"module"}