{"ast":null,"code":"import{currencyEquals}from'@uniswap/sdk';import React,{useCallback,useMemo}from'react';import TransactionConfirmationModal,{ConfirmationModalContent,TransactionErrorContent}from'../TransactionConfirmationModal';import SwapModalFooter from'./SwapModalFooter';import SwapModalHeader from'./SwapModalHeader';/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */function tradeMeaningfullyDiffers(tradeA,tradeB){return tradeA.tradeType!==tradeB.tradeType||!currencyEquals(tradeA.inputAmount.currency,tradeB.inputAmount.currency)||!tradeA.inputAmount.equalTo(tradeB.inputAmount)||!currencyEquals(tradeA.outputAmount.currency,tradeB.outputAmount.currency)||!tradeA.outputAmount.equalTo(tradeB.outputAmount);}export default function ConfirmSwapModal(_ref){var _trade$inputAmount,_trade$inputAmount2,_trade$inputAmount2$c,_trade$outputAmount,_trade$outputAmount2,_trade$outputAmount2$;var trade=_ref.trade,originalTrade=_ref.originalTrade,onAcceptChanges=_ref.onAcceptChanges,allowedSlippage=_ref.allowedSlippage,onConfirm=_ref.onConfirm,onDismiss=_ref.onDismiss,recipient=_ref.recipient,swapErrorMessage=_ref.swapErrorMessage,isOpen=_ref.isOpen,attemptingTxn=_ref.attemptingTxn,txHash=_ref.txHash;var showAcceptChanges=useMemo(function(){return Boolean(trade&&originalTrade&&tradeMeaningfullyDiffers(trade,originalTrade));},[originalTrade,trade]);var modalHeader=useCallback(function(){return trade?/*#__PURE__*/React.createElement(SwapModalHeader,{trade:trade,allowedSlippage:allowedSlippage,recipient:recipient,showAcceptChanges:showAcceptChanges,onAcceptChanges:onAcceptChanges}):null;},[allowedSlippage,onAcceptChanges,recipient,showAcceptChanges,trade]);var modalBottom=useCallback(function(){return trade?/*#__PURE__*/React.createElement(SwapModalFooter,{onConfirm:onConfirm,trade:trade,disabledConfirm:showAcceptChanges,swapErrorMessage:swapErrorMessage,allowedSlippage:allowedSlippage}):null;},[allowedSlippage,onConfirm,showAcceptChanges,swapErrorMessage,trade]);// text to show while loading\nvar pendingText=\"Swapping \".concat(trade===null||trade===void 0?void 0:(_trade$inputAmount=trade.inputAmount)===null||_trade$inputAmount===void 0?void 0:_trade$inputAmount.toSignificant(6),\" \").concat(trade===null||trade===void 0?void 0:(_trade$inputAmount2=trade.inputAmount)===null||_trade$inputAmount2===void 0?void 0:(_trade$inputAmount2$c=_trade$inputAmount2.currency)===null||_trade$inputAmount2$c===void 0?void 0:_trade$inputAmount2$c.symbol,\" for \").concat(trade===null||trade===void 0?void 0:(_trade$outputAmount=trade.outputAmount)===null||_trade$outputAmount===void 0?void 0:_trade$outputAmount.toSignificant(6),\" \").concat(trade===null||trade===void 0?void 0:(_trade$outputAmount2=trade.outputAmount)===null||_trade$outputAmount2===void 0?void 0:(_trade$outputAmount2$=_trade$outputAmount2.currency)===null||_trade$outputAmount2$===void 0?void 0:_trade$outputAmount2$.symbol);var confirmationContent=useCallback(function(){return swapErrorMessage?/*#__PURE__*/React.createElement(TransactionErrorContent,{onDismiss:onDismiss,message:swapErrorMessage}):/*#__PURE__*/React.createElement(ConfirmationModalContent,{title:\"Confirm Swap\",onDismiss:onDismiss,topContent:modalHeader,bottomContent:modalBottom});},[onDismiss,modalBottom,modalHeader,swapErrorMessage]);return/*#__PURE__*/React.createElement(TransactionConfirmationModal,{isOpen:isOpen,onDismiss:onDismiss,attemptingTxn:attemptingTxn,hash:txHash,content:confirmationContent,pendingText:pendingText});}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/components/swap/ConfirmSwapModal.tsx"],"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","showAcceptChanges","Boolean","modalHeader","modalBottom","pendingText","toSignificant","symbol","confirmationContent"],"mappings":"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","sourcesContent":["import { currencyEquals, Trade } from '@uniswap/sdk'\nimport React, { useCallback, useMemo } from 'react'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}: {\n  isOpen: boolean\n  trade: Trade | undefined\n  originalTrade: Trade | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        allowedSlippage={allowedSlippage}\n      />\n    ) : null\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\n    trade?.inputAmount?.currency?.symbol\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title=\"Confirm Swap\"\n          onDismiss={onDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}