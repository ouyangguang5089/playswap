{"ast":null,"code":"import{ETHER,Token,TokenAmount,WETH}from'@uniswap/sdk';export function wrappedCurrency(currency,chainId){return chainId&&currency===ETHER?WETH[chainId]:currency instanceof Token?currency:undefined;}export function wrappedCurrencyAmount(currencyAmount,chainId){var token=currencyAmount&&chainId?wrappedCurrency(currencyAmount.currency,chainId):undefined;return token&&currencyAmount?new TokenAmount(token,currencyAmount.raw):undefined;}export function unwrappedToken(token){if(token.equals(WETH[token.chainId]))return ETHER;return token;}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/utils/wrappedCurrency.ts"],"names":["ETHER","Token","TokenAmount","WETH","wrappedCurrency","currency","chainId","undefined","wrappedCurrencyAmount","currencyAmount","token","raw","unwrappedToken","equals"],"mappings":"AAAA,OAA4CA,KAA5C,CAAmDC,KAAnD,CAA0DC,WAA1D,CAAuEC,IAAvE,KAAmF,cAAnF,CAEA,MAAO,SAASC,CAAAA,eAAT,CAAyBC,QAAzB,CAAyDC,OAAzD,CAA0G,CAC/G,MAAOA,CAAAA,OAAO,EAAID,QAAQ,GAAKL,KAAxB,CAAgCG,IAAI,CAACG,OAAD,CAApC,CAAgDD,QAAQ,WAAYJ,CAAAA,KAApB,CAA4BI,QAA5B,CAAuCE,SAA9F,CACD,CAED,MAAO,SAASC,CAAAA,qBAAT,CACLC,cADK,CAELH,OAFK,CAGoB,CACzB,GAAMI,CAAAA,KAAK,CAAGD,cAAc,EAAIH,OAAlB,CAA4BF,eAAe,CAACK,cAAc,CAACJ,QAAhB,CAA0BC,OAA1B,CAA3C,CAAgFC,SAA9F,CACA,MAAOG,CAAAA,KAAK,EAAID,cAAT,CAA0B,GAAIP,CAAAA,WAAJ,CAAgBQ,KAAhB,CAAuBD,cAAc,CAACE,GAAtC,CAA1B,CAAuEJ,SAA9E,CACD,CAED,MAAO,SAASK,CAAAA,cAAT,CAAwBF,KAAxB,CAAgD,CACrD,GAAIA,KAAK,CAACG,MAAN,CAAaV,IAAI,CAACO,KAAK,CAACJ,OAAP,CAAjB,CAAJ,CAAuC,MAAON,CAAAA,KAAP,CACvC,MAAOU,CAAAA,KAAP,CACD","sourcesContent":["import { ChainId, Currency, CurrencyAmount, ETHER, Token, TokenAmount, WETH } from '@uniswap/sdk'\n\nexport function wrappedCurrency(currency: Currency | undefined, chainId: ChainId | undefined): Token | undefined {\n  return chainId && currency === ETHER ? WETH[chainId] : currency instanceof Token ? currency : undefined\n}\n\nexport function wrappedCurrencyAmount(\n  currencyAmount: CurrencyAmount | undefined,\n  chainId: ChainId | undefined\n): TokenAmount | undefined {\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined\n}\n\nexport function unwrappedToken(token: Token): Currency {\n  if (token.equals(WETH[token.chainId])) return ETHER\n  return token\n}\n"]},"metadata":{},"sourceType":"module"}