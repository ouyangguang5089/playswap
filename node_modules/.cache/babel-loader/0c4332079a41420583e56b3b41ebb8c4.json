{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar aes_1 = require(\"./aes\");\n\nvar ecdh_1 = require(\"./ecdh\");\n\nvar ecdsa_1 = require(\"./ecdsa\");\n\nvar hmac_1 = require(\"./hmac\");\n\nvar random_1 = require(\"./random\");\n\nvar sha2_1 = require(\"./sha2\");\n\nvar constants_1 = require(\"./constants\");\n\nvar helpers_1 = require(\"./helpers\");\n\nfunction getSharedKey(privateKey, publicKey) {\n  publicKey = ecdsa_1.decompress(publicKey);\n  return ecdh_1.derive(privateKey, publicKey);\n}\n\nfunction getEncryptionKey(hash) {\n  return Buffer.from(hash.slice(constants_1.LENGTH_0, constants_1.KEY_LENGTH));\n}\n\nfunction getMacKey(hash) {\n  return Buffer.from(hash.slice(constants_1.KEY_LENGTH));\n}\n\nfunction getEciesKeys(privateKey, publicKey) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var sharedKey, hash;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sharedKey = getSharedKey(privateKey, publicKey);\n            _context.next = 3;\n            return sha2_1.sha512(sharedKey);\n\n          case 3:\n            hash = _context.sent;\n            return _context.abrupt(\"return\", {\n              encryptionKey: getEncryptionKey(hash),\n              macKey: getMacKey(hash)\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nfunction getEciesKeysSync(privateKey, publicKey) {\n  var sharedKey = getSharedKey(privateKey, publicKey);\n  var hash = sha2_1.sha512Sync(sharedKey);\n  return {\n    encryptionKey: getEncryptionKey(hash),\n    macKey: getMacKey(hash)\n  };\n}\n\nfunction getEphemKeyPair(opts) {\n  var _a, _b;\n\n  var ephemPrivateKey = ((_a = opts) === null || _a === void 0 ? void 0 : _a.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n\n  while (!helpers_1.isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = ((_b = opts) === null || _b === void 0 ? void 0 : _b.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n  }\n\n  var ephemPublicKey = ecdsa_1.getPublic(ephemPrivateKey);\n  return {\n    ephemPrivateKey: ephemPrivateKey,\n    ephemPublicKey: ephemPublicKey\n  };\n}\n\nfunction encrypt(publicKeyTo, msg, opts) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _getEphemKeyPair, ephemPrivateKey, ephemPublicKey, _yield$getEciesKeys, encryptionKey, macKey, iv, ciphertext, dataToMac, mac;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getEphemKeyPair = getEphemKeyPair(opts), ephemPrivateKey = _getEphemKeyPair.ephemPrivateKey, ephemPublicKey = _getEphemKeyPair.ephemPublicKey;\n            _context2.next = 3;\n            return getEciesKeys(ephemPrivateKey, publicKeyTo);\n\n          case 3:\n            _yield$getEciesKeys = _context2.sent;\n            encryptionKey = _yield$getEciesKeys.encryptionKey;\n            macKey = _yield$getEciesKeys.macKey;\n            iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n            _context2.next = 9;\n            return aes_1.aesCbcEncrypt(iv, encryptionKey, msg);\n\n          case 9:\n            ciphertext = _context2.sent;\n            dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n            _context2.next = 13;\n            return hmac_1.hmacSha256Sign(macKey, dataToMac);\n\n          case 13:\n            mac = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              iv: iv,\n              ephemPublicKey: ephemPublicKey,\n              ciphertext: ciphertext,\n              mac: mac\n            });\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var ephemPublicKey, iv, mac, ciphertext, _yield$getEciesKeys2, encryptionKey, macKey, dataToMac, macTest, msg;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            ephemPublicKey = opts.ephemPublicKey, iv = opts.iv, mac = opts.mac, ciphertext = opts.ciphertext;\n            _context3.next = 3;\n            return getEciesKeys(privateKey, ephemPublicKey);\n\n          case 3:\n            _yield$getEciesKeys2 = _context3.sent;\n            encryptionKey = _yield$getEciesKeys2.encryptionKey;\n            macKey = _yield$getEciesKeys2.macKey;\n            dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n            _context3.next = 9;\n            return hmac_1.hmacSha256Verify(macKey, dataToMac, mac);\n\n          case 9:\n            macTest = _context3.sent;\n            helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n            _context3.next = 13;\n            return aes_1.aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n\n          case 13:\n            msg = _context3.sent;\n            return _context3.abrupt(\"return\", msg);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.decrypt = decrypt;\n\nfunction encryptSync(publicKeyTo, msg, opts) {\n  var _a;\n\n  var _getEphemKeyPair2 = getEphemKeyPair(opts),\n      ephemPrivateKey = _getEphemKeyPair2.ephemPrivateKey,\n      ephemPublicKey = _getEphemKeyPair2.ephemPublicKey;\n\n  var _getEciesKeysSync = getEciesKeysSync(ephemPrivateKey, publicKeyTo),\n      encryptionKey = _getEciesKeysSync.encryptionKey,\n      macKey = _getEciesKeysSync.macKey;\n\n  var iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n  var ciphertext = aes_1.aesCbcEncryptSync(iv, encryptionKey, msg);\n  var dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n  var mac = hmac_1.hmacSha256SignSync(macKey, dataToMac);\n  return {\n    iv: iv,\n    ephemPublicKey: ephemPublicKey,\n    ciphertext: ciphertext,\n    mac: mac\n  };\n}\n\nexports.encryptSync = encryptSync;\n\nfunction decryptSync(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var ephemPublicKey, iv, mac, ciphertext, _getEciesKeysSync2, encryptionKey, macKey, dataToMac, macTest, msg;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            ephemPublicKey = opts.ephemPublicKey, iv = opts.iv, mac = opts.mac, ciphertext = opts.ciphertext;\n            _getEciesKeysSync2 = getEciesKeysSync(privateKey, ephemPublicKey), encryptionKey = _getEciesKeysSync2.encryptionKey, macKey = _getEciesKeysSync2.macKey;\n            dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n            macTest = hmac_1.hmacSha256VerifySync(macKey, dataToMac, mac);\n            helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n            msg = aes_1.aesCbcDecryptSync(opts.iv, encryptionKey, opts.ciphertext);\n            return _context4.abrupt(\"return\", msg);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.decryptSync = decryptSync;\n\nfunction serialize(opts) {\n  var ephemPublicKey = ecdsa_1.compress(opts.ephemPublicKey);\n  return helpers_1.concatBuffers(opts.iv, ephemPublicKey, opts.mac, opts.ciphertext);\n}\n\nexports.serialize = serialize;\n\nfunction deserialize(buf) {\n  var slice0 = constants_1.LENGTH_0;\n  var slice1 = slice0 + constants_1.IV_LENGTH;\n  var slice2 = slice1 + constants_1.PREFIXED_KEY_LENGTH;\n  var slice3 = slice2 + constants_1.MAC_LENGTH;\n  var slice4 = buf.length;\n  return {\n    iv: buf.slice(slice0, slice1),\n    ephemPublicKey: ecdsa_1.decompress(buf.slice(slice1, slice2)),\n    mac: buf.slice(slice2, slice3),\n    ciphertext: buf.slice(slice3, slice4)\n  };\n}\n\nexports.deserialize = deserialize;","map":{"version":3,"sources":["../../src/ecies.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst aes_1 = require(\"./aes\");\nconst ecdh_1 = require(\"./ecdh\");\nconst ecdsa_1 = require(\"./ecdsa\");\nconst hmac_1 = require(\"./hmac\");\nconst random_1 = require(\"./random\");\nconst sha2_1 = require(\"./sha2\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\nfunction getSharedKey(privateKey, publicKey) {\n    publicKey = ecdsa_1.decompress(publicKey);\n    return ecdh_1.derive(privateKey, publicKey);\n}\nfunction getEncryptionKey(hash) {\n    return Buffer.from(hash.slice(constants_1.LENGTH_0, constants_1.KEY_LENGTH));\n}\nfunction getMacKey(hash) {\n    return Buffer.from(hash.slice(constants_1.KEY_LENGTH));\n}\nfunction getEciesKeys(privateKey, publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sharedKey = getSharedKey(privateKey, publicKey);\n        const hash = yield sha2_1.sha512(sharedKey);\n        return { encryptionKey: getEncryptionKey(hash), macKey: getMacKey(hash) };\n    });\n}\nfunction getEciesKeysSync(privateKey, publicKey) {\n    const sharedKey = getSharedKey(privateKey, publicKey);\n    const hash = sha2_1.sha512Sync(sharedKey);\n    return { encryptionKey: getEncryptionKey(hash), macKey: getMacKey(hash) };\n}\nfunction getEphemKeyPair(opts) {\n    var _a, _b;\n    let ephemPrivateKey = ((_a = opts) === null || _a === void 0 ? void 0 : _a.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n    while (!helpers_1.isValidPrivateKey(ephemPrivateKey)) {\n        ephemPrivateKey = ((_b = opts) === null || _b === void 0 ? void 0 : _b.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n    }\n    const ephemPublicKey = ecdsa_1.getPublic(ephemPrivateKey);\n    return { ephemPrivateKey, ephemPublicKey };\n}\nfunction encrypt(publicKeyTo, msg, opts) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPrivateKey, ephemPublicKey } = getEphemKeyPair(opts);\n        const { encryptionKey, macKey } = yield getEciesKeys(ephemPrivateKey, publicKeyTo);\n        const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n        const ciphertext = yield aes_1.aesCbcEncrypt(iv, encryptionKey, msg);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const mac = yield hmac_1.hmacSha256Sign(macKey, dataToMac);\n        return { iv, ephemPublicKey, ciphertext, mac: mac };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(privateKey, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPublicKey, iv, mac, ciphertext } = opts;\n        const { encryptionKey, macKey } = yield getEciesKeys(privateKey, ephemPublicKey);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const macTest = yield hmac_1.hmacSha256Verify(macKey, dataToMac, mac);\n        helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n        const msg = yield aes_1.aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n        return msg;\n    });\n}\nexports.decrypt = decrypt;\nfunction encryptSync(publicKeyTo, msg, opts) {\n    var _a;\n    const { ephemPrivateKey, ephemPublicKey } = getEphemKeyPair(opts);\n    const { encryptionKey, macKey } = getEciesKeysSync(ephemPrivateKey, publicKeyTo);\n    const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n    const ciphertext = aes_1.aesCbcEncryptSync(iv, encryptionKey, msg);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const mac = hmac_1.hmacSha256SignSync(macKey, dataToMac);\n    return { iv, ephemPublicKey, ciphertext, mac: mac };\n}\nexports.encryptSync = encryptSync;\nfunction decryptSync(privateKey, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPublicKey, iv, mac, ciphertext } = opts;\n        const { encryptionKey, macKey } = getEciesKeysSync(privateKey, ephemPublicKey);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const macTest = hmac_1.hmacSha256VerifySync(macKey, dataToMac, mac);\n        helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n        const msg = aes_1.aesCbcDecryptSync(opts.iv, encryptionKey, opts.ciphertext);\n        return msg;\n    });\n}\nexports.decryptSync = decryptSync;\nfunction serialize(opts) {\n    const ephemPublicKey = ecdsa_1.compress(opts.ephemPublicKey);\n    return helpers_1.concatBuffers(opts.iv, ephemPublicKey, opts.mac, opts.ciphertext);\n}\nexports.serialize = serialize;\nfunction deserialize(buf) {\n    const slice0 = constants_1.LENGTH_0;\n    const slice1 = slice0 + constants_1.IV_LENGTH;\n    const slice2 = slice1 + constants_1.PREFIXED_KEY_LENGTH;\n    const slice3 = slice2 + constants_1.MAC_LENGTH;\n    const slice4 = buf.length;\n    return {\n        iv: buf.slice(slice0, slice1),\n        ephemPublicKey: ecdsa_1.decompress(buf.slice(slice1, slice2)),\n        mac: buf.slice(slice2, slice3),\n        ciphertext: buf.slice(slice3, slice4),\n    };\n}\nexports.deserialize = deserialize;\n//# sourceMappingURL=ecies.js.map"]},"metadata":{},"sourceType":"script"}