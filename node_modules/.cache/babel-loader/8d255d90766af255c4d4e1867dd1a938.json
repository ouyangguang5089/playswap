{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\n\nfunction hasMnemonic(value) {\n  var mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\n\nexport var Wallet = /*#__PURE__*/function (_Signer) {\n  _inherits(Wallet, _Signer);\n\n  var _super = _createSuper(Wallet);\n\n  function Wallet(privateKey, provider) {\n    var _this;\n\n    _classCallCheck(this, Wallet);\n\n    logger.checkNew(this instanceof Wallet ? this.constructor : void 0, Wallet);\n    _this = _super.call(this);\n\n    if (isAccount(privateKey)) {\n      var signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n        return signingKey;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n\n      if (_this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n\n      if (hasMnemonic(privateKey)) {\n        var srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return {\n            phrase: srcMnemonic.phrase,\n            path: srcMnemonic.path || defaultPath,\n            locale: srcMnemonic.locale || \"en\"\n          };\n        });\n        var mnemonic = _this.mnemonic;\n        var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n        if (computeAddress(node.privateKey) !== _this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return null;\n        });\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return privateKey;\n        });\n      } else {\n        var _signingKey = new SigningKey(privateKey);\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return _signingKey;\n        });\n      }\n\n      defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n        return null;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n    }\n    /* istanbul ignore if */\n\n\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider || null);\n    return _this;\n  }\n\n  _createClass(Wallet, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new Wallet(this, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      var _this2 = this;\n\n      return resolveProperties(transaction).then(function (tx) {\n        if (tx.from != null) {\n          if (getAddress(tx.from) !== _this2.address) {\n            logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n          }\n\n          delete tx.from;\n        }\n\n        var signature = _this2._signingKey().signDigest(keccak256(serialize(tx)));\n\n        return serialize(tx, signature);\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return Promise.resolve(joinSignature(this._signingKey().signDigest(hashMessage(message))));\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options, progressCallback) {\n      if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n      }\n\n      if (progressCallback && typeof progressCallback !== \"function\") {\n        throw new Error(\"invalid callback\");\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n\n  }, {\n    key: \"mnemonic\",\n    get: function get() {\n      return this._mnemonic();\n    }\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this._signingKey().privateKey;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._signingKey().publicKey;\n    }\n  }], [{\n    key: \"createRandom\",\n    value: function createRandom(options) {\n      var entropy = randomBytes(16);\n\n      if (!options) {\n        options = {};\n      }\n\n      if (options.extraEntropy) {\n        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n      }\n\n      var mnemonic = entropyToMnemonic(entropy, options.locale);\n      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n  }, {\n    key: \"fromEncryptedJson\",\n    value: function fromEncryptedJson(json, password, progressCallback) {\n      return decryptJsonWallet(json, password, progressCallback).then(function (account) {\n        return new Wallet(account);\n      });\n    }\n  }, {\n    key: \"fromEncryptedJsonSync\",\n    value: function fromEncryptedJsonSync(json, password) {\n      return new Wallet(decryptJsonWalletSync(json, password));\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, path, wordlist) {\n      if (!path) {\n        path = defaultPath;\n      }\n\n      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n  }]);\n\n  return Wallet;\n}(Signer);\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        logger.checkNew(new.target, Wallet);\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return Promise.resolve(joinSignature(this._signingKey().signDigest(hashMessage(message))));\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}