{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider } from \"./base-provider\";\nimport { AlchemyProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    var match = network.match(/^(ws|http)s?:/i);\n\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n\n        case \"ws\":\n          return new WebSocketProvider(network);\n\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n\n  var n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider: FallbackProvider,\n    AlchemyProvider: AlchemyProvider,\n    CloudflareProvider: CloudflareProvider,\n    EtherscanProvider: EtherscanProvider,\n    InfuraProvider: InfuraProvider,\n    JsonRpcProvider: JsonRpcProvider,\n    NodesmithProvider: NodesmithProvider,\n    Web3Provider: Web3Provider,\n    IpcProvider: IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, UrlJsonRpcProvider ///////////////////////\n// Concreate Providers\n, FallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider ///////////////////////\n// Signer\n, JsonRpcSigner ///////////////////////\n// Functions\n, getDefaultProvider, getNetwork ///////////////////////\n// Objects\n, Formatter };","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"AAAA;;AAEA,SAOI,QAPJ,QAWO,kCAXP;AAaA,SAAS,UAAT,QAA2B,yBAA3B;AAGA,SAAS,YAAT,QAA6B,iBAA7B;AAEA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,kBAAT,QAAmC,uBAAnC;AACA,SAAS,iBAAT,QAAkC,sBAAlC;AACA,SAAS,gBAAT,QAAiC,qBAAjC;AACA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,cAAT,QAA+B,mBAA/B;AACA,SAAS,eAAT,EAA0B,aAA1B,QAA+C,qBAA/C;AACA,SAAS,iBAAT,QAAkC,sBAAlC;AACA,SAAS,qBAAT,EAAgC,kBAAhC,QAA0D,yBAA1D;AACA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,iBAAT,QAAkC,sBAAlC;AAGA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf,C,CAEA;AACA;;AAEA,SAAS,kBAAT,CAA4B,OAA5B,EAAwD,OAAxD,EAAqE;AACjE,MAAI,OAAO,IAAI,IAAf,EAAqB;AAAE,IAAA,OAAO,GAAG,WAAV;AAAwB,GADkB,CAGjE;;;AACA,MAAI,OAAO,OAAP,KAAoB,QAAxB,EAAkC;AAC9B;AAEA;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,gBAAd,CAAd;;AACA,QAAI,KAAJ,EAAW;AACP,cAAQ,KAAK,CAAC,CAAD,CAAb;AACI,aAAK,MAAL;AACI,iBAAO,IAAI,eAAJ,CAAoB,OAApB,CAAP;;AACJ,aAAK,IAAL;AACI,iBAAO,IAAI,iBAAJ,CAAsB,OAAtB,CAAP;;AACJ;AACI,UAAA,MAAM,CAAC,kBAAP,CAA0B,wBAA1B,EAAoD,SAApD,EAA+D,OAA/D;AANR;AAQH;AACJ;;AAED,MAAM,CAAC,GAAG,UAAU,CAAC,OAAD,CAApB;;AACA,MAAI,CAAC,CAAD,IAAM,CAAC,CAAC,CAAC,gBAAb,EAA+B;AAC3B,IAAA,MAAM,CAAC,UAAP,CAAkB,wCAAlB,EAA4D,MAAM,CAAC,MAAP,CAAc,aAA1E,EAAyF;AACrF,MAAA,SAAS,EAAE,oBAD0E;AAErF,MAAA,OAAO,EAAE;AAF4E,KAAzF;AAIH;;AAED,SAAO,CAAC,CAAC,gBAAF,CAAmB;AACtB,IAAA,gBAAgB,EAAhB,gBADsB;AAGtB,IAAA,eAAe,EAAf,eAHsB;AAItB,IAAA,kBAAkB,EAAlB,kBAJsB;AAKtB,IAAA,iBAAiB,EAAjB,iBALsB;AAMtB,IAAA,cAAc,EAAd,cANsB;AAOtB,IAAA,eAAe,EAAf,eAPsB;AAQtB,IAAA,iBAAiB,EAAjB,iBARsB;AAStB,IAAA,YAAY,EAAZ,YATsB;AAWtB,IAAA,WAAW,EAAX;AAXsB,GAAnB,EAYJ,OAZI,CAAP;AAaH,C,CAED;AACA;;;AAEA,SAEI;AACA,QAHJ,EAII,YAJJ,EAMI,kBANJ,CAQI;AACA;AATJ,EAWI,gBAXJ,EAaI,eAbJ,EAcI,kBAdJ,EAeI,iBAfJ,EAgBI,cAhBJ,EAiBI,eAjBJ,EAkBI,iBAlBJ,EAmBI,qBAnBJ,EAoBI,YApBJ,EAqBI,iBArBJ,EAuBI,WAvBJ,CA0BI;AACA;AA3BJ,EA6BI,aA7BJ,CAgCI;AACA;AAjCJ,EAmCI,kBAnCJ,EAoCI,UApCJ,CAuCI;AACA;AAxCJ,EA0CI,SA1CJ","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider } from \"./base-provider\";\nimport { AlchemyProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, UrlJsonRpcProvider, \n///////////////////////\n// Concreate Providers\nFallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, \n///////////////////////\n// Objects\nFormatter };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}