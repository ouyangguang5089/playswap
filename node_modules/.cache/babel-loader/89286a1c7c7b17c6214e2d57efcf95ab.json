{"ast":null,"code":"import{UNI}from'./../../constants/index';import{CurrencyAmount,ETHER,JSBI,Token,TokenAmount}from'@uniswap/sdk';import{useMemo}from'react';import ERC20_INTERFACE from'../../constants/abis/erc20';import{useAllTokens}from'../../hooks/Tokens';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{useSingleContractMultipleData,useMultipleContractSingleData}from'../multicall/hooks';import{useUserUnclaimedAmount}from'../claim/hooks';import{useTotalUniEarned}from'../stake/hooks';/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useETHBalances(uncheckedAddresses){var multicallContract=useMulticallContract();var addresses=useMemo(function(){return uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(function(a){return a!==false;}).sort():[];},[uncheckedAddresses]);var results=useSingleContractMultipleData(multicallContract,'getEthBalance',addresses.map(function(address){return[address];}));return useMemo(function(){return addresses.reduce(function(memo,address,i){var _results$i,_results$i$result;var value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value)memo[address]=CurrencyAmount.ether(JSBI.BigInt(value.toString()));return memo;},{});},[addresses,results]);}/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){var validatedTokens=useMemo(function(){var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(function(t){return isAddress(t===null||t===void 0?void 0:t.address)!==false;}))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);var validatedTokenAddresses=useMemo(function(){return validatedTokens.map(function(vt){return vt.address;});},[validatedTokens]);var balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',[address]);var anyLoading=useMemo(function(){return balances.some(function(callState){return callState.loading;});},[balances]);return[useMemo(function(){return address&&validatedTokens.length>0?validatedTokens.reduce(function(memo,token,i){var _balances$i,_balances$i$result;var value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];var amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=new TokenAmount(token,amount);}return memo;},{}):{};},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){var tokenBalances=useTokenBalances(account,[token]);if(!token)return undefined;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){var tokens=useMemo(function(){var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(function(currency){return currency instanceof Token;}))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);var tokenBalances=useTokenBalances(account,tokens);var containsETH=useMemo(function(){var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(function(currency){return currency===ETHER;}))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);var ethBalance=useETHBalances(containsETH?[account]:[]);return useMemo(function(){var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(function(currency){if(!account||!currency)return undefined;if(currency instanceof Token)return tokenBalances[currency.address];if(currency===ETHER)return ethBalance[account];return undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency){return useCurrencyBalances(account,[currency])[0];}// mimics useAllBalances\nexport function useAllTokenBalances(){var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var allTokens=useAllTokens();var allTokensArray=useMemo(function(){return Object.values(allTokens!==null&&allTokens!==void 0?allTokens:{});},[allTokens]);var balances=useTokenBalances(account!==null&&account!==void 0?account:undefined,allTokensArray);return balances!==null&&balances!==void 0?balances:{};}// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(){var _uniBalance$raw,_uniUnclaimed$raw,_uniUnHarvested$raw;var _useActiveWeb3React2=useActiveWeb3React(),account=_useActiveWeb3React2.account,chainId=_useActiveWeb3React2.chainId;var uni=chainId?UNI[chainId]:undefined;var uniBalance=useTokenBalance(account!==null&&account!==void 0?account:undefined,uni);var uniUnclaimed=useUserUnclaimedAmount(account);var uniUnHarvested=useTotalUniEarned();if(!uni)return undefined;return new TokenAmount(uni,JSBI.add(JSBI.add((_uniBalance$raw=uniBalance===null||uniBalance===void 0?void 0:uniBalance.raw)!==null&&_uniBalance$raw!==void 0?_uniBalance$raw:JSBI.BigInt(0),(_uniUnclaimed$raw=uniUnclaimed===null||uniUnclaimed===void 0?void 0:uniUnclaimed.raw)!==null&&_uniUnclaimed$raw!==void 0?_uniUnclaimed$raw:JSBI.BigInt(0)),(_uniUnHarvested$raw=uniUnHarvested===null||uniUnHarvested===void 0?void 0:uniUnHarvested.raw)!==null&&_uniUnHarvested$raw!==void 0?_uniUnHarvested$raw:JSBI.BigInt(0)));}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/wallet/hooks.ts"],"names":["UNI","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useMemo","ERC20_INTERFACE","useAllTokens","useActiveWeb3React","useMulticallContract","isAddress","useSingleContractMultipleData","useMultipleContractSingleData","useUserUnclaimedAmount","useTotalUniEarned","useETHBalances","uncheckedAddresses","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","ether","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","containsETH","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values","useAggregateUniBalance","chainId","uni","uniBalance","uniUnclaimed","uniUnHarvested","add","raw"],"mappings":"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","sourcesContent":["import { UNI } from './../../constants/index'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\nimport { useUserUnclaimedAmount } from '../claim/hooks'\nimport { useTotalUniEarned } from '../stake/hooks'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHBalances(\n  uncheckedAddresses?: (string | undefined)[]\n): { [address: string]: CurrencyAmount | undefined } {\n  const multicallContract = useMulticallContract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map(address => [address])\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, results]\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token.address] = new TokenAmount(token, amount)\n              }\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: TokenAmount | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount | undefined)[] {\n  const tokens = useMemo(() => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [], [\n    currencies\n  ])\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency === ETHER) ?? false, [currencies])\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map(currency => {\n        if (!account || !currency) return undefined\n        if (currency instanceof Token) return tokenBalances[currency.address]\n        if (currency === ETHER) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\n// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(): TokenAmount | undefined {\n  const { account, chainId } = useActiveWeb3React()\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const uniBalance: TokenAmount | undefined = useTokenBalance(account ?? undefined, uni)\n  const uniUnclaimed: TokenAmount | undefined = useUserUnclaimedAmount(account)\n  const uniUnHarvested: TokenAmount | undefined = useTotalUniEarned()\n\n  if (!uni) return undefined\n\n  return new TokenAmount(\n    uni,\n    JSBI.add(\n      JSBI.add(uniBalance?.raw ?? JSBI.BigInt(0), uniUnclaimed?.raw ?? JSBI.BigInt(0)),\n      uniUnHarvested?.raw ?? JSBI.BigInt(0)\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}