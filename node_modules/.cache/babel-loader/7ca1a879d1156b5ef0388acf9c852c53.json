{"ast":null,"code":"'use strict';\n\nmodule.exports = factory;\n/* Factory to de-escape a value, based on a list at `key`\n * in `ctx`. */\n\nfunction factory(ctx, key) {\n  return unescape;\n  /* De-escape a string using the expression at `key`\n   * in `ctx`. */\n\n  function unescape(value) {\n    var prev = 0;\n    var index = value.indexOf('\\\\');\n    var escape = ctx[key];\n    var queue = [];\n    var character;\n\n    while (index !== -1) {\n      queue.push(value.slice(prev, index));\n      prev = index + 1;\n      character = value.charAt(prev);\n      /* If the following character is not a valid escape,\n       * add the slash. */\n\n      if (!character || escape.indexOf(character) === -1) {\n        queue.push('\\\\');\n      }\n\n      index = value.indexOf('\\\\', prev);\n    }\n\n    queue.push(value.slice(prev));\n    return queue.join('');\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/unescape.js"],"names":["module","exports","factory","ctx","key","unescape","value","prev","index","indexOf","escape","queue","character","push","slice","charAt","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;;AAEA,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB,SAAOC,QAAP;AAEA;;;AAEA,WAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,IAAd,CAAZ;AACA,QAAIC,MAAM,GAAGP,GAAG,CAACC,GAAD,CAAhB;AACA,QAAIO,KAAK,GAAG,EAAZ;AACA,QAAIC,SAAJ;;AAEA,WAAOJ,KAAK,KAAK,CAAC,CAAlB,EAAqB;AACnBG,MAAAA,KAAK,CAACE,IAAN,CAAWP,KAAK,CAACQ,KAAN,CAAYP,IAAZ,EAAkBC,KAAlB,CAAX;AACAD,MAAAA,IAAI,GAAGC,KAAK,GAAG,CAAf;AACAI,MAAAA,SAAS,GAAGN,KAAK,CAACS,MAAN,CAAaR,IAAb,CAAZ;AAEA;;;AAEA,UAAI,CAACK,SAAD,IAAcF,MAAM,CAACD,OAAP,CAAeG,SAAf,MAA8B,CAAC,CAAjD,EAAoD;AAClDD,QAAAA,KAAK,CAACE,IAAN,CAAW,IAAX;AACD;;AAEDL,MAAAA,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoBF,IAApB,CAAR;AACD;;AAEDI,IAAAA,KAAK,CAACE,IAAN,CAAWP,KAAK,CAACQ,KAAN,CAAYP,IAAZ,CAAX;AAEA,WAAOI,KAAK,CAACK,IAAN,CAAW,EAAX,CAAP;AACD;AACF","sourcesContent":["'use strict';\n\nmodule.exports = factory;\n\n/* Factory to de-escape a value, based on a list at `key`\n * in `ctx`. */\nfunction factory(ctx, key) {\n  return unescape;\n\n  /* De-escape a string using the expression at `key`\n   * in `ctx`. */\n  function unescape(value) {\n    var prev = 0;\n    var index = value.indexOf('\\\\');\n    var escape = ctx[key];\n    var queue = [];\n    var character;\n\n    while (index !== -1) {\n      queue.push(value.slice(prev, index));\n      prev = index + 1;\n      character = value.charAt(prev);\n\n      /* If the following character is not a valid escape,\n       * add the slash. */\n      if (!character || escape.indexOf(character) === -1) {\n        queue.push('\\\\');\n      }\n\n      index = value.indexOf('\\\\', prev);\n    }\n\n    queue.push(value.slice(prev));\n\n    return queue.join('');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}