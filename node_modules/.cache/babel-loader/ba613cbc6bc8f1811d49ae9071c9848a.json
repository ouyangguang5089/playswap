{"ast":null,"code":"import{createAction}from'@reduxjs/toolkit';var ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;var LOWER_HEX_REGEX=/^0x[a-f0-9]*$/;export function toCallKey(call){if(!ADDRESS_REGEX.test(call.address)){throw new Error(\"Invalid address: \".concat(call.address));}if(!LOWER_HEX_REGEX.test(call.callData)){throw new Error(\"Invalid hex: \".concat(call.callData));}return\"\".concat(call.address,\"-\").concat(call.callData);}export function parseCallKey(callKey){var pcs=callKey.split('-');if(pcs.length!==2){throw new Error(\"Invalid call key: \".concat(callKey));}return{address:pcs[0],callData:pcs[1]};}export var addMulticallListeners=createAction('multicall/addMulticallListeners');export var removeMulticallListeners=createAction('multicall/removeMulticallListeners');export var fetchingMulticallResults=createAction('multicall/fetchingMulticallResults');export var errorFetchingMulticallResults=createAction('multicall/errorFetchingMulticallResults');export var updateMulticallResults=createAction('multicall/updateMulticallResults');","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/multicall/actions.ts"],"names":["createAction","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","call","test","address","Error","callData","parseCallKey","callKey","pcs","split","length","addMulticallListeners","removeMulticallListeners","fetchingMulticallResults","errorFetchingMulticallResults","updateMulticallResults"],"mappings":"AAAA,OAASA,YAAT,KAA6B,kBAA7B,CAOA,GAAMC,CAAAA,aAAa,CAAG,qBAAtB,CACA,GAAMC,CAAAA,eAAe,CAAG,eAAxB,CACA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,IAAnB,CAAuC,CAC5C,GAAI,CAACH,aAAa,CAACI,IAAd,CAAmBD,IAAI,CAACE,OAAxB,CAAL,CAAuC,CACrC,KAAM,IAAIC,CAAAA,KAAJ,4BAA8BH,IAAI,CAACE,OAAnC,EAAN,CACD,CACD,GAAI,CAACJ,eAAe,CAACG,IAAhB,CAAqBD,IAAI,CAACI,QAA1B,CAAL,CAA0C,CACxC,KAAM,IAAID,CAAAA,KAAJ,wBAA0BH,IAAI,CAACI,QAA/B,EAAN,CACD,CACD,gBAAUJ,IAAI,CAACE,OAAf,aAA0BF,IAAI,CAACI,QAA/B,EACD,CAED,MAAO,SAASC,CAAAA,YAAT,CAAsBC,OAAtB,CAA6C,CAClD,GAAMC,CAAAA,GAAG,CAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAZ,CACA,GAAID,GAAG,CAACE,MAAJ,GAAe,CAAnB,CAAsB,CACpB,KAAM,IAAIN,CAAAA,KAAJ,6BAA+BG,OAA/B,EAAN,CACD,CACD,MAAO,CACLJ,OAAO,CAAEK,GAAG,CAAC,CAAD,CADP,CAELH,QAAQ,CAAEG,GAAG,CAAC,CAAD,CAFR,CAAP,CAID,CAOD,MAAO,IAAMG,CAAAA,qBAAqB,CAAGd,YAAY,CAC/C,iCAD+C,CAA1C,CAGP,MAAO,IAAMe,CAAAA,wBAAwB,CAAGf,YAAY,CAClD,oCADkD,CAA7C,CAGP,MAAO,IAAMgB,CAAAA,wBAAwB,CAAGhB,YAAY,CAClD,oCADkD,CAA7C,CAGP,MAAO,IAAMiB,CAAAA,6BAA6B,CAAGjB,YAAY,CAItD,yCAJsD,CAAlD,CAKP,MAAO,IAAMkB,CAAAA,sBAAsB,CAAGlB,YAAY,CAM/C,kCAN+C,CAA3C","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\nexport interface Call {\n  address: string\n  callData: string\n}\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/\nexport function toCallKey(call: Call): string {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(`Invalid address: ${call.address}`)\n  }\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(`Invalid hex: ${call.callData}`)\n  }\n  return `${call.address}-${call.callData}`\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (pcs.length !== 2) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1]\n  }\n}\n\nexport interface ListenerOptions {\n  // how often this data should be fetched, by default 1\n  readonly blocksPerFetch?: number\n}\n\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/addMulticallListeners'\n)\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/removeMulticallListeners'\n)\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\n  'multicall/fetchingMulticallResults'\n)\nexport const errorFetchingMulticallResults = createAction<{\n  chainId: number\n  calls: Call[]\n  fetchingBlockNumber: number\n}>('multicall/errorFetchingMulticallResults')\nexport const updateMulticallResults = createAction<{\n  chainId: number\n  blockNumber: number\n  results: {\n    [callKey: string]: string | null\n  }\n}>('multicall/updateMulticallResults')\n"]},"metadata":{},"sourceType":"module"}