{"ast":null,"code":"import React, { forwardRef, useEffect, useRef, useCallback } from 'react';\nimport Portal from '@reach/portal';\nimport { checkStyles, useForkedRef, wrapEvent, getOwnerDocument, noop, isString } from '@reach/utils';\nimport FocusLock from 'react-focus-lock';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar overlayPropTypes = {\n  allowPinchZoom: PropTypes.bool,\n  dangerouslyBypassFocusLock: PropTypes.bool,\n  dangerouslyBypassScrollLock: PropTypes.bool,\n  // TODO:\n  initialFocusRef: function initialFocusRef() {\n    return null;\n  },\n  onDismiss: PropTypes.func\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * DialogOverlay\r\n *\r\n * Low-level component if you need more control over the styles or rendering of\r\n * the dialog overlay.\r\n *\r\n * Note: You must render a `DialogContent` inside.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay\r\n */\n\nvar DialogOverlay = /*#__PURE__*/forwardRef(function DialogOverlay(_ref, forwardedRef) {\n  var _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? true : _ref$isOpen,\n      props = _objectWithoutPropertiesLoose(_ref, [\"isOpen\"]);\n\n  useEffect(function () {\n    return checkStyles(\"dialog\");\n  }, []); // We want to ignore the immediate focus of a tooltip so it doesn't pop\n  // up again when the menu closes, only pops up when focus returns again\n  // to the tooltip (like native OS tooltips).\n\n  useEffect(function () {\n    if (isOpen) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n    } else {\n      window.requestAnimationFrame(function () {\n        // Wait a frame so that this doesn't fire before tooltip does\n        // @ts-ignore\n        window.__REACH_DISABLE_TOOLTIPS = false;\n      });\n    }\n  }, [isOpen]);\n  return isOpen ? React.createElement(Portal, {\n    \"data-reach-dialog-wrapper\": \"\"\n  }, React.createElement(DialogInner, Object.assign({\n    ref: forwardedRef\n  }, props))) : null;\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = /*#__PURE__*/_extends({}, overlayPropTypes, {\n    isOpen: PropTypes.bool\n  });\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * DialogInner\r\n */\n\n\nvar DialogInner = /*#__PURE__*/forwardRef(function DialogInner(_ref2, forwardedRef) {\n  var allowPinchZoom = _ref2.allowPinchZoom,\n      _ref2$dangerouslyBypa = _ref2.dangerouslyBypassFocusLock,\n      dangerouslyBypassFocusLock = _ref2$dangerouslyBypa === void 0 ? false : _ref2$dangerouslyBypa,\n      _ref2$dangerouslyBypa2 = _ref2.dangerouslyBypassScrollLock,\n      dangerouslyBypassScrollLock = _ref2$dangerouslyBypa2 === void 0 ? false : _ref2$dangerouslyBypa2,\n      initialFocusRef = _ref2.initialFocusRef,\n      onClick = _ref2.onClick,\n      _ref2$onDismiss = _ref2.onDismiss,\n      onDismiss = _ref2$onDismiss === void 0 ? noop : _ref2$onDismiss,\n      onKeyDown = _ref2.onKeyDown,\n      onMouseDown = _ref2.onMouseDown,\n      _ref2$unstable_lockFo = _ref2.unstable_lockFocusAcrossFrames,\n      unstable_lockFocusAcrossFrames = _ref2$unstable_lockFo === void 0 ? true : _ref2$unstable_lockFo,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"allowPinchZoom\", \"dangerouslyBypassFocusLock\", \"dangerouslyBypassScrollLock\", \"initialFocusRef\", \"onClick\", \"onDismiss\", \"onKeyDown\", \"onMouseDown\", \"unstable_lockFocusAcrossFrames\"]);\n\n  var mouseDownTarget = useRef(null);\n  var overlayNode = useRef(null);\n  var ref = useForkedRef(overlayNode, forwardedRef);\n  var activateFocusLock = useCallback(function () {\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n  }, [initialFocusRef]);\n\n  function handleClick(event) {\n    if (mouseDownTarget.current === event.target) {\n      event.stopPropagation();\n      onDismiss(event);\n    }\n  }\n\n  function handleKeyDown(event) {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      onDismiss(event);\n    }\n  }\n\n  function handleMouseDown(event) {\n    mouseDownTarget.current = event.target;\n  }\n\n  useEffect(function () {\n    return overlayNode.current ? createAriaHider(overlayNode.current) : void null;\n  }, []);\n  return React.createElement(FocusLock, {\n    autoFocus: true,\n    returnFocus: true,\n    onActivation: activateFocusLock,\n    disabled: dangerouslyBypassFocusLock,\n    crossFrame: unstable_lockFocusAcrossFrames\n  }, React.createElement(RemoveScroll, {\n    allowPinchZoom: allowPinchZoom,\n    enabled: !dangerouslyBypassScrollLock\n  }, React.createElement(\"div\", Object.assign({}, props, {\n    ref: ref,\n    \"data-reach-dialog-overlay\": \"\",\n\n    /*\r\n     * We can ignore the `no-static-element-interactions` warning here\r\n     * because our overlay is only designed to capture any outside\r\n     * clicks, not to serve as a clickable element itself.\r\n     */\n    onClick: wrapEvent(onClick, handleClick),\n    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown)\n  }))));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = /*#__PURE__*/_extends({}, overlayPropTypes);\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * DialogContent\r\n *\r\n * Low-level component if you need more control over the styles or rendering of\r\n * the dialog content.\r\n *\r\n * Note: Must be a child of `DialogOverlay`.\r\n *\r\n * Note: You only need to use this when you are also styling `DialogOverlay`,\r\n * otherwise you can use the high-level `Dialog` component and pass the props\r\n * to it. Any props passed to `Dialog` component (besides `isOpen` and\r\n * `onDismiss`) will be spread onto `DialogContent`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent\r\n */\n\n\nvar DialogContent = /*#__PURE__*/forwardRef(function DialogContent(_ref3, forwardedRef) {\n  var onClick = _ref3.onClick,\n      onKeyDown = _ref3.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"onClick\", \"onKeyDown\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    \"aria-modal\": \"true\",\n    role: \"dialog\",\n    tabIndex: -1\n  }, props, {\n    ref: forwardedRef,\n    \"data-reach-dialog-content\": \"\",\n    onClick: wrapEvent(onClick, function (event) {\n      event.stopPropagation();\n    })\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  DialogContent.displayName = \"DialogContent\";\n  DialogContent.propTypes = {\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Dialog\r\n *\r\n * High-level component to render a modal dialog window over the top of the page\r\n * (or another dialog).\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialog\r\n */\n\n\nvar Dialog = /*#__PURE__*/forwardRef(function Dialog(_ref4, forwardedRef) {\n  var _ref4$allowPinchZoom = _ref4.allowPinchZoom,\n      allowPinchZoom = _ref4$allowPinchZoom === void 0 ? false : _ref4$allowPinchZoom,\n      initialFocusRef = _ref4.initialFocusRef,\n      isOpen = _ref4.isOpen,\n      _ref4$onDismiss = _ref4.onDismiss,\n      onDismiss = _ref4$onDismiss === void 0 ? noop : _ref4$onDismiss,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"allowPinchZoom\", \"initialFocusRef\", \"isOpen\", \"onDismiss\"]);\n\n  return React.createElement(DialogOverlay, {\n    allowPinchZoom: allowPinchZoom,\n    initialFocusRef: initialFocusRef,\n    isOpen: isOpen,\n    onDismiss: onDismiss\n  }, React.createElement(DialogContent, Object.assign({\n    ref: forwardedRef\n  }, props)));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Dialog.displayName = \"Dialog\";\n  Dialog.propTypes = {\n    isOpen: PropTypes.bool,\n    onDismiss: PropTypes.func,\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType\n  };\n}\n\nfunction createAriaHider(dialogNode) {\n  var originalValues = [];\n  var rootNodes = [];\n  var ownerDocument = getOwnerDocument(dialogNode) || document;\n\n  if (!dialogNode) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"A ref has not yet been attached to a dialog node when attempting to call `createAriaHider`.\");\n    }\n\n    return noop;\n  }\n\n  Array.prototype.forEach.call(ownerDocument.querySelectorAll(\"body > *\"), function (node) {\n    var _dialogNode$parentNod, _dialogNode$parentNod2;\n\n    var portalNode = (_dialogNode$parentNod = dialogNode.parentNode) === null || _dialogNode$parentNod === void 0 ? void 0 : (_dialogNode$parentNod2 = _dialogNode$parentNod.parentNode) === null || _dialogNode$parentNod2 === void 0 ? void 0 : _dialogNode$parentNod2.parentNode;\n\n    if (node === portalNode) {\n      return;\n    }\n\n    var attr = node.getAttribute(\"aria-hidden\");\n    var alreadyHidden = attr !== null && attr !== \"false\";\n\n    if (alreadyHidden) {\n      return;\n    }\n\n    originalValues.push(attr);\n    rootNodes.push(node);\n    node.setAttribute(\"aria-hidden\", \"true\");\n  });\n  return function () {\n    rootNodes.forEach(function (node, index) {\n      var originalValue = originalValues[index];\n\n      if (originalValue === null) {\n        node.removeAttribute(\"aria-hidden\");\n      } else {\n        node.setAttribute(\"aria-hidden\", originalValue);\n      }\n    });\n  };\n}\n\nfunction ariaLabelType(props, propName, compName, location, propFullName) {\n  var details = \"\\nSee https://www.w3.org/TR/wai-aria/#aria-label for details.\";\n\n  if (!props[\"aria-label\"] && !props[\"aria-labelledby\"]) {\n    return new Error(\"A <\" + compName + \"> must have either an `aria-label` or `aria-labelledby` prop.\\n      \" + details);\n  }\n\n  if (props[\"aria-label\"] && props[\"aria-labelledby\"]) {\n    return new Error(\"You provided both `aria-label` and `aria-labelledby` props to a <\" + compName + \">. If the a label for this component is visible on the screen, that label's component should be given a unique ID prop, and that ID should be passed as the `aria-labelledby` prop into <\" + compName + \">. If the label cannot be determined programmatically from the content of the element, an alternative label should be provided as the `aria-label` prop, which will be used as an `aria-label` on the HTML tag.\" + details);\n  } else if (props[propName] != null && !isString(props[propName])) {\n    return new Error(\"Invalid prop `\" + propName + \"` supplied to `\" + compName + \"`. Expected `string`, received `\" + (Array.isArray(propFullName) ? \"array\" : typeof propFullName) + \"`.\");\n  }\n\n  return null;\n}\n\nexport default Dialog;\nexport { Dialog, DialogContent, DialogOverlay };","map":{"version":3,"sources":["../src/index.tsx"],"names":["overlayPropTypes","allowPinchZoom","PropTypes","dangerouslyBypassFocusLock","dangerouslyBypassScrollLock","initialFocusRef","onDismiss","func","DialogOverlay","forwardRef","isOpen","props","useEffect","checkStyles","window","React","ref","forwardedRef","bool","DialogInner","onClick","noop","onKeyDown","onMouseDown","unstable_lockFocusAcrossFrames","mouseDownTarget","useRef","overlayNode","useForkedRef","activateFocusLock","useCallback","event","createAriaHider","autoFocus","returnFocus","onActivation","disabled","crossFrame","enabled","wrapEvent","DialogContent","role","tabIndex","ariaLabelType","Dialog","originalValues","rootNodes","ownerDocument","getOwnerDocument","console","Array","portalNode","dialogNode","node","attr","alreadyHidden","originalValue","details","isString"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/**\n * Welcome to @reach/dialog!\n *\n * An accessible dialog or \"modal\" window.\n *\n * @see Docs     https://reacttraining.com/reach-ui/dialog\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/dialog\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\n */\n\nimport React, { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport Portal from \"@reach/portal\";\nimport {\n  checkStyles,\n  getOwnerDocument,\n  isString,\n  noop,\n  useForkedRef,\n  wrapEvent,\n} from \"@reach/utils\";\nimport FocusLock from \"react-focus-lock\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport PropTypes from \"prop-types\";\n\nconst overlayPropTypes = {\n  allowPinchZoom: PropTypes.bool,\n  dangerouslyBypassFocusLock: PropTypes.bool,\n  dangerouslyBypassScrollLock: PropTypes.bool,\n  // TODO:\n  initialFocusRef: () => null,\n  onDismiss: PropTypes.func,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogOverlay\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog overlay.\n *\n * Note: You must render a `DialogContent` inside.\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay\n */\nexport const DialogOverlay = forwardRef<HTMLDivElement, DialogOverlayProps>(\n  function DialogOverlay({ isOpen = true, ...props }, forwardedRef) {\n    useEffect(() => checkStyles(\"dialog\"), []);\n\n    // We want to ignore the immediate focus of a tooltip so it doesn't pop\n    // up again when the menu closes, only pops up when focus returns again\n    // to the tooltip (like native OS tooltips).\n    useEffect(() => {\n      if (isOpen) {\n        // @ts-ignore\n        window.__REACH_DISABLE_TOOLTIPS = true;\n      } else {\n        window.requestAnimationFrame(() => {\n          // Wait a frame so that this doesn't fire before tooltip does\n          // @ts-ignore\n          window.__REACH_DISABLE_TOOLTIPS = false;\n        });\n      }\n    }, [isOpen]);\n\n    return isOpen ? (\n      <Portal data-reach-dialog-wrapper=\"\">\n        <DialogInner ref={forwardedRef} {...props} />\n      </Portal>\n    ) : null;\n  }\n);\n\nif (__DEV__) {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = {\n    ...overlayPropTypes,\n    isOpen: PropTypes.bool,\n  };\n}\n\nexport type DialogOverlayProps = DialogProps & {\n  /**\n   * By default the dialog locks the focus inside it. Normally this is what you\n   * want. This prop is provided so that this feature can be disabled. This,\n   * however, is strongly discouraged.\n   *\n   * The reason it is provided is not to disable the focus lock entirely.\n   * Rather, there are certain situations where you may need more control on how\n   * the focus lock works. This should be complemented by setting up a focus\n   * lock yourself that would allow more flexibility for your specific use case.\n   *\n   * If you do set this prop to `true`, make sure you set up your own\n   * `FocusLock` component. You can likely use\n   * `react-focus-lock`, which is what Reach uses internally by default. It has\n   * various settings to allow more customization, but it takes care of a lot of\n   * hard work that you probably don't want or need to do.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-dangerouslybypassfocuslock\n   * @see https://github.com/theKashey/react-focus-lock\n   * @see https://github.com/reach/reach-ui/issues/615\n   */\n  dangerouslyBypassFocusLock?: boolean;\n  /**\n   * By default the dialog locks scrolling with `react-remove-scroll`, which\n   * also injecs some styles on the body element to remove the scrollbar while\n   * maintaining its gap to prevent jank when the dialog's open state is\n   * toggled. This is almost always what you want in a dialog, but in some cases\n   * you may have the need to customize this behavior further.\n   *\n   * This prop will disable `react-remove-scroll` and allow you to compose your\n   * own scroll lock component to meet your needs. Like the\n   * `dangerouslyBypassFocusLock` prop, this is generally discouraged and should\n   * only be used if a proper fallback for managing scroll behavior is provided.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-dangerouslybypassscrolllock\n   * @see https://github.com/theKashey/react-remove-scroll\n   */\n  dangerouslyBypassScrollLock?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogInner\n */\nconst DialogInner = forwardRef<HTMLDivElement, DialogOverlayProps>(\n  function DialogInner(\n    {\n      allowPinchZoom,\n      dangerouslyBypassFocusLock = false,\n      dangerouslyBypassScrollLock = false,\n      initialFocusRef,\n      onClick,\n      onDismiss = noop,\n      onKeyDown,\n      onMouseDown,\n      unstable_lockFocusAcrossFrames = true,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const mouseDownTarget = useRef<EventTarget | null>(null);\n    const overlayNode = useRef<HTMLDivElement | null>(null);\n    const ref = useForkedRef(overlayNode, forwardedRef);\n\n    const activateFocusLock = useCallback(() => {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n    }, [initialFocusRef]);\n\n    function handleClick(event: React.MouseEvent) {\n      if (mouseDownTarget.current === event.target) {\n        event.stopPropagation();\n        onDismiss(event);\n      }\n    }\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        event.stopPropagation();\n        onDismiss(event);\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      mouseDownTarget.current = event.target;\n    }\n\n    useEffect(\n      () =>\n        overlayNode.current ? createAriaHider(overlayNode.current) : void null,\n      []\n    );\n\n    return (\n      <FocusLock\n        autoFocus\n        returnFocus\n        onActivation={activateFocusLock}\n        disabled={dangerouslyBypassFocusLock}\n        crossFrame={unstable_lockFocusAcrossFrames}\n      >\n        <RemoveScroll\n          allowPinchZoom={allowPinchZoom}\n          enabled={!dangerouslyBypassScrollLock}\n        >\n          <div\n            {...props}\n            ref={ref}\n            data-reach-dialog-overlay=\"\"\n            /*\n             * We can ignore the `no-static-element-interactions` warning here\n             * because our overlay is only designed to capture any outside\n             * clicks, not to serve as a clickable element itself.\n             */\n            onClick={wrapEvent(onClick, handleClick)}\n            onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n            onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n          />\n        </RemoveScroll>\n      </FocusLock>\n    );\n  }\n);\n\nif (__DEV__) {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = {\n    ...overlayPropTypes,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogContent\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog content.\n *\n * Note: Must be a child of `DialogOverlay`.\n *\n * Note: You only need to use this when you are also styling `DialogOverlay`,\n * otherwise you can use the high-level `Dialog` component and pass the props\n * to it. Any props passed to `Dialog` component (besides `isOpen` and\n * `onDismiss`) will be spread onto `DialogContent`.\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent\n */\nexport const DialogContent = forwardRef<HTMLDivElement, DialogContentProps>(\n  function DialogContent({ onClick, onKeyDown, ...props }, forwardedRef) {\n    return (\n      <div\n        aria-modal=\"true\"\n        role=\"dialog\"\n        tabIndex={-1}\n        {...props}\n        ref={forwardedRef}\n        data-reach-dialog-content=\"\"\n        onClick={wrapEvent(onClick, (event) => {\n          event.stopPropagation();\n        })}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-props\n */\nexport type DialogContentProps = {\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-children\n   */\n  children?: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  DialogContent.displayName = \"DialogContent\";\n  DialogContent.propTypes = {\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Dialog\n *\n * High-level component to render a modal dialog window over the top of the page\n * (or another dialog).\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialog\n */\nexport const Dialog = forwardRef<HTMLDivElement, DialogProps>(function Dialog(\n  {\n    allowPinchZoom = false,\n    initialFocusRef,\n    isOpen,\n    onDismiss = noop,\n    ...props\n  },\n  forwardedRef\n) {\n  return (\n    <DialogOverlay\n      allowPinchZoom={allowPinchZoom}\n      initialFocusRef={initialFocusRef}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <DialogContent ref={forwardedRef} {...props} />\n    </DialogOverlay>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-props\n */\nexport type DialogProps = {\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-allowpinchzoom\n   */\n  allowPinchZoom?: boolean;\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-children\n   */\n  children?: React.ReactNode;\n\n  /**\n   * By default the first focusable element will receive focus when the dialog\n   * opens but you can provide a ref to focus instead.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-initialfocusref\n   */\n  initialFocusRef?: React.RefObject<any>;\n  /**\n   * Controls whether or not the dialog is open.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-isopen\n   */\n  isOpen?: boolean;\n  /**\n   * This function is called whenever the user hits \"Escape\" or clicks outside\n   * the dialog. _It's important to close the dialog `onDismiss`_.\n   *\n   * The only time you shouldn't close the dialog on dismiss is when the dialog\n   * requires a choice and none of them are \"cancel\". For example, perhaps two\n   * records need to be merged and the user needs to pick the surviving record.\n   * Neither choice is less destructive than the other, so in these cases you\n   * may want to alert the user they need to a make a choice on dismiss instead\n   * of closing the dialog.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-ondismiss\n   */\n  onDismiss?: (event?: React.SyntheticEvent) => void;\n  /**\n   * By default, React Focus Lock prevents focus from being moved outside of the\n   * locked element even if the thing trying to take focus is in another frame.\n   * Normally this is what you want, as an iframe is typically going to be a\n   * part of your page content. But in some situations, like when using Code\n   * Sandbox, you can't use any of the controls or the editor in the sandbox\n   * while dialog is open because of the focus lock.\n   *\n   * This prop may have some negative side effects and unintended consequences,\n   * and it opens questions about how we might distinguish frames that *should*\n   * steal focus from those that shouldn't. Perhaps it's best for app devs to\n   * decide, and if they use this prop we should advise them to imperatively\n   * assign a -1 tabIndex to other iframes that are a part of the page content\n   * when the dialog is open.\n   *\n   * https://github.com/reach/reach-ui/issues/536\n   */\n  unstable_lockFocusAcrossFrames?: boolean;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  Dialog.displayName = \"Dialog\";\n  Dialog.propTypes = {\n    isOpen: PropTypes.bool,\n    onDismiss: PropTypes.func,\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType,\n  };\n}\n\nexport default Dialog;\n\n////////////////////////////////////////////////////////////////////////////////\nfunction createAriaHider(dialogNode: HTMLElement) {\n  let originalValues: any[] = [];\n  let rootNodes: HTMLElement[] = [];\n  let ownerDocument = getOwnerDocument(dialogNode) || document;\n\n  if (!dialogNode) {\n    if (__DEV__) {\n      console.warn(\n        \"A ref has not yet been attached to a dialog node when attempting to call `createAriaHider`.\"\n      );\n    }\n    return noop;\n  }\n\n  Array.prototype.forEach.call(\n    ownerDocument.querySelectorAll(\"body > *\"),\n    (node) => {\n      const portalNode = dialogNode.parentNode?.parentNode?.parentNode;\n      if (node === portalNode) {\n        return;\n      }\n      let attr = node.getAttribute(\"aria-hidden\");\n      let alreadyHidden = attr !== null && attr !== \"false\";\n      if (alreadyHidden) {\n        return;\n      }\n      originalValues.push(attr);\n      rootNodes.push(node);\n      node.setAttribute(\"aria-hidden\", \"true\");\n    }\n  );\n\n  return () => {\n    rootNodes.forEach((node, index) => {\n      let originalValue = originalValues[index];\n      if (originalValue === null) {\n        node.removeAttribute(\"aria-hidden\");\n      } else {\n        node.setAttribute(\"aria-hidden\", originalValue);\n      }\n    });\n  };\n}\n\nfunction ariaLabelType(\n  props: { [key: string]: any },\n  propName: string,\n  compName: string,\n  location: string,\n  propFullName: string\n) {\n  const details =\n    \"\\nSee https://www.w3.org/TR/wai-aria/#aria-label for details.\";\n  if (!props[\"aria-label\"] && !props[\"aria-labelledby\"]) {\n    return new Error(\n      `A <${compName}> must have either an \\`aria-label\\` or \\`aria-labelledby\\` prop.\n      ${details}`\n    );\n  }\n  if (props[\"aria-label\"] && props[\"aria-labelledby\"]) {\n    return new Error(\n      \"You provided both `aria-label` and `aria-labelledby` props to a <\" +\n        compName +\n        \">. If the a label for this component is visible on the screen, that label's component should be given a unique ID prop, and that ID should be passed as the `aria-labelledby` prop into <\" +\n        compName +\n        \">. If the label cannot be determined programmatically from the content of the element, an alternative label should be provided as the `aria-label` prop, which will be used as an `aria-label` on the HTML tag.\" +\n        details\n    );\n  } else if (props[propName] != null && !isString(props[propName])) {\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`string\\`, received \\`${\n        Array.isArray(propFullName) ? \"array\" : typeof propFullName\n      }\\`.`\n    );\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}