{"ast":null,"code":"import{JSBI,TokenAmount}from'@uniswap/sdk';import{STAKING_GENESIS}from'../state/stake/hooks';var STAKING_END=STAKING_GENESIS+60*60*24*60;var TREASURY_VESTING_GENESIS=1600387200;// 30 days\nvar TREASURY_VESTING_CLIFF=60*60*24*30;var ONE_YEAR=60*60*24*365;var TREASURY_BEGIN_YEAR_1=TREASURY_VESTING_GENESIS;var TREASURY_CLIFF_YEAR_1=TREASURY_BEGIN_YEAR_1+TREASURY_VESTING_CLIFF;var TREASURY_END_YEAR_1=TREASURY_BEGIN_YEAR_1+ONE_YEAR;var TREASURY_BEGIN_YEAR_2=TREASURY_END_YEAR_1;var TREASURY_END_YEAR_2=TREASURY_BEGIN_YEAR_2+ONE_YEAR;var TREASURY_BEGIN_YEAR_3=TREASURY_END_YEAR_2;var TREASURY_END_YEAR_3=TREASURY_BEGIN_YEAR_3+ONE_YEAR;var TREASURY_BEGIN_YEAR_4=TREASURY_END_YEAR_3;var TREASURY_END_YEAR_4=TREASURY_BEGIN_YEAR_4+ONE_YEAR;var USERS_AMOUNT=150000000;var STAKING_REWARDS_AMOUNT=20000000;var TREASURY_YEAR_1_AMOUNT=172000000;var TREASURY_YEAR_2_AMOUNT=12900000;var TREASURY_YEAR_3_AMOUNT=8600000;var TREASURY_YEAR_4_AMOUNT=4300000;var TEAM_YEAR_1_AMOUNT=160000000;var TEAM_YEAR_2_AMOUNT=12000000;var TEAM_YEAR_3_AMOUNT=8000000;var TEAM_YEAR_4_AMOUNT=4000000;function withVesting(before,time,amount,start,end,cliff){if(time.gt(start)){if(time.gte(end)){return JSBI.add(before,JSBI.BigInt(amount));}else{if(typeof cliff==='number'&&time.gte(cliff)||typeof cliff==='undefined'){return JSBI.add(before,JSBI.divide(JSBI.multiply(JSBI.BigInt(amount),JSBI.BigInt(time.sub(start).toString())),JSBI.subtract(JSBI.BigInt(end),JSBI.BigInt(start))));}}}return before;}export function computeUniCirculation(uni,blockTimestamp,unclaimedUni){var wholeAmount=JSBI.BigInt(USERS_AMOUNT);// staking rewards\nwholeAmount=withVesting(wholeAmount,blockTimestamp,STAKING_REWARDS_AMOUNT,STAKING_GENESIS,STAKING_END);// treasury vesting\nwholeAmount=withVesting(wholeAmount,blockTimestamp,TREASURY_YEAR_1_AMOUNT,TREASURY_BEGIN_YEAR_1,TREASURY_END_YEAR_1,TREASURY_CLIFF_YEAR_1);wholeAmount=withVesting(wholeAmount,blockTimestamp,TREASURY_YEAR_2_AMOUNT,TREASURY_BEGIN_YEAR_2,TREASURY_END_YEAR_2);wholeAmount=withVesting(wholeAmount,blockTimestamp,TREASURY_YEAR_3_AMOUNT,TREASURY_BEGIN_YEAR_3,TREASURY_END_YEAR_3);wholeAmount=withVesting(wholeAmount,blockTimestamp,TREASURY_YEAR_4_AMOUNT,TREASURY_BEGIN_YEAR_4,TREASURY_END_YEAR_4);// team\nwholeAmount=withVesting(wholeAmount,blockTimestamp,TEAM_YEAR_1_AMOUNT,TREASURY_BEGIN_YEAR_1,TREASURY_END_YEAR_1,TREASURY_CLIFF_YEAR_1);wholeAmount=withVesting(wholeAmount,blockTimestamp,TEAM_YEAR_2_AMOUNT,TREASURY_BEGIN_YEAR_2,TREASURY_END_YEAR_2);wholeAmount=withVesting(wholeAmount,blockTimestamp,TEAM_YEAR_3_AMOUNT,TREASURY_BEGIN_YEAR_3,TREASURY_END_YEAR_3);wholeAmount=withVesting(wholeAmount,blockTimestamp,TEAM_YEAR_4_AMOUNT,TREASURY_BEGIN_YEAR_4,TREASURY_END_YEAR_4);var total=new TokenAmount(uni,JSBI.multiply(wholeAmount,JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(18))));return unclaimedUni?total.subtract(unclaimedUni):total;}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/utils/computeUniCirculation.ts"],"names":["JSBI","TokenAmount","STAKING_GENESIS","STAKING_END","TREASURY_VESTING_GENESIS","TREASURY_VESTING_CLIFF","ONE_YEAR","TREASURY_BEGIN_YEAR_1","TREASURY_CLIFF_YEAR_1","TREASURY_END_YEAR_1","TREASURY_BEGIN_YEAR_2","TREASURY_END_YEAR_2","TREASURY_BEGIN_YEAR_3","TREASURY_END_YEAR_3","TREASURY_BEGIN_YEAR_4","TREASURY_END_YEAR_4","USERS_AMOUNT","STAKING_REWARDS_AMOUNT","TREASURY_YEAR_1_AMOUNT","TREASURY_YEAR_2_AMOUNT","TREASURY_YEAR_3_AMOUNT","TREASURY_YEAR_4_AMOUNT","TEAM_YEAR_1_AMOUNT","TEAM_YEAR_2_AMOUNT","TEAM_YEAR_3_AMOUNT","TEAM_YEAR_4_AMOUNT","withVesting","before","time","amount","start","end","cliff","gt","gte","add","BigInt","divide","multiply","sub","toString","subtract","computeUniCirculation","uni","blockTimestamp","unclaimedUni","wholeAmount","total","exponentiate"],"mappings":"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","sourcesContent":["import { JSBI, Token, TokenAmount } from '@uniswap/sdk'\nimport { BigNumber } from 'ethers'\nimport { STAKING_GENESIS } from '../state/stake/hooks'\n\nconst STAKING_END = STAKING_GENESIS + 60 * 60 * 24 * 60\n\nconst TREASURY_VESTING_GENESIS = 1600387200\n\n// 30 days\nconst TREASURY_VESTING_CLIFF: number = 60 * 60 * 24 * 30\n\nconst ONE_YEAR: number = 60 * 60 * 24 * 365\nconst TREASURY_BEGIN_YEAR_1 = TREASURY_VESTING_GENESIS\nconst TREASURY_CLIFF_YEAR_1 = TREASURY_BEGIN_YEAR_1 + TREASURY_VESTING_CLIFF\nconst TREASURY_END_YEAR_1 = TREASURY_BEGIN_YEAR_1 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_2 = TREASURY_END_YEAR_1\nconst TREASURY_END_YEAR_2 = TREASURY_BEGIN_YEAR_2 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_3 = TREASURY_END_YEAR_2\nconst TREASURY_END_YEAR_3 = TREASURY_BEGIN_YEAR_3 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_4 = TREASURY_END_YEAR_3\nconst TREASURY_END_YEAR_4 = TREASURY_BEGIN_YEAR_4 + ONE_YEAR\n\nconst USERS_AMOUNT = 150_000_000\nconst STAKING_REWARDS_AMOUNT = 20_000_000\nconst TREASURY_YEAR_1_AMOUNT = 172_000_000\nconst TREASURY_YEAR_2_AMOUNT = 129_000_00\nconst TREASURY_YEAR_3_AMOUNT = 86_000_00\nconst TREASURY_YEAR_4_AMOUNT = 43_000_00\nconst TEAM_YEAR_1_AMOUNT = 160_000_000\nconst TEAM_YEAR_2_AMOUNT = 120_000_00\nconst TEAM_YEAR_3_AMOUNT = 80_000_00\nconst TEAM_YEAR_4_AMOUNT = 40_000_00\n\nfunction withVesting(before: JSBI, time: BigNumber, amount: number, start: number, end: number, cliff?: number) {\n  if (time.gt(start)) {\n    if (time.gte(end)) {\n      return JSBI.add(before, JSBI.BigInt(amount))\n    } else {\n      if ((typeof cliff === 'number' && time.gte(cliff)) || typeof cliff === 'undefined') {\n        return JSBI.add(\n          before,\n          JSBI.divide(\n            JSBI.multiply(JSBI.BigInt(amount), JSBI.BigInt(time.sub(start).toString())),\n            JSBI.subtract(JSBI.BigInt(end), JSBI.BigInt(start))\n          )\n        )\n      }\n    }\n  }\n  return before\n}\n\nexport function computeUniCirculation(\n  uni: Token,\n  blockTimestamp: BigNumber,\n  unclaimedUni: TokenAmount | undefined\n): TokenAmount {\n  let wholeAmount = JSBI.BigInt(USERS_AMOUNT)\n\n  // staking rewards\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, STAKING_REWARDS_AMOUNT, STAKING_GENESIS, STAKING_END)\n\n  // treasury vesting\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_1_AMOUNT,\n    TREASURY_BEGIN_YEAR_1,\n    TREASURY_END_YEAR_1,\n    TREASURY_CLIFF_YEAR_1\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_2_AMOUNT,\n    TREASURY_BEGIN_YEAR_2,\n    TREASURY_END_YEAR_2\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_3_AMOUNT,\n    TREASURY_BEGIN_YEAR_3,\n    TREASURY_END_YEAR_3\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_4_AMOUNT,\n    TREASURY_BEGIN_YEAR_4,\n    TREASURY_END_YEAR_4\n  )\n\n  // team\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TEAM_YEAR_1_AMOUNT,\n    TREASURY_BEGIN_YEAR_1,\n    TREASURY_END_YEAR_1,\n    TREASURY_CLIFF_YEAR_1\n  )\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_2_AMOUNT, TREASURY_BEGIN_YEAR_2, TREASURY_END_YEAR_2)\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_3_AMOUNT, TREASURY_BEGIN_YEAR_3, TREASURY_END_YEAR_3)\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_4_AMOUNT, TREASURY_BEGIN_YEAR_4, TREASURY_END_YEAR_4)\n\n  const total = new TokenAmount(uni, JSBI.multiply(wholeAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))))\n  return unclaimedUni ? total.subtract(unclaimedUni) : total\n}\n"]},"metadata":{},"sourceType":"module"}