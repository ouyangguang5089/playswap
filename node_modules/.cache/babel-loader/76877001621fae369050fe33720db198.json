{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nfunction encrypt(plainText, secret) {\n  var iv = crypto_1.default.randomBytes(12);\n  var cipher = crypto_1.default.createCipheriv(\"aes-256-gcm\", Buffer.from(secret, \"hex\"), iv);\n  var encrypted = Buffer.concat([cipher.update(Buffer.from(plainText, \"utf8\")), cipher.final()]);\n  return Buffer.concat([iv, cipher.getAuthTag(), encrypted]).toString(\"hex\");\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(cipherText, secret) {\n  var buf = Buffer.from(cipherText, \"hex\");\n  var iv = buf.slice(0, 12);\n  var authTag = buf.slice(12, 28);\n  var encrypted = buf.slice(28);\n  var decipher = crypto_1.default.createDecipheriv(\"aes-256-gcm\", Buffer.from(secret, \"hex\"), iv);\n  decipher.setAuthTag(authTag);\n  return Buffer.concat([decipher.update(encrypted), decipher.final()]).toString(\"utf8\");\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/walletlink/dist/relay/aes256gcm.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","crypto_1","require","encrypt","plainText","secret","iv","default","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","concat","update","final","getAuthTag","toString","decrypt","cipherText","buf","slice","authTag","decipher","createDecipheriv","setAuthTag"],"mappings":"AAAA,a,CACA;AACA;AACA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,QAAQ,GAAGP,eAAe,CAACQ,OAAO,CAAC,QAAD,CAAR,CAAhC;;AACA,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,MAA5B,EAAoC;AAChC,MAAMC,EAAE,GAAGL,QAAQ,CAACM,OAAT,CAAiBC,WAAjB,CAA6B,EAA7B,CAAX;AACA,MAAMC,MAAM,GAAGR,QAAQ,CAACM,OAAT,CAAiBG,cAAjB,CAAgC,aAAhC,EAA+CC,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoB,KAApB,CAA/C,EAA2EC,EAA3E,CAAf;AACA,MAAMO,SAAS,GAAGF,MAAM,CAACG,MAAP,CAAc,CAC5BL,MAAM,CAACM,MAAP,CAAcJ,MAAM,CAACC,IAAP,CAAYR,SAAZ,EAAuB,MAAvB,CAAd,CAD4B,EAE5BK,MAAM,CAACO,KAAP,EAF4B,CAAd,CAAlB;AAIA,SAAOL,MAAM,CAACG,MAAP,CAAc,CAACR,EAAD,EAAKG,MAAM,CAACQ,UAAP,EAAL,EAA0BJ,SAA1B,CAAd,EAAoDK,QAApD,CAA6D,KAA7D,CAAP;AACH;;AACDnB,OAAO,CAACI,OAAR,GAAkBA,OAAlB;;AACA,SAASgB,OAAT,CAAiBC,UAAjB,EAA6Bf,MAA7B,EAAqC;AACjC,MAAMgB,GAAG,GAAGV,MAAM,CAACC,IAAP,CAAYQ,UAAZ,EAAwB,KAAxB,CAAZ;AACA,MAAMd,EAAE,GAAGe,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAX;AACA,MAAMC,OAAO,GAAGF,GAAG,CAACC,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAhB;AACA,MAAMT,SAAS,GAAGQ,GAAG,CAACC,KAAJ,CAAU,EAAV,CAAlB;AACA,MAAME,QAAQ,GAAGvB,QAAQ,CAACM,OAAT,CAAiBkB,gBAAjB,CAAkC,aAAlC,EAAiDd,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoB,KAApB,CAAjD,EAA6EC,EAA7E,CAAjB;AACAkB,EAAAA,QAAQ,CAACE,UAAT,CAAoBH,OAApB;AACA,SAAOZ,MAAM,CAACG,MAAP,CAAc,CAACU,QAAQ,CAACT,MAAT,CAAgBF,SAAhB,CAAD,EAA6BW,QAAQ,CAACR,KAAT,EAA7B,CAAd,EAA8DE,QAA9D,CAAuE,MAAvE,CAAP;AACH;;AACDnB,OAAO,CAACoB,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = __importDefault(require(\"crypto\"));\nfunction encrypt(plainText, secret) {\n    const iv = crypto_1.default.randomBytes(12);\n    const cipher = crypto_1.default.createCipheriv(\"aes-256-gcm\", Buffer.from(secret, \"hex\"), iv);\n    const encrypted = Buffer.concat([\n        cipher.update(Buffer.from(plainText, \"utf8\")),\n        cipher.final()\n    ]);\n    return Buffer.concat([iv, cipher.getAuthTag(), encrypted]).toString(\"hex\");\n}\nexports.encrypt = encrypt;\nfunction decrypt(cipherText, secret) {\n    const buf = Buffer.from(cipherText, \"hex\");\n    const iv = buf.slice(0, 12);\n    const authTag = buf.slice(12, 28);\n    const encrypted = buf.slice(28);\n    const decipher = crypto_1.default.createDecipheriv(\"aes-256-gcm\", Buffer.from(secret, \"hex\"), iv);\n    decipher.setAuthTag(authTag);\n    return Buffer.concat([decipher.update(encrypted), decipher.final()]).toString(\"utf8\");\n}\nexports.decrypt = decrypt;\n"]},"metadata":{},"sourceType":"script"}