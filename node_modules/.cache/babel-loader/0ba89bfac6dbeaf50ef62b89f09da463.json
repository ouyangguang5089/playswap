{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addMulticallListeners,errorFetchingMulticallResults,fetchingMulticallResults,removeMulticallListeners,toCallKey,updateMulticallResults}from'./actions';var initialState={callResults:{}};export default createReducer(initialState,function(builder){return builder.addCase(addMulticallListeners,function(state,_ref){var _listeners$chainId;var _ref$payload=_ref.payload,calls=_ref$payload.calls,chainId=_ref$payload.chainId,_ref$payload$options=_ref$payload.options;_ref$payload$options=_ref$payload$options===void 0?{}:_ref$payload$options;var _ref$payload$options$=_ref$payload$options.blocksPerFetch,blocksPerFetch=_ref$payload$options$===void 0?1:_ref$payload$options$;var listeners=state.callListeners?state.callListeners:state.callListeners={};listeners[chainId]=(_listeners$chainId=listeners[chainId])!==null&&_listeners$chainId!==void 0?_listeners$chainId:{};calls.forEach(function(call){var _listeners$chainId$ca,_listeners$chainId$ca2;var callKey=toCallKey(call);listeners[chainId][callKey]=(_listeners$chainId$ca=listeners[chainId][callKey])!==null&&_listeners$chainId$ca!==void 0?_listeners$chainId$ca:{};listeners[chainId][callKey][blocksPerFetch]=((_listeners$chainId$ca2=listeners[chainId][callKey][blocksPerFetch])!==null&&_listeners$chainId$ca2!==void 0?_listeners$chainId$ca2:0)+1;});}).addCase(removeMulticallListeners,function(state,_ref2){var _ref2$payload=_ref2.payload,chainId=_ref2$payload.chainId,calls=_ref2$payload.calls,_ref2$payload$options=_ref2$payload.options;_ref2$payload$options=_ref2$payload$options===void 0?{}:_ref2$payload$options;var _ref2$payload$options2=_ref2$payload$options.blocksPerFetch,blocksPerFetch=_ref2$payload$options2===void 0?1:_ref2$payload$options2;var listeners=state.callListeners?state.callListeners:state.callListeners={};if(!listeners[chainId])return;calls.forEach(function(call){var callKey=toCallKey(call);if(!listeners[chainId][callKey])return;if(!listeners[chainId][callKey][blocksPerFetch])return;if(listeners[chainId][callKey][blocksPerFetch]===1){delete listeners[chainId][callKey][blocksPerFetch];}else{listeners[chainId][callKey][blocksPerFetch]--;}});}).addCase(fetchingMulticallResults,function(state,_ref3){var _state$callResults$ch;var _ref3$payload=_ref3.payload,chainId=_ref3$payload.chainId,fetchingBlockNumber=_ref3$payload.fetchingBlockNumber,calls=_ref3$payload.calls;state.callResults[chainId]=(_state$callResults$ch=state.callResults[chainId])!==null&&_state$callResults$ch!==void 0?_state$callResults$ch:{};calls.forEach(function(call){var callKey=toCallKey(call);var current=state.callResults[chainId][callKey];if(!current){state.callResults[chainId][callKey]={fetchingBlockNumber:fetchingBlockNumber};}else{var _current$fetchingBloc;if(((_current$fetchingBloc=current.fetchingBlockNumber)!==null&&_current$fetchingBloc!==void 0?_current$fetchingBloc:0)>=fetchingBlockNumber)return;state.callResults[chainId][callKey].fetchingBlockNumber=fetchingBlockNumber;}});}).addCase(errorFetchingMulticallResults,function(state,_ref4){var _state$callResults$ch2;var _ref4$payload=_ref4.payload,fetchingBlockNumber=_ref4$payload.fetchingBlockNumber,chainId=_ref4$payload.chainId,calls=_ref4$payload.calls;state.callResults[chainId]=(_state$callResults$ch2=state.callResults[chainId])!==null&&_state$callResults$ch2!==void 0?_state$callResults$ch2:{};calls.forEach(function(call){var callKey=toCallKey(call);var current=state.callResults[chainId][callKey];if(!current)return;// only should be dispatched if we are already fetching\nif(current.fetchingBlockNumber===fetchingBlockNumber){delete current.fetchingBlockNumber;current.data=null;current.blockNumber=fetchingBlockNumber;}});}).addCase(updateMulticallResults,function(state,_ref5){var _state$callResults$ch3;var _ref5$payload=_ref5.payload,chainId=_ref5$payload.chainId,results=_ref5$payload.results,blockNumber=_ref5$payload.blockNumber;state.callResults[chainId]=(_state$callResults$ch3=state.callResults[chainId])!==null&&_state$callResults$ch3!==void 0?_state$callResults$ch3:{};Object.keys(results).forEach(function(callKey){var _current$blockNumber;var current=state.callResults[chainId][callKey];if(((_current$blockNumber=current===null||current===void 0?void 0:current.blockNumber)!==null&&_current$blockNumber!==void 0?_current$blockNumber:0)>blockNumber)return;state.callResults[chainId][callKey]={data:results[callKey],blockNumber:blockNumber};});});});","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/multicall/reducer.ts"],"names":["createReducer","addMulticallListeners","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","payload","calls","chainId","options","blocksPerFetch","listeners","callListeners","forEach","call","callKey","fetchingBlockNumber","current","data","blockNumber","results","Object","keys"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addMulticallListeners,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  removeMulticallListeners,\n  toCallKey,\n  updateMulticallResults\n} from './actions'\n\nexport interface MulticallState {\n  callListeners?: {\n    // on a per-chain basis\n    [chainId: number]: {\n      // stores for each call key the listeners' preferences\n      [callKey: string]: {\n        // stores how many listeners there are per each blocks per fetch preference\n        [blocksPerFetch: number]: number\n      }\n    }\n  }\n\n  callResults: {\n    [chainId: number]: {\n      [callKey: string]: {\n        data?: string | null\n        blockNumber?: number\n        fetchingBlockNumber?: number\n      }\n    }\n  }\n}\n\nconst initialState: MulticallState = {\n  callResults: {}\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\n      const listeners: MulticallState['callListeners'] = state.callListeners\n        ? state.callListeners\n        : (state.callListeners = {})\n      listeners[chainId] = listeners[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n      })\n    })\n    .addCase(\n      removeMulticallListeners,\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach(call => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      }\n    )\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) {\n          state.callResults[chainId][callKey] = {\n            fetchingBlockNumber\n          }\n        } else {\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) return // only should be dispatched if we are already fetching\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\n          delete current.fetchingBlockNumber\n          current.data = null\n          current.blockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      Object.keys(results).forEach(callKey => {\n        const current = state.callResults[chainId][callKey]\n        if ((current?.blockNumber ?? 0) > blockNumber) return\n        state.callResults[chainId][callKey] = {\n          data: results[callKey],\n          blockNumber\n        }\n      })\n    })\n)\n"]},"metadata":{},"sourceType":"module"}