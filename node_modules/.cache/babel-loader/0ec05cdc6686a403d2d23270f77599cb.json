{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\n\nvar word = require('is-word-character');\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/emphasis');\n\nmodule.exports = emphasis;\nemphasis.locator = locate;\nvar C_ASTERISK = '*';\nvar C_UNDERSCORE = '_';\n\nfunction emphasis(eat, value, silent) {\n  var self = this;\n  var index = 0;\n  var character = value.charAt(index);\n  var now;\n  var pedantic;\n  var marker;\n  var queue;\n  var subvalue;\n  var length;\n  var prev;\n\n  if (character !== C_ASTERISK && character !== C_UNDERSCORE) {\n    return;\n  }\n\n  pedantic = self.options.pedantic;\n  subvalue = character;\n  marker = character;\n  length = value.length;\n  index++;\n  queue = '';\n  character = '';\n\n  if (pedantic && whitespace(value.charAt(index))) {\n    return;\n  }\n\n  while (index < length) {\n    prev = character;\n    character = value.charAt(index);\n\n    if (character === marker && (!pedantic || !whitespace(prev))) {\n      character = value.charAt(++index);\n\n      if (character !== marker) {\n        if (!trim(queue) || prev === marker) {\n          return;\n        }\n\n        if (!pedantic && marker === C_UNDERSCORE && word(character)) {\n          queue += marker;\n          continue;\n        }\n        /* istanbul ignore if - never used (yet) */\n\n\n        if (silent) {\n          return true;\n        }\n\n        now = eat.now();\n        now.column++;\n        now.offset++;\n        return eat(subvalue + queue + marker)({\n          type: 'emphasis',\n          children: self.tokenizeInline(queue, now)\n        });\n      }\n\n      queue += marker;\n    }\n\n    if (!pedantic && character === '\\\\') {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/emphasis.js"],"names":["trim","require","word","whitespace","locate","module","exports","emphasis","locator","C_ASTERISK","C_UNDERSCORE","eat","value","silent","self","index","character","charAt","now","pedantic","marker","queue","subvalue","length","prev","options","column","offset","type","children","tokenizeInline"],"mappings":"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","sourcesContent":["'use strict';\n\nvar trim = require('trim');\nvar word = require('is-word-character');\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/emphasis');\n\nmodule.exports = emphasis;\nemphasis.locator = locate;\n\nvar C_ASTERISK = '*';\nvar C_UNDERSCORE = '_';\n\nfunction emphasis(eat, value, silent) {\n  var self = this;\n  var index = 0;\n  var character = value.charAt(index);\n  var now;\n  var pedantic;\n  var marker;\n  var queue;\n  var subvalue;\n  var length;\n  var prev;\n\n  if (character !== C_ASTERISK && character !== C_UNDERSCORE) {\n    return;\n  }\n\n  pedantic = self.options.pedantic;\n  subvalue = character;\n  marker = character;\n  length = value.length;\n  index++;\n  queue = '';\n  character = '';\n\n  if (pedantic && whitespace(value.charAt(index))) {\n    return;\n  }\n\n  while (index < length) {\n    prev = character;\n    character = value.charAt(index);\n\n    if (character === marker && (!pedantic || !whitespace(prev))) {\n      character = value.charAt(++index);\n\n      if (character !== marker) {\n        if (!trim(queue) || prev === marker) {\n          return;\n        }\n\n        if (!pedantic && marker === C_UNDERSCORE && word(character)) {\n          queue += marker;\n          continue;\n        }\n\n        /* istanbul ignore if - never used (yet) */\n        if (silent) {\n          return true;\n        }\n\n        now = eat.now();\n        now.column++;\n        now.offset++;\n\n        return eat(subvalue + queue + marker)({\n          type: 'emphasis',\n          children: self.tokenizeInline(queue, now)\n        });\n      }\n\n      queue += marker;\n    }\n\n    if (!pedantic && character === '\\\\') {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}