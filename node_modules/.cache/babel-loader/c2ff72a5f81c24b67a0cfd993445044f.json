{"ast":null,"code":"'use strict';\n\nmodule.exports = atxHeading;\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n  /* Eat initial spacing. */\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n  /* Eat hashes. */\n\n\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (!depth || !settings.pedantic && value.charAt(index + 1) === C_HASH) {\n    return;\n  }\n\n  length = value.length + 1;\n  /* Eat intermediate white-space. */\n\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n  /* Exit when not in pedantic mode without spacing. */\n\n\n  if (!settings.pedantic && queue.length === 0 && character && character !== C_NEWLINE) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n  /* Eat content. */\n\n\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (character !== C_SPACE && character !== C_TAB && character !== C_HASH) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/heading-atx.js"],"names":["module","exports","atxHeading","C_NEWLINE","C_TAB","C_SPACE","C_HASH","MAX_ATX_COUNT","eat","value","silent","self","settings","options","length","index","now","subvalue","content","character","queue","depth","charAt","pedantic","column","offset","type","children","tokenizeInline"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = atxHeading;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\n\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n\n  /* Eat initial spacing. */\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n\n  /* Eat hashes. */\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (\n    !depth ||\n    (!settings.pedantic && value.charAt(index + 1) === C_HASH)\n  ) {\n    return;\n  }\n\n  length = value.length + 1;\n\n  /* Eat intermediate white-space. */\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n\n  /* Exit when not in pedantic mode without spacing. */\n  if (\n    !settings.pedantic &&\n    queue.length === 0 &&\n    character &&\n    character !== C_NEWLINE\n  ) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  /* Eat content. */\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (\n      character !== C_SPACE &&\n      character !== C_TAB &&\n      character !== C_HASH\n    ) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}\n"]},"metadata":{},"sourceType":"script"}