{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose'; // Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\n\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\n\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class, _temp;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _temp = _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _style;\n\n          itemStyleCache[key] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = getColumnOffset(_this.props, columnIndex, _this._instanceProps), _style.top = getRowOffset(_this.props, rowIndex, _this._instanceProps), _style.height = getRowHeight(_this.props, rowIndex, _this._instanceProps), _style.width = getColumnWidth(_this.props, columnIndex, _this._instanceProps), _style);\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _temp;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class, _temp;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _temp = _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _style;\n\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          itemStyleCache[index] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = isHorizontal ? _offset : 0, _style.top = !isHorizontal ? _offset : 0, _style.height = !isHorizontal ? size : '100%', _style.width = isHorizontal ? size : '100%', _style);\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var itemCount = this.props.itemCount;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1));\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          initialScrollOffset = _this$props2.initialScrollOffset,\n          layout = _this$props2.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          layout = _this$props3.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemCount = _this$props4.itemCount,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,\n          layout = _this$props4.layout,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props5 = this.props,\n          itemCount = _this$props5.itemCount,\n          overscanCount = _this$props5.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _temp;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n}); // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, [\"style\"]);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, [\"style\"]);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { VariableSizeGrid, VariableSizeList, FixedSizeGrid, FixedSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"sources":["../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"names":["hasNativePerformanceNow","performance","now","Date","cancelAnimationFrame","timeoutID","start","callback","requestAnimationFrame","id","size","recalculate","div","document","style","cachedRTLResult","outerDiv","outerStyle","innerDiv","innerStyle","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","window","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","direction","itemData","useIsScrolling","state","instance","isScrolling","horizontalScrollDirection","scrollLeft","scrollTop","scrollUpdateWasRequested","verticalScrollDirection","validateSharedProps","Math","prevState","align","columnCount","height","rowCount","width","scrollbarSize","getScrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","initialScrollLeft","initialScrollTop","outerRef","getRTLOffsetType","clientWidth","scrollWidth","cancelTimeout","children","className","innerRef","innerElementType","innerTagName","itemKey","outerElementType","outerTagName","columnStartIndex","columnStopIndex","rowStartIndex","rowStopIndex","items","createElement","key","onScroll","ref","position","overflow","WebkitOverflowScrolling","willChange","pointerEvents","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","columnWidth","rowHeight","itemStyleCache","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","clientHeight","scrollHeight","event","calculatedScrollLeft","calculatedScrollTop","requestTimeout","console","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","itemMetadataMap","instanceProps","itemSize","props","lastMeasuredIndex","index","offset","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","low","middle","high","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","estimatedTotalSize","maxOffset","minOffset","scrollOffset","VariableSizeGrid","createGridComponent","shouldForceUpdate","devWarningsDirection","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","layout","scrollDirection","initialScrollOffset","isHorizontal","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","createListComponent","FixedSizeGrid","lastColumnOffset","middleOffset","lastRowOffset","left","numVisibleColumns","top","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","attribute","prev","next","prevStyle","prevRest","prevProps","nextStyle","nextRest","nextProps","shallowDiffers","areEqual"],"mappings":"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","sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: getColumnOffset(\n            this.props,\n            columnIndex,\n            this._instanceProps\n          ),\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: isHorizontal ? offset : 0,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}