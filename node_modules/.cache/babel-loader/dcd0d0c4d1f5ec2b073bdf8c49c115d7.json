{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addTransaction,checkedTransaction,clearAllTransactions,finalizeTransaction}from'./actions';var now=function now(){return new Date().getTime();};export var initialState={};export default createReducer(initialState,function(builder){return builder.addCase(addTransaction,function(transactions,_ref){var _transactions$chainId,_transactions$chainId2;var _ref$payload=_ref.payload,chainId=_ref$payload.chainId,from=_ref$payload.from,hash=_ref$payload.hash,approval=_ref$payload.approval,summary=_ref$payload.summary,claim=_ref$payload.claim;if((_transactions$chainId=transactions[chainId])===null||_transactions$chainId===void 0?void 0:_transactions$chainId[hash]){throw Error('Attempted to add existing transaction.');}var txs=(_transactions$chainId2=transactions[chainId])!==null&&_transactions$chainId2!==void 0?_transactions$chainId2:{};txs[hash]={hash:hash,approval:approval,summary:summary,claim:claim,from:from,addedTime:now()};transactions[chainId]=txs;}).addCase(clearAllTransactions,function(transactions,_ref2){var chainId=_ref2.payload.chainId;if(!transactions[chainId])return;transactions[chainId]={};}).addCase(checkedTransaction,function(transactions,_ref3){var _transactions$chainId3;var _ref3$payload=_ref3.payload,chainId=_ref3$payload.chainId,hash=_ref3$payload.hash,blockNumber=_ref3$payload.blockNumber;var tx=(_transactions$chainId3=transactions[chainId])===null||_transactions$chainId3===void 0?void 0:_transactions$chainId3[hash];if(!tx){return;}if(!tx.lastCheckedBlockNumber){tx.lastCheckedBlockNumber=blockNumber;}else{tx.lastCheckedBlockNumber=Math.max(blockNumber,tx.lastCheckedBlockNumber);}}).addCase(finalizeTransaction,function(transactions,_ref4){var _transactions$chainId4;var _ref4$payload=_ref4.payload,hash=_ref4$payload.hash,chainId=_ref4$payload.chainId,receipt=_ref4$payload.receipt;var tx=(_transactions$chainId4=transactions[chainId])===null||_transactions$chainId4===void 0?void 0:_transactions$chainId4[hash];if(!tx){return;}tx.receipt=receipt;tx.confirmedTime=now();});});","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/transactions/reducer.ts"],"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","from","hash","approval","summary","claim","Error","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"AAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OACEC,cADF,CAEEC,kBAFF,CAGEC,oBAHF,CAIEC,mBAJF,KAMO,WANP,CAQA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,SAAM,IAAIC,CAAAA,IAAJ,GAAWC,OAAX,EAAN,EAAZ,CAoBA,MAAO,IAAMC,CAAAA,YAA8B,CAAG,EAAvC,CAEP,cAAeR,CAAAA,aAAa,CAACQ,YAAD,CAAe,SAAAC,OAAO,QAChDA,CAAAA,OAAO,CACJC,OADH,CACWT,cADX,CAC2B,SAACU,YAAD,MAAkF,wEAAjEC,OAAiE,CAAtDC,OAAsD,cAAtDA,OAAsD,CAA7CC,IAA6C,cAA7CA,IAA6C,CAAvCC,IAAuC,cAAvCA,IAAuC,CAAjCC,QAAiC,cAAjCA,QAAiC,CAAvBC,OAAuB,cAAvBA,OAAuB,CAAdC,KAAc,cAAdA,KAAc,CACzG,0BAAIP,YAAY,CAACE,OAAD,CAAhB,gDAAI,sBAAwBE,IAAxB,CAAJ,CAAmC,CACjC,KAAMI,CAAAA,KAAK,CAAC,wCAAD,CAAX,CACD,CACD,GAAMC,CAAAA,GAAG,yBAAGT,YAAY,CAACE,OAAD,CAAf,iEAA4B,EAArC,CACAO,GAAG,CAACL,IAAD,CAAH,CAAY,CAAEA,IAAI,CAAJA,IAAF,CAAQC,QAAQ,CAARA,QAAR,CAAkBC,OAAO,CAAPA,OAAlB,CAA2BC,KAAK,CAALA,KAA3B,CAAkCJ,IAAI,CAAJA,IAAlC,CAAwCO,SAAS,CAAEhB,GAAG,EAAtD,CAAZ,CACAM,YAAY,CAACE,OAAD,CAAZ,CAAwBO,GAAxB,CACD,CARH,EASGV,OATH,CASWP,oBATX,CASiC,SAACQ,YAAD,OAA4C,IAAhBE,CAAAA,OAAgB,OAA3BD,OAA2B,CAAhBC,OAAgB,CACzE,GAAI,CAACF,YAAY,CAACE,OAAD,CAAjB,CAA4B,OAC5BF,YAAY,CAACE,OAAD,CAAZ,CAAwB,EAAxB,CACD,CAZH,EAaGH,OAbH,CAaWR,kBAbX,CAa+B,SAACS,YAAD,OAA+D,oDAA9CC,OAA8C,CAAnCC,OAAmC,eAAnCA,OAAmC,CAA1BE,IAA0B,eAA1BA,IAA0B,CAApBO,WAAoB,eAApBA,WAAoB,CAC1F,GAAMC,CAAAA,EAAE,yBAAGZ,YAAY,CAACE,OAAD,CAAf,iDAAG,uBAAwBE,IAAxB,CAAX,CACA,GAAI,CAACQ,EAAL,CAAS,CACP,OACD,CACD,GAAI,CAACA,EAAE,CAACC,sBAAR,CAAgC,CAC9BD,EAAE,CAACC,sBAAH,CAA4BF,WAA5B,CACD,CAFD,IAEO,CACLC,EAAE,CAACC,sBAAH,CAA4BC,IAAI,CAACC,GAAL,CAASJ,WAAT,CAAsBC,EAAE,CAACC,sBAAzB,CAA5B,CACD,CACF,CAvBH,EAwBGd,OAxBH,CAwBWN,mBAxBX,CAwBgC,SAACO,YAAD,OAA2D,oDAA1CC,OAA0C,CAA/BG,IAA+B,eAA/BA,IAA+B,CAAzBF,OAAyB,eAAzBA,OAAyB,CAAhBc,OAAgB,eAAhBA,OAAgB,CACvF,GAAMJ,CAAAA,EAAE,yBAAGZ,YAAY,CAACE,OAAD,CAAf,iDAAG,uBAAwBE,IAAxB,CAAX,CACA,GAAI,CAACQ,EAAL,CAAS,CACP,OACD,CACDA,EAAE,CAACI,OAAH,CAAaA,OAAb,CACAJ,EAAE,CAACK,aAAH,CAAmBvB,GAAG,EAAtB,CACD,CA/BH,CADgD,EAAtB,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\n      transactions[chainId] = txs\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    })\n)\n"]},"metadata":{},"sourceType":"module"}