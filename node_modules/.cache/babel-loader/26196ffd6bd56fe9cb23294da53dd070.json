{"ast":null,"code":"// @ts-check\n'use strict';\n\nvar _createForOfIteratorHelper = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('web-encoding'),\n    TextEncoder = _require.TextEncoder,\n    TextDecoder = _require.TextDecoder;\n\nvar textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\n\nvar decodeText = function decodeText(bytes) {\n  return textDecoder.decode(bytes);\n};\n\nvar textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\n\nvar encodeText = function encodeText(text) {\n  return textEncoder.encode(text);\n};\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<Number>>} arrs\n * @param {Number} length\n * @returns {Uint8Array}\n */\n\n\nfunction concat(arrs, length) {\n  var output = new Uint8Array(length);\n  var offset = 0;\n\n  var _iterator = _createForOfIteratorHelper(arrs),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arr = _step.value;\n      output.set(arr, offset);\n      offset += arr.length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  decodeText: decodeText,\n  encodeText: encodeText,\n  concat: concat\n};","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/multibase/src/util.js"],"names":["require","TextEncoder","TextDecoder","textDecoder","decodeText","bytes","decode","textEncoder","encodeText","text","encode","concat","arrs","length","output","Uint8Array","offset","arr","set","module","exports"],"mappings":"AAAA;AACA;;;;eAEqCA,OAAO,CAAC,cAAD,C;IAApCC,W,YAAAA,W;IAAaC,W,YAAAA,W;;AAErB,IAAMC,WAAW,GAAG,IAAID,WAAJ,EAApB;AACA;;;;;AAIA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWF,WAAW,CAACG,MAAZ,CAAmBD,KAAnB,CAAX;AAAA,CAAnB;;AAEA,IAAME,WAAW,GAAG,IAAIN,WAAJ,EAApB;AACA;;;;;AAIA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAUF,WAAW,CAACG,MAAZ,CAAmBD,IAAnB,CAAV;AAAA,CAAnB;AAEA;;;;;;;;;AAOA,SAASE,MAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AAC7B,MAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAf;AACA,MAAIG,MAAM,GAAG,CAAb;;AAF6B,6CAIXJ,IAJW;AAAA;;AAAA;AAI7B,wDAAwB;AAAA,UAAbK,GAAa;AACtBH,MAAAA,MAAM,CAACI,GAAP,CAAWD,GAAX,EAAgBD,MAAhB;AACAA,MAAAA,MAAM,IAAIC,GAAG,CAACJ,MAAd;AACD;AAP4B;AAAA;AAAA;AAAA;AAAA;;AAS7B,SAAOC,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AAAEhB,EAAAA,UAAU,EAAVA,UAAF;AAAcI,EAAAA,UAAU,EAAVA,UAAd;AAA0BG,EAAAA,MAAM,EAANA;AAA1B,CAAjB","sourcesContent":["// @ts-check\n'use strict'\n\nconst { TextEncoder, TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<Number>>} arrs\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n"]},"metadata":{},"sourceType":"script"}