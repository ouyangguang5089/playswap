{"ast":null,"code":"import _regeneratorRuntime from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect,useMemo,useRef}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import useDebounce from'../../hooks/useDebounce';import chunkArray from'../../utils/chunkArray';import{CancelledError,retry,RetryableError}from'../../utils/retry';import{useBlockNumber}from'../application/hooks';import{errorFetchingMulticallResults,fetchingMulticallResults,parseCallKey,updateMulticallResults}from'./actions';// chunk calls so we do not exceed the gas limit\nvar CALL_CHUNK_SIZE=500;/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */function fetchChunk(_x,_x2,_x3){return _fetchChunk.apply(this,arguments);}/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */function _fetchChunk(){_fetchChunk=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(multicallContract,chunk,minBlockNumber){var resultsBlockNumber,returnData,_yield$multicallContr,_yield$multicallContr2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.debug('Fetching chunk',multicallContract,chunk,minBlockNumber);_context.prev=1;;_context.next=5;return multicallContract.aggregate(chunk.map(function(obj){return[obj.address,obj.callData];}));case 5:_yield$multicallContr=_context.sent;_yield$multicallContr2=_slicedToArray(_yield$multicallContr,2);resultsBlockNumber=_yield$multicallContr2[0];returnData=_yield$multicallContr2[1];_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);console.debug('Failed to fetch chunk inside retry',_context.t0);throw _context.t0;case 15:if(!(resultsBlockNumber.toNumber()<minBlockNumber)){_context.next=18;break;}console.debug(\"Fetched results for old block number: \".concat(resultsBlockNumber.toString(),\" vs. \").concat(minBlockNumber));throw new RetryableError('Fetched for old block number');case 18:return _context.abrupt(\"return\",{results:returnData,blockNumber:resultsBlockNumber.toNumber()});case 19:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return _fetchChunk.apply(this,arguments);}export function activeListeningKeys(allListeners,chainId){if(!allListeners||!chainId)return{};var listeners=allListeners[chainId];if(!listeners)return{};return Object.keys(listeners).reduce(function(memo,callKey){var keyListeners=listeners[callKey];memo[callKey]=Object.keys(keyListeners).filter(function(key){var blocksPerFetch=parseInt(key);if(blocksPerFetch<=0)return false;return keyListeners[blocksPerFetch]>0;}).reduce(function(previousMin,current){return Math.min(previousMin,parseInt(current));},Infinity);return memo;},{});}/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */export function outdatedListeningKeys(callResults,listeningKeys,chainId,latestBlockNumber){if(!chainId||!latestBlockNumber)return[];var results=callResults[chainId];// no results at all, load everything\nif(!results)return Object.keys(listeningKeys);return Object.keys(listeningKeys).filter(function(callKey){var blocksPerFetch=listeningKeys[callKey];var data=callResults[chainId][callKey];// no data, must fetch\nif(!data)return true;var minDataBlockNumber=latestBlockNumber-(blocksPerFetch-1);// already fetching it for a recent enough block, don't refetch it\nif(data.fetchingBlockNumber&&data.fetchingBlockNumber>=minDataBlockNumber)return false;// if data is older than minDataBlockNumber, fetch it\nreturn!data.blockNumber||data.blockNumber<minDataBlockNumber;});}export default function Updater(){var dispatch=useDispatch();var state=useSelector(function(state){return state.multicall;});// wait for listeners to settle before triggering updates\nvar debouncedListeners=useDebounce(state.callListeners,100);var latestBlockNumber=useBlockNumber();var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var multicallContract=useMulticallContract();var cancellations=useRef();var listeningKeys=useMemo(function(){return activeListeningKeys(debouncedListeners,chainId);},[debouncedListeners,chainId]);var unserializedOutdatedCallKeys=useMemo(function(){return outdatedListeningKeys(state.callResults,listeningKeys,chainId,latestBlockNumber);},[chainId,state.callResults,listeningKeys,latestBlockNumber]);var serializedOutdatedCallKeys=useMemo(function(){return JSON.stringify(unserializedOutdatedCallKeys.sort());},[unserializedOutdatedCallKeys]);useEffect(function(){var _cancellations$curren;if(!latestBlockNumber||!chainId||!multicallContract)return;var outdatedCallKeys=JSON.parse(serializedOutdatedCallKeys);if(outdatedCallKeys.length===0)return;var calls=outdatedCallKeys.map(function(key){return parseCallKey(key);});var chunkedCalls=chunkArray(calls,CALL_CHUNK_SIZE);if(((_cancellations$curren=cancellations.current)===null||_cancellations$curren===void 0?void 0:_cancellations$curren.blockNumber)!==latestBlockNumber){var _cancellations$curren2,_cancellations$curren3;(_cancellations$curren2=cancellations.current)===null||_cancellations$curren2===void 0?void 0:(_cancellations$curren3=_cancellations$curren2.cancellations)===null||_cancellations$curren3===void 0?void 0:_cancellations$curren3.forEach(function(c){return c();});}dispatch(fetchingMulticallResults({calls:calls,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));cancellations.current={blockNumber:latestBlockNumber,cancellations:chunkedCalls.map(function(chunk,index){var _retry=retry(function(){return fetchChunk(multicallContract,chunk,latestBlockNumber);},{n:Infinity,minWait:2500,maxWait:3500}),cancel=_retry.cancel,promise=_retry.promise;promise.then(function(_ref){var returnData=_ref.results,fetchBlockNumber=_ref.blockNumber;cancellations.current={cancellations:[],blockNumber:latestBlockNumber};// accumulates the length of all previous indices\nvar firstCallKeyIndex=chunkedCalls.slice(0,index).reduce(function(memo,curr){return memo+curr.length;},0);var lastCallKeyIndex=firstCallKeyIndex+returnData.length;dispatch(updateMulticallResults({chainId:chainId,results:outdatedCallKeys.slice(firstCallKeyIndex,lastCallKeyIndex).reduce(function(memo,callKey,i){var _returnData$i;memo[callKey]=(_returnData$i=returnData[i])!==null&&_returnData$i!==void 0?_returnData$i:null;return memo;},{}),blockNumber:fetchBlockNumber}));}).catch(function(error){if(error instanceof CancelledError){console.debug('Cancelled fetch for blockNumber',latestBlockNumber);return;}console.error('Failed to fetch multicall chunk',chunk,chainId,error);dispatch(errorFetchingMulticallResults({calls:chunk,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));});return cancel;})};},[chainId,multicallContract,dispatch,serializedOutdatedCallKeys,latestBlockNumber]);return null;}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/multicall/updater.tsx"],"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","console","debug","aggregate","map","obj","address","callData","resultsBlockNumber","returnData","toNumber","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","length","calls","chunkedCalls","forEach","c","index","n","minWait","maxWait","cancel","promise","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","catch","error"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport useDebounce from '../../hooks/useDebounce'\nimport chunkArray from '../../utils/chunkArray'\nimport { CancelledError, retry, RetryableError } from '../../utils/retry'\nimport { useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults\n} from './actions'\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\n  let resultsBlockNumber, returnData\n  try {\n    ;[resultsBlockNumber, returnData] = await multicallContract.aggregate(chunk.map(obj => [obj.address, obj.callData]))\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error)\n    throw error\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\n    throw new RetryableError('Fetched for old block number')\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter(key => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter(callKey => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['multicall']>(state => state.multicall)\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const latestBlockNumber = useBlockNumber()\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticallContract()\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [\n    unserializedOutdatedCallKeys\n  ])\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !multicallContract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map(key => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\n\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\n      cancellations.current?.cancellations?.forEach(c => c())\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber\n      })\n    )\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500\n        })\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber }\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null\n                    return memo\n                  }, {}),\n                blockNumber: fetchBlockNumber\n              })\n            )\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: latestBlockNumber\n              })\n            )\n          })\n        return cancel\n      })\n    }\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}