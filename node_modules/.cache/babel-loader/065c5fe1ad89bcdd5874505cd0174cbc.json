{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar normalize = require('../util/normalize');\n\nmodule.exports = definition;\ndefinition.notInList = true;\ndefinition.notInBlock = true;\nvar C_DOUBLE_QUOTE = '\"';\nvar C_SINGLE_QUOTE = '\\'';\nvar C_BACKSLASH = '\\\\';\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\nvar C_PAREN_OPEN = '(';\nvar C_PAREN_CLOSE = ')';\nvar C_COLON = ':';\nvar C_LT = '<';\nvar C_GT = '>';\n\nfunction definition(eat, value, silent) {\n  var self = this;\n  var commonmark = self.options.commonmark;\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var beforeURL;\n  var beforeTitle;\n  var queue;\n  var character;\n  var test;\n  var identifier;\n  var url;\n  var title;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (character !== C_BRACKET_OPEN) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      break;\n    } else if (character === C_BACKSLASH) {\n      queue += character;\n      index++;\n      character = value.charAt(index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE || value.charAt(index + 1) !== C_COLON) {\n    return;\n  }\n\n  identifier = queue;\n  subvalue += queue + C_BRACKET_CLOSE + C_COLON;\n  index = subvalue.length;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE && character !== C_NEWLINE) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n\n  if (character === C_LT) {\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isEnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === isEnclosedURLCharacter.delimiter) {\n      subvalue += C_LT + queue + character;\n      index++;\n    } else {\n      if (commonmark) {\n        return;\n      }\n\n      index -= queue.length + 1;\n      queue = '';\n    }\n  }\n\n  if (!queue) {\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isUnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    subvalue += queue;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  url = queue;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE && character !== C_NEWLINE) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  test = null;\n\n  if (character === C_DOUBLE_QUOTE) {\n    test = C_DOUBLE_QUOTE;\n  } else if (character === C_SINGLE_QUOTE) {\n    test = C_SINGLE_QUOTE;\n  } else if (character === C_PAREN_OPEN) {\n    test = C_PAREN_CLOSE;\n  }\n\n  if (!test) {\n    queue = '';\n    index = subvalue.length;\n  } else if (queue) {\n    subvalue += queue + character;\n    index = subvalue.length;\n    queue = '';\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === test) {\n        break;\n      }\n\n      if (character === C_NEWLINE) {\n        index++;\n        character = value.charAt(index);\n\n        if (character === C_NEWLINE || character === test) {\n          return;\n        }\n\n        queue += C_NEWLINE;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character !== test) {\n      return;\n    }\n\n    beforeTitle = subvalue;\n    subvalue += queue + character;\n    index++;\n    title = queue;\n    queue = '';\n  } else {\n    return;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!character || character === C_NEWLINE) {\n    if (silent) {\n      return true;\n    }\n\n    beforeURL = eat(beforeURL).test().end;\n    url = self.decode.raw(self.unescape(url), beforeURL, {\n      nonTerminated: false\n    });\n\n    if (title) {\n      beforeTitle = eat(beforeTitle).test().end;\n      title = self.decode.raw(self.unescape(title), beforeTitle);\n    }\n\n    return eat(subvalue)({\n      type: 'definition',\n      identifier: normalize(identifier),\n      title: title || null,\n      url: url\n    });\n  }\n}\n/* Check if `character` can be inside an enclosed URI. */\n\n\nfunction isEnclosedURLCharacter(character) {\n  return character !== C_GT && character !== C_BRACKET_OPEN && character !== C_BRACKET_CLOSE;\n}\n\nisEnclosedURLCharacter.delimiter = C_GT;\n/* Check if `character` can be inside an unclosed URI. */\n\nfunction isUnclosedURLCharacter(character) {\n  return character !== C_BRACKET_OPEN && character !== C_BRACKET_CLOSE && !whitespace(character);\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/definition.js"],"names":["whitespace","require","normalize","module","exports","definition","notInList","notInBlock","C_DOUBLE_QUOTE","C_SINGLE_QUOTE","C_BACKSLASH","C_NEWLINE","C_TAB","C_SPACE","C_BRACKET_OPEN","C_BRACKET_CLOSE","C_PAREN_OPEN","C_PAREN_CLOSE","C_COLON","C_LT","C_GT","eat","value","silent","self","commonmark","options","index","length","subvalue","beforeURL","beforeTitle","queue","character","test","identifier","url","title","charAt","isEnclosedURLCharacter","delimiter","isUnclosedURLCharacter","end","decode","raw","unescape","nonTerminated","type"],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar normalize = require('../util/normalize');\n\nmodule.exports = definition;\ndefinition.notInList = true;\ndefinition.notInBlock = true;\n\nvar C_DOUBLE_QUOTE = '\"';\nvar C_SINGLE_QUOTE = '\\'';\nvar C_BACKSLASH = '\\\\';\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\nvar C_PAREN_OPEN = '(';\nvar C_PAREN_CLOSE = ')';\nvar C_COLON = ':';\nvar C_LT = '<';\nvar C_GT = '>';\n\nfunction definition(eat, value, silent) {\n  var self = this;\n  var commonmark = self.options.commonmark;\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var beforeURL;\n  var beforeTitle;\n  var queue;\n  var character;\n  var test;\n  var identifier;\n  var url;\n  var title;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (character !== C_BRACKET_OPEN) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      break;\n    } else if (character === C_BACKSLASH) {\n      queue += character;\n      index++;\n      character = value.charAt(index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (\n    !queue ||\n    value.charAt(index) !== C_BRACKET_CLOSE ||\n    value.charAt(index + 1) !== C_COLON\n  ) {\n    return;\n  }\n\n  identifier = queue;\n  subvalue += queue + C_BRACKET_CLOSE + C_COLON;\n  index = subvalue.length;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (\n      character !== C_TAB &&\n      character !== C_SPACE &&\n      character !== C_NEWLINE\n    ) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n\n  if (character === C_LT) {\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isEnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === isEnclosedURLCharacter.delimiter) {\n      subvalue += C_LT + queue + character;\n      index++;\n    } else {\n      if (commonmark) {\n        return;\n      }\n\n      index -= queue.length + 1;\n      queue = '';\n    }\n  }\n\n  if (!queue) {\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isUnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    subvalue += queue;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  url = queue;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (\n      character !== C_TAB &&\n      character !== C_SPACE &&\n      character !== C_NEWLINE\n    ) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  test = null;\n\n  if (character === C_DOUBLE_QUOTE) {\n    test = C_DOUBLE_QUOTE;\n  } else if (character === C_SINGLE_QUOTE) {\n    test = C_SINGLE_QUOTE;\n  } else if (character === C_PAREN_OPEN) {\n    test = C_PAREN_CLOSE;\n  }\n\n  if (!test) {\n    queue = '';\n    index = subvalue.length;\n  } else if (queue) {\n    subvalue += queue + character;\n    index = subvalue.length;\n    queue = '';\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === test) {\n        break;\n      }\n\n      if (character === C_NEWLINE) {\n        index++;\n        character = value.charAt(index);\n\n        if (character === C_NEWLINE || character === test) {\n          return;\n        }\n\n        queue += C_NEWLINE;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character !== test) {\n      return;\n    }\n\n    beforeTitle = subvalue;\n    subvalue += queue + character;\n    index++;\n    title = queue;\n    queue = '';\n  } else {\n    return;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_TAB && character !== C_SPACE) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!character || character === C_NEWLINE) {\n    if (silent) {\n      return true;\n    }\n\n    beforeURL = eat(beforeURL).test().end;\n    url = self.decode.raw(self.unescape(url), beforeURL, {nonTerminated: false});\n\n    if (title) {\n      beforeTitle = eat(beforeTitle).test().end;\n      title = self.decode.raw(self.unescape(title), beforeTitle);\n    }\n\n    return eat(subvalue)({\n      type: 'definition',\n      identifier: normalize(identifier),\n      title: title || null,\n      url: url\n    });\n  }\n}\n\n/* Check if `character` can be inside an enclosed URI. */\nfunction isEnclosedURLCharacter(character) {\n  return character !== C_GT &&\n    character !== C_BRACKET_OPEN &&\n    character !== C_BRACKET_CLOSE;\n}\n\nisEnclosedURLCharacter.delimiter = C_GT;\n\n/* Check if `character` can be inside an unclosed URI. */\nfunction isUnclosedURLCharacter(character) {\n  return character !== C_BRACKET_OPEN &&\n    character !== C_BRACKET_CLOSE &&\n    !whitespace(character);\n}\n"]},"metadata":{},"sourceType":"script"}