{"ast":null,"code":"import{createReducer,nanoid}from'@reduxjs/toolkit';import{addPopup,removePopup,updateBlockNumber,setOpenModal}from'./actions';var initialState={blockNumber:{},popupList:[],openModal:null};export default createReducer(initialState,function(builder){return builder.addCase(updateBlockNumber,function(state,action){var _action$payload=action.payload,chainId=_action$payload.chainId,blockNumber=_action$payload.blockNumber;if(typeof state.blockNumber[chainId]!=='number'){state.blockNumber[chainId]=blockNumber;}else{state.blockNumber[chainId]=Math.max(blockNumber,state.blockNumber[chainId]);}}).addCase(setOpenModal,function(state,action){state.openModal=action.payload;}).addCase(addPopup,function(state,_ref){var _ref$payload=_ref.payload,content=_ref$payload.content,key=_ref$payload.key,_ref$payload$removeAf=_ref$payload.removeAfterMs,removeAfterMs=_ref$payload$removeAf===void 0?15000:_ref$payload$removeAf;state.popupList=(key?state.popupList.filter(function(popup){return popup.key!==key;}):state.popupList).concat([{key:key||nanoid(),show:true,content:content,removeAfterMs:removeAfterMs}]);}).addCase(removePopup,function(state,_ref2){var key=_ref2.payload.key;state.popupList.forEach(function(p){if(p.key===key){p.show=false;}});});});","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/application/reducer.ts"],"names":["createReducer","nanoid","addPopup","removePopup","updateBlockNumber","setOpenModal","initialState","blockNumber","popupList","openModal","builder","addCase","state","action","payload","chainId","Math","max","content","key","removeAfterMs","filter","popup","concat","show","forEach","p"],"mappings":"AAAA,OAASA,aAAT,CAAwBC,MAAxB,KAAsC,kBAAtC,CACA,OAASC,QAAT,CAAiCC,WAAjC,CAA8CC,iBAA9C,CAAmFC,YAAnF,KAAuG,WAAvG,CAUA,GAAMC,CAAAA,YAA8B,CAAG,CACrCC,WAAW,CAAE,EADwB,CAErCC,SAAS,CAAE,EAF0B,CAGrCC,SAAS,CAAE,IAH0B,CAAvC,CAMA,cAAeT,CAAAA,aAAa,CAACM,YAAD,CAAe,SAAAI,OAAO,QAChDA,CAAAA,OAAO,CACJC,OADH,CACWP,iBADX,CAC8B,SAACQ,KAAD,CAAQC,MAAR,CAAmB,qBACZA,MAAM,CAACC,OADK,CACrCC,OADqC,iBACrCA,OADqC,CAC5BR,WAD4B,iBAC5BA,WAD4B,CAE7C,GAAI,MAAOK,CAAAA,KAAK,CAACL,WAAN,CAAkBQ,OAAlB,CAAP,GAAsC,QAA1C,CAAoD,CAClDH,KAAK,CAACL,WAAN,CAAkBQ,OAAlB,EAA6BR,WAA7B,CACD,CAFD,IAEO,CACLK,KAAK,CAACL,WAAN,CAAkBQ,OAAlB,EAA6BC,IAAI,CAACC,GAAL,CAASV,WAAT,CAAsBK,KAAK,CAACL,WAAN,CAAkBQ,OAAlB,CAAtB,CAA7B,CACD,CACF,CARH,EASGJ,OATH,CASWN,YATX,CASyB,SAACO,KAAD,CAAQC,MAAR,CAAmB,CACxCD,KAAK,CAACH,SAAN,CAAkBI,MAAM,CAACC,OAAzB,CACD,CAXH,EAYGH,OAZH,CAYWT,QAZX,CAYqB,SAACU,KAAD,MAAiE,uBAAvDE,OAAuD,CAA5CI,OAA4C,cAA5CA,OAA4C,CAAnCC,GAAmC,cAAnCA,GAAmC,oCAA9BC,aAA8B,CAA9BA,aAA8B,gCAAd,KAAc,uBAClFR,KAAK,CAACJ,SAAN,CAAkB,CAACW,GAAG,CAAGP,KAAK,CAACJ,SAAN,CAAgBa,MAAhB,CAAuB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACH,GAAN,GAAcA,GAAlB,EAA5B,CAAH,CAAwDP,KAAK,CAACJ,SAAlE,EAA6Ee,MAA7E,CAAoF,CACpG,CACEJ,GAAG,CAAEA,GAAG,EAAIlB,MAAM,EADpB,CAEEuB,IAAI,CAAE,IAFR,CAGEN,OAAO,CAAPA,OAHF,CAIEE,aAAa,CAAbA,aAJF,CADoG,CAApF,CAAlB,CAQD,CArBH,EAsBGT,OAtBH,CAsBWR,WAtBX,CAsBwB,SAACS,KAAD,OAAiC,IAAZO,CAAAA,GAAY,OAAvBL,OAAuB,CAAZK,GAAY,CACrDP,KAAK,CAACJ,SAAN,CAAgBiB,OAAhB,CAAwB,SAAAC,CAAC,CAAI,CAC3B,GAAIA,CAAC,CAACP,GAAF,GAAUA,GAAd,CAAmB,CACjBO,CAAC,CAACF,IAAF,CAAS,KAAT,CACD,CACF,CAJD,EAKD,CA5BH,CADgD,EAAtB,CAA5B","sourcesContent":["import { createReducer, nanoid } from '@reduxjs/toolkit'\nimport { addPopup, PopupContent, removePopup, updateBlockNumber, ApplicationModal, setOpenModal } from './actions'\n\ntype PopupList = Array<{ key: string; show: boolean; content: PopupContent; removeAfterMs: number | null }>\n\nexport interface ApplicationState {\n  readonly blockNumber: { readonly [chainId: number]: number }\n  readonly popupList: PopupList\n  readonly openModal: ApplicationModal | null\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  openModal: null\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId])\n      }\n    })\n    .addCase(setOpenModal, (state, action) => {\n      state.openModal = action.payload\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\n      state.popupList = (key ? state.popupList.filter(popup => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs\n        }\n      ])\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach(p => {\n        if (p.key === key) {\n          p.show = false\n        }\n      })\n    })\n)\n"]},"metadata":{},"sourceType":"module"}