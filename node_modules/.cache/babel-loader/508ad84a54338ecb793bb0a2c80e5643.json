{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../util\");\n\nvar VBox =\n/** @class */\nfunction () {\n  function VBox(r1, r2, g1, g2, b1, b2, hist) {\n    this._volume = -1;\n    this._count = -1;\n    this.dimension = {\n      r1: r1,\n      r2: r2,\n      g1: g1,\n      g2: g2,\n      b1: b1,\n      b2: b2\n    };\n    this.hist = hist;\n  }\n\n  VBox.build = function (pixels, shouldIgnore) {\n    var hn = 1 << 3 * util_1.SIGBITS;\n    var hist = new Uint32Array(hn);\n    var rmax;\n    var rmin;\n    var gmax;\n    var gmin;\n    var bmax;\n    var bmin;\n    var r;\n    var g;\n    var b;\n    var a;\n    rmax = gmax = bmax = 0;\n    rmin = gmin = bmin = Number.MAX_VALUE;\n    var n = pixels.length / 4;\n    var i = 0;\n\n    while (i < n) {\n      var offset = i * 4;\n      i++;\n      r = pixels[offset + 0];\n      g = pixels[offset + 1];\n      b = pixels[offset + 2];\n      a = pixels[offset + 3]; // Ignored pixels' alpha is marked as 0 in filtering stage\n\n      if (a === 0) continue;\n      r = r >> util_1.RSHIFT;\n      g = g >> util_1.RSHIFT;\n      b = b >> util_1.RSHIFT;\n      var index = util_1.getColorIndex(r, g, b);\n      hist[index] += 1;\n      if (r > rmax) rmax = r;\n      if (r < rmin) rmin = r;\n      if (g > gmax) gmax = g;\n      if (g < gmin) gmin = g;\n      if (b > bmax) bmax = b;\n      if (b < bmin) bmin = b;\n    }\n\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist);\n  };\n\n  VBox.prototype.invalidate = function () {\n    this._volume = this._count = -1;\n    this._avg = null;\n  };\n\n  VBox.prototype.volume = function () {\n    if (this._volume < 0) {\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n    }\n\n    return this._volume;\n  };\n\n  VBox.prototype.count = function () {\n    if (this._count < 0) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var c = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            c += hist[index];\n          }\n        }\n      }\n\n      this._count = c;\n    }\n\n    return this._count;\n  };\n\n  VBox.prototype.clone = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    return new VBox(r1, r2, g1, g2, b1, b2, hist);\n  };\n\n  VBox.prototype.avg = function () {\n    if (!this._avg) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var ntot = 0;\n      var mult = 1 << 8 - util_1.SIGBITS;\n      var rsum = void 0;\n      var gsum = void 0;\n      var bsum = void 0;\n      rsum = gsum = bsum = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            var h = hist[index];\n            ntot += h;\n            rsum += h * (r + 0.5) * mult;\n            gsum += h * (g + 0.5) * mult;\n            bsum += h * (b + 0.5) * mult;\n          }\n        }\n      }\n\n      if (ntot) {\n        this._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n      } else {\n        this._avg = [~~(mult * (r1 + r2 + 1) / 2), ~~(mult * (g1 + g2 + 1) / 2), ~~(mult * (b1 + b2 + 1) / 2)];\n      }\n    }\n\n    return this._avg;\n  };\n\n  VBox.prototype.contains = function (rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2];\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    r >>= util_1.RSHIFT;\n    g >>= util_1.RSHIFT;\n    b >>= util_1.RSHIFT;\n    return r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2;\n  };\n\n  VBox.prototype.split = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    var count = this.count();\n    if (!count) return [];\n    if (count === 1) return [this.clone()];\n    var rw = r2 - r1 + 1;\n    var gw = g2 - g1 + 1;\n    var bw = b2 - b1 + 1;\n    var maxw = Math.max(rw, gw, bw);\n    var accSum = null;\n    var sum;\n    var total;\n    sum = total = 0;\n    var maxd = null;\n\n    if (maxw === rw) {\n      maxd = 'r';\n      accSum = new Uint32Array(r2 + 1);\n\n      for (var r = r1; r <= r2; r++) {\n        sum = 0;\n\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[r] = total;\n      }\n    } else if (maxw === gw) {\n      maxd = 'g';\n      accSum = new Uint32Array(g2 + 1);\n\n      for (var g = g1; g <= g2; g++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[g] = total;\n      }\n    } else {\n      maxd = 'b';\n      accSum = new Uint32Array(b2 + 1);\n\n      for (var b = b1; b <= b2; b++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var g = g1; g <= g2; g++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[b] = total;\n      }\n    }\n\n    var splitPoint = -1;\n    var reverseSum = new Uint32Array(accSum.length);\n\n    for (var i = 0; i < accSum.length; i++) {\n      var d = accSum[i];\n      if (splitPoint < 0 && d > total / 2) splitPoint = i;\n      reverseSum[i] = total - d;\n    }\n\n    var vbox = this;\n\n    function doCut(d) {\n      var dim1 = d + '1';\n      var dim2 = d + '2';\n      var d1 = vbox.dimension[dim1];\n      var d2 = vbox.dimension[dim2];\n      var vbox1 = vbox.clone();\n      var vbox2 = vbox.clone();\n      var left = splitPoint - d1;\n      var right = d2 - splitPoint;\n\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n        d2 = Math.max(0, d2);\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n        d2 = Math.min(vbox.dimension[dim2], d2);\n      }\n\n      while (!accSum[d2]) {\n        d2++;\n      }\n\n      var c2 = reverseSum[d2];\n\n      while (!c2 && accSum[d2 - 1]) {\n        c2 = reverseSum[--d2];\n      }\n\n      vbox1.dimension[dim2] = d2;\n      vbox2.dimension[dim1] = d2 + 1;\n      return [vbox1, vbox2];\n    }\n\n    return doCut(maxd);\n  };\n\n  return VBox;\n}();\n\nexports.default = VBox;","map":{"version":3,"sources":["../../src/quantizer/vbox.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../util\");\nvar VBox = /** @class */ (function () {\n    function VBox(r1, r2, g1, g2, b1, b2, hist) {\n        this._volume = -1;\n        this._count = -1;\n        this.dimension = { r1: r1, r2: r2, g1: g1, g2: g2, b1: b1, b2: b2 };\n        this.hist = hist;\n    }\n    VBox.build = function (pixels, shouldIgnore) {\n        var hn = 1 << (3 * util_1.SIGBITS);\n        var hist = new Uint32Array(hn);\n        var rmax;\n        var rmin;\n        var gmax;\n        var gmin;\n        var bmax;\n        var bmin;\n        var r;\n        var g;\n        var b;\n        var a;\n        rmax = gmax = bmax = 0;\n        rmin = gmin = bmin = Number.MAX_VALUE;\n        var n = pixels.length / 4;\n        var i = 0;\n        while (i < n) {\n            var offset = i * 4;\n            i++;\n            r = pixels[offset + 0];\n            g = pixels[offset + 1];\n            b = pixels[offset + 2];\n            a = pixels[offset + 3];\n            // Ignored pixels' alpha is marked as 0 in filtering stage\n            if (a === 0)\n                continue;\n            r = r >> util_1.RSHIFT;\n            g = g >> util_1.RSHIFT;\n            b = b >> util_1.RSHIFT;\n            var index = util_1.getColorIndex(r, g, b);\n            hist[index] += 1;\n            if (r > rmax)\n                rmax = r;\n            if (r < rmin)\n                rmin = r;\n            if (g > gmax)\n                gmax = g;\n            if (g < gmin)\n                gmin = g;\n            if (b > bmax)\n                bmax = b;\n            if (b < bmin)\n                bmin = b;\n        }\n        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist);\n    };\n    VBox.prototype.invalidate = function () {\n        this._volume = this._count = -1;\n        this._avg = null;\n    };\n    VBox.prototype.volume = function () {\n        if (this._volume < 0) {\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n        }\n        return this._volume;\n    };\n    VBox.prototype.count = function () {\n        if (this._count < 0) {\n            var hist = this.hist;\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            var c = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        c += hist[index];\n                    }\n                }\n            }\n            this._count = c;\n        }\n        return this._count;\n    };\n    VBox.prototype.clone = function () {\n        var hist = this.hist;\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        return new VBox(r1, r2, g1, g2, b1, b2, hist);\n    };\n    VBox.prototype.avg = function () {\n        if (!this._avg) {\n            var hist = this.hist;\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            var ntot = 0;\n            var mult = 1 << (8 - util_1.SIGBITS);\n            var rsum = void 0;\n            var gsum = void 0;\n            var bsum = void 0;\n            rsum = gsum = bsum = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        var h = hist[index];\n                        ntot += h;\n                        rsum += (h * (r + 0.5) * mult);\n                        gsum += (h * (g + 0.5) * mult);\n                        bsum += (h * (b + 0.5) * mult);\n                    }\n                }\n            }\n            if (ntot) {\n                this._avg = [\n                    ~~(rsum / ntot),\n                    ~~(gsum / ntot),\n                    ~~(bsum / ntot)\n                ];\n            }\n            else {\n                this._avg = [\n                    ~~(mult * (r1 + r2 + 1) / 2),\n                    ~~(mult * (g1 + g2 + 1) / 2),\n                    ~~(mult * (b1 + b2 + 1) / 2)\n                ];\n            }\n        }\n        return this._avg;\n    };\n    VBox.prototype.contains = function (rgb) {\n        var r = rgb[0], g = rgb[1], b = rgb[2];\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        r >>= util_1.RSHIFT;\n        g >>= util_1.RSHIFT;\n        b >>= util_1.RSHIFT;\n        return r >= r1 && r <= r2 &&\n            g >= g1 && g <= g2 &&\n            b >= b1 && b <= b2;\n    };\n    VBox.prototype.split = function () {\n        var hist = this.hist;\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        var count = this.count();\n        if (!count)\n            return [];\n        if (count === 1)\n            return [this.clone()];\n        var rw = r2 - r1 + 1;\n        var gw = g2 - g1 + 1;\n        var bw = b2 - b1 + 1;\n        var maxw = Math.max(rw, gw, bw);\n        var accSum = null;\n        var sum;\n        var total;\n        sum = total = 0;\n        var maxd = null;\n        if (maxw === rw) {\n            maxd = 'r';\n            accSum = new Uint32Array(r2 + 1);\n            for (var r = r1; r <= r2; r++) {\n                sum = 0;\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[r] = total;\n            }\n        }\n        else if (maxw === gw) {\n            maxd = 'g';\n            accSum = new Uint32Array(g2 + 1);\n            for (var g = g1; g <= g2; g++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[g] = total;\n            }\n        }\n        else {\n            maxd = 'b';\n            accSum = new Uint32Array(b2 + 1);\n            for (var b = b1; b <= b2; b++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var g = g1; g <= g2; g++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[b] = total;\n            }\n        }\n        var splitPoint = -1;\n        var reverseSum = new Uint32Array(accSum.length);\n        for (var i = 0; i < accSum.length; i++) {\n            var d = accSum[i];\n            if (splitPoint < 0 && d > total / 2)\n                splitPoint = i;\n            reverseSum[i] = total - d;\n        }\n        var vbox = this;\n        function doCut(d) {\n            var dim1 = d + '1';\n            var dim2 = d + '2';\n            var d1 = vbox.dimension[dim1];\n            var d2 = vbox.dimension[dim2];\n            var vbox1 = vbox.clone();\n            var vbox2 = vbox.clone();\n            var left = splitPoint - d1;\n            var right = d2 - splitPoint;\n            if (left <= right) {\n                d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n                d2 = Math.max(0, d2);\n            }\n            else {\n                d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n                d2 = Math.min(vbox.dimension[dim2], d2);\n            }\n            while (!accSum[d2])\n                d2++;\n            var c2 = reverseSum[d2];\n            while (!c2 && accSum[d2 - 1])\n                c2 = reverseSum[--d2];\n            vbox1.dimension[dim2] = d2;\n            vbox2.dimension[dim1] = d2 + 1;\n            return [vbox1, vbox2];\n        }\n        return doCut(maxd);\n    };\n    return VBox;\n}());\nexports.default = VBox;\n//# sourceMappingURL=vbox.js.map"]},"metadata":{},"sourceType":"script"}