{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ImageBase =\n/** @class */\nfunction () {\n  function ImageBase() {}\n\n  ImageBase.prototype.scaleDown = function (opts) {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var ratio = 1;\n\n    if (opts.maxDimension > 0) {\n      var maxSide = Math.max(width, height);\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide;\n    } else {\n      ratio = 1 / opts.quality;\n    }\n\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio);\n  };\n\n  ImageBase.prototype.applyFilter = function (filter) {\n    var imageData = this.getImageData();\n\n    if (typeof filter === 'function') {\n      var pixels = imageData.data;\n      var n = pixels.length / 4;\n      var offset = void 0,\n          r = void 0,\n          g = void 0,\n          b = void 0,\n          a = void 0;\n\n      for (var i = 0; i < n; i++) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3]; // Mark ignored color\n\n        if (!filter(r, g, b, a)) pixels[offset + 3] = 0;\n      }\n    }\n\n    return Promise.resolve(imageData);\n  };\n\n  return ImageBase;\n}();\n\nexports.ImageBase = ImageBase;","map":{"version":3,"sources":["../../src/image/base.ts"],"names":[],"mappings":";;;;;;AAEA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CA+CC;;AApCC,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAW,IAAX,EAAwB;AACtB,QAAI,KAAK,GAAW,KAAK,QAAL,EAApB;AACA,QAAI,MAAM,GAAW,KAAK,SAAL,EAArB;AAEA,QAAI,KAAK,GAAW,CAApB;;AAEA,QAAI,IAAI,CAAC,YAAL,GAAoB,CAAxB,EAA2B;AACzB,UAAI,OAAO,GAAW,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,MAAhB,CAAtB;AACA,UAAI,OAAO,GAAG,IAAI,CAAC,YAAnB,EAAiC,KAAK,GAAG,IAAI,CAAC,YAAL,GAAoB,OAA5B;AAClC,KAHD,MAGO;AACL,MAAA,KAAK,GAAG,IAAI,IAAI,CAAC,OAAjB;AACD;;AAED,QAAI,KAAK,GAAG,CAAZ,EAAe,KAAK,MAAL,CAAY,KAAK,GAAG,KAApB,EAA2B,MAAM,GAAG,KAApC,EAA2C,KAA3C;AAChB,GAdD;;AAgBA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAa,MAAb,EAA2B;AACzB,QAAI,SAAS,GAAG,KAAK,YAAL,EAAhB;;AAEA,QAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAI,MAAM,GAAG,SAAS,CAAC,IAAvB;AACA,UAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAxB;AACA,UAAI,MAAM,GAAA,KAAA,CAAV;AAAA,UAAY,CAAC,GAAA,KAAA,CAAb;AAAA,UAAe,CAAC,GAAA,KAAA,CAAhB;AAAA,UAAkB,CAAC,GAAA,KAAA,CAAnB;AAAA,UAAqB,CAAC,GAAA,KAAA,CAAtB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,QAAA,MAAM,GAAG,CAAC,GAAG,CAAb;AACA,QAAA,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAV,CAAV;AACA,QAAA,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAV,CAAV;AACA,QAAA,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAV,CAAV;AACA,QAAA,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAV,CAAV,CAL0B,CAM1B;;AACA,YAAI,CAAC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAX,EAAyB,MAAM,CAAC,MAAM,GAAG,CAAV,CAAN,GAAqB,CAArB;AAC1B;AACF;;AAED,WAAO,OAAO,CAAC,OAAR,CAAgB,SAAhB,CAAP;AACD,GAnBD;;AAoBF,SAAA,SAAA;AAAC,CA/CD,EAAA;;AAAsB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ImageBase = /** @class */ (function () {\n    function ImageBase() {\n    }\n    ImageBase.prototype.scaleDown = function (opts) {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        var ratio = 1;\n        if (opts.maxDimension > 0) {\n            var maxSide = Math.max(width, height);\n            if (maxSide > opts.maxDimension)\n                ratio = opts.maxDimension / maxSide;\n        }\n        else {\n            ratio = 1 / opts.quality;\n        }\n        if (ratio < 1)\n            this.resize(width * ratio, height * ratio, ratio);\n    };\n    ImageBase.prototype.applyFilter = function (filter) {\n        var imageData = this.getImageData();\n        if (typeof filter === 'function') {\n            var pixels = imageData.data;\n            var n = pixels.length / 4;\n            var offset = void 0, r = void 0, g = void 0, b = void 0, a = void 0;\n            for (var i = 0; i < n; i++) {\n                offset = i * 4;\n                r = pixels[offset + 0];\n                g = pixels[offset + 1];\n                b = pixels[offset + 2];\n                a = pixels[offset + 3];\n                // Mark ignored color\n                if (!filter(r, g, b, a))\n                    pixels[offset + 3] = 0;\n            }\n        }\n        return Promise.resolve(imageData);\n    };\n    return ImageBase;\n}());\nexports.ImageBase = ImageBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"script"}