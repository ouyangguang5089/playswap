{"ast":null,"code":"import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{TokenAmount,Pair}from'@uniswap/sdk';import{useMemo}from'react';import{abi as IUniswapV2PairABI}from'@uniswap/v2-core/build/IUniswapV2Pair.json';import{Interface}from'@ethersproject/abi';import{useActiveWeb3React}from'../hooks';import{useMultipleContractSingleData}from'../state/multicall/hooks';import{wrappedCurrency}from'../utils/wrappedCurrency';var PAIR_INTERFACE=new Interface(IUniswapV2PairABI);export var PairState;(function(PairState){PairState[PairState[\"LOADING\"]=0]=\"LOADING\";PairState[PairState[\"NOT_EXISTS\"]=1]=\"NOT_EXISTS\";PairState[PairState[\"EXISTS\"]=2]=\"EXISTS\";PairState[PairState[\"INVALID\"]=3]=\"INVALID\";})(PairState||(PairState={}));export function usePairs(currencies){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var tokens=useMemo(function(){return currencies.map(function(_ref){var _ref2=_slicedToArray(_ref,2),currencyA=_ref2[0],currencyB=_ref2[1];return[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)];});},[chainId,currencies]);var pairAddresses=useMemo(function(){return tokens.map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),tokenA=_ref4[0],tokenB=_ref4[1];return tokenA&&tokenB&&!tokenA.equals(tokenB)?Pair.getAddress(tokenA,tokenB):undefined;});},[tokens]);var results=useMultipleContractSingleData(pairAddresses,PAIR_INTERFACE,'getReserves');return useMemo(function(){return results.map(function(result,i){var reserves=result.result,loading=result.loading;var tokenA=tokens[i][0];var tokenB=tokens[i][1];if(loading)return[PairState.LOADING,null];if(!tokenA||!tokenB||tokenA.equals(tokenB))return[PairState.INVALID,null];if(!reserves)return[PairState.NOT_EXISTS,null];var reserve0=reserves.reserve0,reserve1=reserves.reserve1;var _ref5=tokenA.sortsBefore(tokenB)?[tokenA,tokenB]:[tokenB,tokenA],_ref6=_slicedToArray(_ref5,2),token0=_ref6[0],token1=_ref6[1];return[PairState.EXISTS,new Pair(new TokenAmount(token0,reserve0.toString()),new TokenAmount(token1,reserve1.toString()))];});},[results,tokens]);}export function usePair(tokenA,tokenB){return usePairs([[tokenA,tokenB]])[0];}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/data/Reserves.ts"],"names":["TokenAmount","Pair","useMemo","abi","IUniswapV2PairABI","Interface","useActiveWeb3React","useMultipleContractSingleData","wrappedCurrency","PAIR_INTERFACE","PairState","usePairs","currencies","chainId","tokens","map","currencyA","currencyB","pairAddresses","tokenA","tokenB","equals","getAddress","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","sortsBefore","token0","token1","EXISTS","toString","usePair"],"mappings":"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","sourcesContent":["import { TokenAmount, Pair, Currency } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { Interface } from '@ethersproject/abi'\nimport { useActiveWeb3React } from '../hooks'\n\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\n\nexport enum PairState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID\n}\n\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\n  const { chainId } = useActiveWeb3React()\n\n  const tokens = useMemo(\n    () =>\n      currencies.map(([currencyA, currencyB]) => [\n        wrappedCurrency(currencyA, chainId),\n        wrappedCurrency(currencyB, chainId)\n      ]),\n    [chainId, currencies]\n  )\n\n  const pairAddresses = useMemo(\n    () =>\n      tokens.map(([tokenA, tokenB]) => {\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\n      }),\n    [tokens]\n  )\n\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result\n      const tokenA = tokens[i][0]\n      const tokenB = tokens[i][1]\n\n      if (loading) return [PairState.LOADING, null]\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n      if (!reserves) return [PairState.NOT_EXISTS, null]\n      const { reserve0, reserve1 } = reserves\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n      return [\n        PairState.EXISTS,\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))\n      ]\n    })\n  }, [results, tokens])\n}\n\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\n  return usePairs([[tokenA, tokenB]])[0]\n}\n"]},"metadata":{},"sourceType":"module"}