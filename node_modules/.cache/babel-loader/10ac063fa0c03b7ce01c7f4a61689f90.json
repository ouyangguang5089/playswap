{"ast":null,"code":"import React from 'react';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar GestureFlag;\n\n(function (GestureFlag) {\n  GestureFlag[\"OnStart\"] = \"start\";\n  GestureFlag[\"OnChange\"] = \"change\";\n  GestureFlag[\"OnEnd\"] = \"end\";\n})(GestureFlag || (GestureFlag = {})); // blank function\n\n\nvar noop = function noop() {}; // returns a function that chains all functions given as parameters\n\n\nvar chainFns = function chainFns() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return fns.forEach(function (fn) {\n      return fn.apply(void 0, args);\n    });\n  };\n}; // vector add\n\n\nvar addV = function addV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v + v2[i];\n  });\n}; // vector substract\n\n\nvar subV = function subV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v - v2[i];\n  });\n};\n\nvar setListeners = function setListeners(add) {\n  return function (el, listeners, options) {\n    var action = add ? 'addEventListener' : 'removeEventListener';\n    listeners.forEach(function (_ref) {\n      var type = _ref[0],\n          fn = _ref[1];\n      return el[action](type, fn, options);\n    });\n  };\n};\n\nvar addListeners = /*#__PURE__*/setListeners(true);\nvar removeListeners = /*#__PURE__*/setListeners(false);\n/**\r\n * Gets modifier keys from event\r\n * @param event\r\n * @returns modifier keys\r\n */\n\nfunction getModifierKeys(event) {\n  var shiftKey = event.shiftKey,\n      altKey = event.altKey,\n      metaKey = event.metaKey,\n      ctrlKey = event.ctrlKey;\n  return {\n    shiftKey: shiftKey,\n    altKey: altKey,\n    metaKey: metaKey,\n    ctrlKey: ctrlKey\n  };\n}\n/**\r\n * Gets scroll event data\r\n * @param event\r\n * @returns scroll event data\r\n */\n\n\nfunction getScrollEventData(event) {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  var _event$currentTarget = event.currentTarget,\n      scrollX = _event$currentTarget.scrollX,\n      scrollY = _event$currentTarget.scrollY,\n      scrollLeft = _event$currentTarget.scrollLeft,\n      scrollTop = _event$currentTarget.scrollTop;\n  return _extends({\n    xy: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0]\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets wheel event data\r\n * @param event\r\n * @returns wheel event data\r\n */\n\n\nfunction getWheelEventData(event) {\n  var deltaX = event.deltaX,\n      deltaY = event.deltaY; //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n\n  return _extends({\n    xy: [deltaX, deltaY]\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets pointer event data\r\n * @param event\r\n * @returns pointer event data\r\n */\n\n\nfunction getPointerEventData(event) {\n  var touches = event.touches,\n      buttons = event.buttons,\n      changedTouches = event.changedTouches;\n  var touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null;\n\n  var _ref2 = touchEvents ? touchEvents[0] : event,\n      clientX = _ref2.clientX,\n      clientY = _ref2.clientY;\n\n  var down = touchEvents && touchEvents.length > 0 || buttons > 0;\n  return _extends({\n    xy: [clientX, clientY],\n    touches: touchEvents && touchEvents.length || 0,\n    down: down,\n    buttons: buttons\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets two touches event data\r\n * @param event\r\n * @returns two touches event data\r\n */\n\n\nfunction getTwoTouchesEventData(event) {\n  var touches = event.touches;\n  var dx = touches[1].clientX - touches[0].clientX;\n  var dy = touches[1].clientY - touches[0].clientY;\n  var da = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI];\n  var origin = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2];\n  return _extends({\n    da: da,\n    origin: origin,\n    touches: 2,\n    down: touches.length > 0\n  }, getModifierKeys(event));\n}\n/**\r\n * Calculates velocity\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time offset\r\n * @param len the length of the delta vector\r\n * @returns velocity\r\n */\n\n\nfunction calculateVelocity(delta, delta_t, len) {\n  len = len || Math.hypot.apply(Math, delta);\n  return delta_t ? len / delta_t : 0;\n}\n/**\r\n * Calculates velocities vector\r\n * @template T the expected vector type\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time offset\r\n * @returns velocities vector\r\n */\n\n\nfunction calculateVelocities(delta, delta_t) {\n  return delta_t ? delta.map(function (v) {\n    return v / delta_t;\n  }) : Array(delta.length).fill(0);\n}\n/**\r\n * Calculates distance\r\n * @param movement the difference between current and initial vectors\r\n * @returns distance\r\n */\n\n\nfunction calculateDistance(movement) {\n  return Math.hypot.apply(Math, movement);\n}\n/**\r\n * Calculates direction\r\n * @template T the expected vector type\r\n * @param delta\r\n * @param len\r\n * @returns direction\r\n */\n\n\nfunction calculateDirection(delta, len) {\n  len = len || Math.hypot.apply(Math, delta) || 1;\n  return delta.map(function (v) {\n    return v / len;\n  });\n}\n/**\r\n * Calculates all kinematics\r\n * @template T the expected vector type\r\n * @param movement the difference between current and initial vectors\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time difference between current and previous timestamps\r\n * @returns all kinematics\r\n */\n\n\nfunction calculateAllKinematics(movement, delta, delta_t) {\n  var len = Math.hypot.apply(Math, delta);\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len)\n  };\n}\n/**\r\n * Whether the browser supports GestureEvent (ie Safari)\r\n * @returns true if the browser supports gesture event\r\n */\n\n\nfunction gestureEventSupported() {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Some gestures might use the state key from another gesture (i.e. hover)\r\n * so mappedKeys is a commodity object to get the state key and handler key\r\n * for every gesture\r\n */\n\n\nvar mappedKeys = {\n  drag: {\n    stateKey: 'drag',\n    handlerKey: 'onDrag'\n  },\n  pinch: {\n    stateKey: 'pinch',\n    handlerKey: 'onPinch'\n  },\n  move: {\n    stateKey: 'move',\n    handlerKey: 'onMove'\n  },\n  scroll: {\n    stateKey: 'scroll',\n    handlerKey: 'onScroll'\n  },\n  wheel: {\n    stateKey: 'wheel',\n    handlerKey: 'onWheel'\n  },\n  hover: {\n    stateKey: 'move',\n    handlerKey: 'onHover'\n  }\n}; // default config (will extend user config)\n\nvar defaultConfig = {\n  domTarget: undefined,\n  event: {\n    passive: true,\n    capture: false\n  },\n  window: typeof window !== 'undefined' ? window : undefined,\n  dragDelay: false,\n  passiveEvents: true,\n  pointerEvents: false,\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true\n}; // common initial state for all gestures\n\nvar initialCommon = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  delta: [0, 0],\n  movement: [0, 0],\n  offset: [0, 0],\n  direction: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined\n}; // initial state for coordinates-based gestures\n\nvar initialCoordinates = {\n  xy: [0, 0],\n  vxvy: [0, 0],\n  velocity: 0,\n  distance: 0\n}; // xy coordinates\n// initial state for distance and angle-based gestures (pinch)\n\nvar initialDistanceAngle = {\n  da: [0, 0],\n  vdva: [0, 0],\n  origin: undefined,\n  turns: 0\n}; // distance and angle\n// initial state object (used by the gesture controller)\n\nvar initialState = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false\n  },\n  move: /*#__PURE__*/_extends({}, initialCommon, {}, initialCoordinates),\n  drag: /*#__PURE__*/_extends({}, initialCommon, {}, initialCoordinates),\n  scroll: /*#__PURE__*/_extends({}, initialCommon, {}, initialCoordinates),\n  wheel: /*#__PURE__*/_extends({}, initialCommon, {}, initialCoordinates),\n  pinch: /*#__PURE__*/_extends({}, initialCommon, {}, initialDistanceAngle)\n}; // generic end state for all gestures\n\nvar genericEndState = {\n  first: false,\n  last: true,\n  active: false\n};\n/**\r\n * Recognizer abstract class\r\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\r\n */\n\nvar Recognizer = /*#__PURE__*/function () {\n  /**\r\n   * Creates an instance of a gesture recognizer.\r\n   * @param gestureKey drag, move, hover, pinch, etc.\r\n   * @param controller the controller attached to the gesture\r\n   * @param [args] the args that should be passed to the gesture handler\r\n   */\n  function Recognizer(gestureKey, controller, args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = [];\n    }\n\n    this.gestureKey = gestureKey;\n    this.controller = controller;\n    this.args = args;\n    /**\r\n     * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.\r\n     * In other words, these gestures also start with a delta.\r\n     */\n\n    this.continuousGesture = false; // convenience method to set a timeout for a given gesture\n\n    this.setTimeout = function (callback, ms) {\n      var _window;\n\n      if (ms === void 0) {\n        ms = 140;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      _this.controller.timeouts[_this.stateKey] = (_window = window).setTimeout.apply(_window, [callback, ms].concat(args));\n    }; // convenience method to clear a timeout for a given gesture\n\n\n    this.clearTimeout = function () {\n      clearTimeout(_this.controller.timeouts[_this.stateKey]);\n    }; // convenience method to add window listeners for a given gesture\n\n\n    this.addWindowListeners = function (listeners) {\n      _this.controller.addWindowListeners(_this.stateKey, listeners);\n    }; // convenience method to remove window listeners for a given gesture\n\n\n    this.removeWindowListeners = function () {\n      _this.controller.removeWindowListeners(_this.stateKey);\n    };\n    /**\r\n     * convenience method to update the controller state for a given gesture\r\n     * @param sharedState shared partial state object\r\n     * @param gestureState partial state object for the gesture handled by the recognizer\r\n     * @param [gestureFlag] if set, will also fire the gesture handler set by the user\r\n     */\n\n\n    this.updateState = function (sharedState, gestureState) {\n      _this.controller.updateState(sharedState, gestureState, _this.stateKey);\n    };\n\n    this.fireGestureHandler = function (gestureFlag) {\n      _this.controller.fireGestureHandler(_this.gestureKey, gestureFlag);\n    }; // generic onStart function\n\n\n    this.onStart = function (event, payload) {\n      var _this$getPayloadFromE = _this.getPayloadFromEvent(event),\n          values = _this$getPayloadFromE.values,\n          gesturePayload = _this$getPayloadFromE.gesturePayload,\n          sharedPayload = _this$getPayloadFromE.sharedPayload; // TODO probably needs some rework, initialState and resetState should be different\n\n\n      var startState = _extends({}, initialState[_this.stateKey], {\n        values: values,\n        event: event,\n        first: true,\n        active: true,\n        time: event.timeStamp,\n        args: _this.args\n      });\n\n      var _this$state = _this.state,\n          prevValues = _this$state.values,\n          offset = _this$state.offset;\n\n      if (_this.continuousGesture) {\n        startState.initial = startState.previous = prevValues;\n        startState.delta = startState.movement = subV(values, prevValues);\n        startState.offset = values;\n        Object.assign(startState, calculateAllKinematics(startState.movement, startState.delta, 0));\n      } else {\n        startState.initial = startState.previous = values;\n        startState.offset = offset;\n      }\n\n      _this.updateState(_extends({}, _this.sharedStartState, {}, sharedPayload), _extends({}, startState, {}, gesturePayload, {}, payload));\n\n      _this.fireGestureHandler(GestureFlag.OnStart);\n    }; // generic onChange function\n\n\n    this.onChange = function (event, payload) {\n      var _this$getPayloadFromE2 = _this.getPayloadFromEvent(event),\n          values = _this$getPayloadFromE2.values,\n          gesturePayload = _this$getPayloadFromE2.gesturePayload,\n          sharedPayload = _this$getPayloadFromE2.sharedPayload;\n\n      var kinematics = _this.getKinematics(values, event);\n\n      _this.updateState(_extends({}, sharedPayload), _extends({\n        first: false\n      }, kinematics, {}, gesturePayload, {}, payload));\n\n      _this.fireGestureHandler(GestureFlag.OnChange);\n    }; // generic onEnd function\n\n\n    this.onEnd = function (event, payload) {\n      if (!_this.state.active) return;\n\n      _this.removeWindowListeners();\n\n      _this.updateState(_this.sharedEndState, _extends({\n        event: event\n      }, genericEndState, {}, payload));\n\n      _this.fireGestureHandler(GestureFlag.OnEnd);\n    }; // generic cancel function\n\n\n    this.onCancel = function (event) {\n      _this.updateState(null, {\n        canceled: true,\n        cancel: noop\n      });\n\n      requestAnimationFrame(function () {\n        return _this.onEnd(event);\n      });\n    }; // generic gesture handler for timeout-based gestures\n\n\n    this.timeoutHandler = function (event) {\n      if (!_this.enabled) return;\n\n      _this.clearTimeout();\n\n      _this.setTimeout(_this.onEnd);\n\n      if (!_this.state.active) _this.onStart(event);else _this.onChange(event);\n    }; // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n\n\n    this.stateKey = mappedKeys[gestureKey].stateKey;\n  } // is the gesture enabled\n\n\n  _createClass(Recognizer, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.controller.config.enabled && this.controller.config[this.gestureKey];\n    } // get the controller state for a given gesture\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.controller.state[this.stateKey];\n    }\n  }]);\n\n  return Recognizer;\n}();\n/**\r\n * Abstract class for coordinates-based gesture recongizers\r\n */\n\n\nvar CoordinatesRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inheritsLoose(CoordinatesRecognizer, _Recognizer);\n\n  function CoordinatesRecognizer() {\n    return _Recognizer.apply(this, arguments) || this;\n  }\n\n  var _proto = CoordinatesRecognizer.prototype;\n\n  _proto.getKinematics = function getKinematics(values, event) {\n    // we get the gesture specific state\n    var _this$state = this.state,\n        xy = _this$state.values,\n        initial = _this$state.initial,\n        offset = _this$state.offset,\n        time = _this$state.time; // offset is the difference between the current and initial value vectors\n\n    var movement = subV(values, initial); // delta is the difference between the current and previous value vectors\n\n    var delta = subV(values, xy);\n    var delta_t = event.timeStamp - time;\n\n    var _calculateAllKinemati = calculateAllKinematics(movement, delta, delta_t),\n        velocity = _calculateAllKinemati.velocity,\n        velocities = _calculateAllKinemati.velocities,\n        distance = _calculateAllKinemati.distance,\n        direction = _calculateAllKinemati.direction;\n\n    return {\n      event: event,\n      values: values,\n      movement: movement,\n      offset: addV(offset, delta),\n      delta: delta,\n      velocity: velocity,\n      vxvy: velocities,\n      distance: distance,\n      direction: direction,\n      previous: xy,\n      time: event.timeStamp\n    };\n  };\n\n  return CoordinatesRecognizer;\n}(Recognizer);\n\nvar DEFAULT_DRAG_DELAY = 180;\n\nvar DragRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(DragRecognizer, _CoordinatesRecognize);\n\n  function DragRecognizer(controller, args) {\n    var _this;\n\n    _this = _CoordinatesRecognize.call(this, 'drag', controller, args) || this;\n    _this.sharedStartState = {\n      dragging: true,\n      down: true\n    };\n    _this.sharedEndState = {\n      dragging: false,\n      down: false,\n      buttons: 0,\n      touches: 0\n    };\n    _this.delayedEvent = false;\n\n    _this.onDragStart = function (event) {\n      if (!_this.enabled) return; // making sure we're not dragging the element when more than one finger press the screen\n\n      var _getPointerEventData = getPointerEventData(event),\n          touches = _getPointerEventData.touches;\n\n      if (touches > 1) return;\n      var currentTarget = event.currentTarget,\n          pointerId = event.pointerId;\n\n      if (_this.controller.config.pointerEvents) {\n        // if pointers events\n        currentTarget && currentTarget.setPointerCapture(pointerId);\n      } else {\n        _this.removeWindowListeners();\n\n        var dragListeners = [['mousemove', _this.onDragChange], ['touchmove', _this.onDragChange], ['mouseup', _this.onDragEnd], ['touchend', _this.onDragEnd], ['touchcancel', _this.onDragEnd]];\n\n        _this.addWindowListeners(dragListeners);\n      }\n\n      if (_this.controller.config.dragDelay) {\n        var dragDelay = typeof _this.controller.config.dragDelay === 'number' ? _this.controller.config.dragDelay : DEFAULT_DRAG_DELAY;\n        if (typeof event.persist === 'function') event.persist();\n        _this.delayedEvent = true;\n\n        _this.setTimeout(function () {\n          return _this.startDrag(event);\n        }, dragDelay);\n      } else {\n        _this.startDrag(event);\n      }\n    };\n\n    _this.startDrag = function (event) {\n      var currentTarget = event.currentTarget,\n          pointerId = event.pointerId;\n\n      _this.onStart(event, {\n        currentTarget: currentTarget,\n        pointerId: pointerId,\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n\n      _this.delayedEvent = false;\n    };\n\n    _this.onDragChange = function (event) {\n      var _this$state = _this.state,\n          canceled = _this$state.canceled,\n          active = _this$state.active;\n      if (canceled) return;\n\n      if (!active) {\n        if (_this.delayedEvent) {\n          _this.clearTimeout();\n\n          _this.startDrag(event);\n        }\n\n        return;\n      }\n\n      var _getPointerEventData2 = getPointerEventData(event),\n          buttons = _getPointerEventData2.buttons,\n          touches = _getPointerEventData2.touches;\n\n      if (buttons === 0 && touches === 0) {\n        _this.onEnd(event);\n\n        return;\n      }\n\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n\n    _this.onDragEnd = function (event) {\n      _this.clearTimeout();\n\n      _this.delayedEvent = false;\n      if (!_this.state.active) return;\n      var _this$state2 = _this.state,\n          currentTarget = _this$state2.currentTarget,\n          pointerId = _this$state2.pointerId;\n      if (currentTarget && _this.controller.config.pointerEvents) currentTarget.releasePointerCapture(pointerId);\n\n      _this.onEnd(event);\n    };\n\n    return _this;\n  }\n\n  var _proto = DragRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData3 = getPointerEventData(event),\n        xy = _getPointerEventData3.xy,\n        sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData3, [\"xy\"]);\n\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerDown', this.onDragStart], ['onPointerMove', this.onDragChange], [['onPointerUp'], this.onDragEnd]];\n    }\n\n    return [[['onMouseDown', 'onTouchStart'], this.onDragStart]];\n  };\n\n  return DragRecognizer;\n}(CoordinatesRecognizer);\n\nvar ScrollRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(ScrollRecognizer, _CoordinatesRecognize);\n\n  function ScrollRecognizer(controller, args) {\n    var _this;\n\n    _this = _CoordinatesRecognize.call(this, 'scroll', controller, args) || this;\n    _this.sharedStartState = {\n      scrolling: true\n    };\n    _this.sharedEndState = {\n      scrolling: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    _this.continuousGesture = true;\n    return _this;\n  }\n\n  var _proto = ScrollRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getScrollEventData = getScrollEventData(event),\n        xy = _getScrollEventData.xy,\n        sharedPayload = _objectWithoutPropertiesLoose(_getScrollEventData, [\"xy\"]);\n\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onScroll', this.timeoutHandler]];\n  };\n\n  return ScrollRecognizer;\n}(CoordinatesRecognizer);\n\nvar WheelRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(WheelRecognizer, _CoordinatesRecognize);\n\n  function WheelRecognizer(controller, args) {\n    var _this;\n\n    _this = _CoordinatesRecognize.call(this, 'wheel', controller, args) || this;\n    _this.sharedStartState = {\n      wheeling: true\n    };\n    _this.sharedEndState = {\n      wheeling: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    _this.continuousGesture = true;\n\n    _this.onWheel = function (event) {\n      if (event.ctrlKey && _this.controller.actions.has('onPinch')) return;\n\n      _this.timeoutHandler(event);\n    };\n\n    return _this;\n  }\n\n  var _proto = WheelRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var prevXY = this.state.xy;\n\n    var _getWheelEventData = getWheelEventData(event),\n        xy = _getWheelEventData.xy,\n        sharedPayload = _objectWithoutPropertiesLoose(_getWheelEventData, [\"xy\"]);\n\n    var values = addV(xy, prevXY);\n    return {\n      values: values,\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onWheel', this.onWheel]];\n  };\n\n  return WheelRecognizer;\n}(CoordinatesRecognizer);\n\nvar MoveRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(MoveRecognizer, _CoordinatesRecognize);\n\n  function MoveRecognizer(controller, args) {\n    var _this;\n\n    _this = _CoordinatesRecognize.call(this, 'move', controller, args) || this;\n    _this.sharedStartState = {\n      moving: true\n    };\n    _this.sharedEndState = {\n      moving: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    return _this;\n  }\n\n  var _proto = MoveRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData = getPointerEventData(event),\n        xy = _getPointerEventData.xy,\n        sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData, [\"xy\"]);\n\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerMove', this.timeoutHandler]];\n    }\n\n    return [['onMouseMove', this.timeoutHandler]];\n  };\n\n  return MoveRecognizer;\n}(CoordinatesRecognizer);\n\nvar HoverRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(HoverRecognizer, _CoordinatesRecognize);\n\n  function HoverRecognizer(controller, args) {\n    var _this;\n\n    _this = _CoordinatesRecognize.call(this, 'hover', controller, args) || this;\n\n    _this.onPointerEnter = function (event) {\n      if (!_this.enabled) return;\n\n      var _this$getPayloadFromE = _this.getPayloadFromEvent(event),\n          values = _this$getPayloadFromE.values,\n          sharedPayload = _this$getPayloadFromE.sharedPayload;\n\n      _this.updateState(_extends({\n        hovering: true\n      }, sharedPayload), {\n        values: values,\n        event: event,\n        args: _this.args\n      });\n\n      _this.fireGestureHandler(GestureFlag.OnChange);\n    };\n\n    _this.onPointerLeave = function (event) {\n      if (!_this.enabled) return;\n\n      var _this$getPayloadFromE2 = _this.getPayloadFromEvent(event),\n          values = _this$getPayloadFromE2.values,\n          sharedPayload = _this$getPayloadFromE2.sharedPayload;\n\n      var kinematics = _this.getKinematics(values, event);\n\n      _this.updateState(_extends({\n        hovering: false,\n        moving: false\n      }, sharedPayload), _extends({}, kinematics, {}, genericEndState, {\n        velocity: 0,\n        vxvy: [0, 0]\n      })); // when the mouse leaves the element, we also fire the move handler\n      // without waiting for move to end with debounce\n\n\n      _this.controller.fireGestureHandler('move', GestureFlag.OnEnd);\n\n      _this.controller.fireGestureHandler('hover', GestureFlag.OnChange);\n    };\n\n    return _this;\n  }\n\n  var _proto = HoverRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData = getPointerEventData(event),\n        xy = _getPointerEventData.xy,\n        sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData, [\"xy\"]);\n\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerEnter', this.onPointerEnter], ['onPointerLeave', this.onPointerLeave]];\n    }\n\n    return [['onMouseEnter', this.onPointerEnter], ['onMouseLeave', this.onPointerLeave]];\n  };\n\n  return HoverRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Abstract class for distance/angle-based gesture recongizers\r\n */\n\n\nvar DistanceAngleRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inheritsLoose(DistanceAngleRecognizer, _Recognizer);\n\n  function DistanceAngleRecognizer(gestureKey, controller, args) {\n    if (args === void 0) {\n      args = [];\n    }\n\n    return _Recognizer.call(this, gestureKey, controller, args) || this;\n  }\n\n  var _proto = DistanceAngleRecognizer.prototype;\n\n  _proto.getKinematics = function getKinematics(_ref, event) {\n    var d = _ref[0],\n        a = _ref[1];\n    var _this$state = this.state,\n        da = _this$state.values,\n        turns = _this$state.turns,\n        initial = _this$state.initial,\n        offset = _this$state.offset,\n        time = _this$state.time; // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n\n    a = a !== void 0 ? a : da[1];\n    var delta_d = d - da[0];\n    var delta_a = a - da[1];\n    /**\r\n     * The angle value might jump from 179deg to -179deg when we actually want to\r\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\r\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\r\n     */\n\n    var newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns; // we update the angle difference to its corrected value\n\n    delta_a -= 360 * (newTurns - turns);\n    var delta = [delta_d, delta_a];\n    var movement_d = d - initial[0];\n    var movement_a = a - 360 * newTurns - initial[1];\n    var movement = [movement_d, movement_a];\n    var delta_t = event.timeStamp - time;\n    var vdva = calculateVelocities(delta, delta_t);\n    var direction = calculateDirection(delta);\n    return {\n      event: event,\n      values: [d, a],\n      movement: movement,\n      delta: delta,\n      offset: addV(offset, delta),\n      vdva: vdva,\n      direction: direction,\n      turns: newTurns,\n      previous: da,\n      time: event.timeStamp\n    };\n  };\n\n  return DistanceAngleRecognizer;\n}(Recognizer);\n\nvar PinchRecognizer = /*#__PURE__*/function (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchRecognizer, _DistanceAngleRecogni);\n\n  function PinchRecognizer(controller, args) {\n    var _this;\n\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true\n    };\n    _this.sharedEndState = {\n      pinching: false,\n      down: false,\n      touches: 0\n    };\n\n    _this.onPinchStart = function (event) {\n      if (!_this.enabled || event.touches.length !== 2) return;\n\n      _this.onStart(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n\n    _this.onPinchChange = function (event) {\n      var _this$state = _this.state,\n          canceled = _this$state.canceled,\n          active = _this$state.active,\n          time = _this$state.time;\n      if (canceled || !active || event.touches.length !== 2 || event.timeStamp === time) return;\n\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getTwoTouchesEventDa = getTwoTouchesEventData(event),\n        da = _getTwoTouchesEventDa.da,\n        origin = _getTwoTouchesEventDa.origin,\n        sharedPayload = _objectWithoutPropertiesLoose(_getTwoTouchesEventDa, [\"da\", \"origin\"]);\n\n    return {\n      values: da,\n      gesturePayload: {\n        origin: origin\n      },\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onTouchStart', this.onPinchStart], ['onTouchMove', this.onPinchChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]];\n  };\n\n  return PinchRecognizer;\n}(DistanceAngleRecognizer);\n\nvar PinchWheelRecognizer = /*#__PURE__*/function (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchWheelRecognizer, _DistanceAngleRecogni);\n\n  function PinchWheelRecognizer(controller, args) {\n    var _this;\n\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true\n    };\n    _this.sharedEndState = {\n      pinching: false\n    };\n\n    _this.onWheel = function (event) {\n      if (!event.ctrlKey) return;\n      if (!_this.controller.config.passiveEvents) event.preventDefault();else if (process.env.NODE_ENV === 'development') console.warn('To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.');\n\n      _this.timeoutHandler(event);\n    };\n\n    return _this;\n  }\n\n  var _proto = PinchWheelRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getWheelEventData = getWheelEventData(event),\n        _getWheelEventData$xy = _getWheelEventData.xy,\n        delta_d = _getWheelEventData$xy[1],\n        sharedPayload = _objectWithoutPropertiesLoose(_getWheelEventData, [\"xy\"]);\n\n    var _this$state$da = this.state.da,\n        prev_d = _this$state$da[0],\n        prev_a = _this$state$da[1];\n    var d = prev_d - delta_d;\n    var a = prev_a !== void 0 ? prev_a : 0;\n    var origin = [event.clientX, event.clientY];\n    return {\n      values: [d, a],\n      gesturePayload: {\n        origin: origin\n      },\n      sharedPayload: sharedPayload\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onWheel', this.onWheel]];\n  };\n\n  return PinchWheelRecognizer;\n}(DistanceAngleRecognizer);\n\nvar SCALE_FACTOR = 260;\n\nvar PinchWebKitGestureRecognizer = /*#__PURE__*/function (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchWebKitGestureRecognizer, _DistanceAngleRecogni);\n\n  function PinchWebKitGestureRecognizer(controller, args) {\n    var _this;\n\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true,\n      down: true,\n      touches: 2\n    };\n    _this.sharedEndState = {\n      pinching: false,\n      down: false,\n      touches: 0\n    };\n\n    _this.onPinchStart = function (event) {\n      if (!_this.enabled) return;\n      event.preventDefault();\n      var origin = _this.origin ? _this.origin : [event.clientX, event.clientY];\n\n      _this.onStart(event, {\n        origin: origin,\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n\n    _this.onPinchChange = function (event) {\n      var _this$state = _this.state,\n          canceled = _this$state.canceled,\n          active = _this$state.active;\n      if (canceled || !active) return;\n      event.preventDefault();\n\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n\n    _this.onGestureEnd = function (event) {\n      _this.onEnd(event);\n\n      event.preventDefault();\n      _this.origin = undefined;\n    };\n\n    _this.updateTouchData = function (event) {\n      if (!_this.enabled || event.touches.length !== 2) return;\n\n      var _getTwoTouchesEventDa = getTwoTouchesEventData(event),\n          origin = _getTwoTouchesEventDa.origin;\n\n      _this.origin = origin;\n    };\n\n    return _this;\n  }\n\n  var _proto = PinchWebKitGestureRecognizer.prototype;\n\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    return {\n      values: [event.scale * SCALE_FACTOR, event.rotation]\n    };\n  };\n\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onGestureStart', this.onPinchStart], ['onGestureChange', this.onPinchChange], [['onGestureEnd', 'onTouchCancel'], this.onGestureEnd], [['onTouchStart', 'onTouchMove'], this.updateTouchData]];\n  };\n\n  return PinchWebKitGestureRecognizer;\n}(DistanceAngleRecognizer);\n/**\r\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\r\n * and keep track of the state for all gestures\r\n *\r\n * @template BinderType the type the bind function should return\r\n */\n\n\nvar GestureController = function GestureController(handlers, config) {\n  var _this = this;\n\n  this.handlers = handlers;\n  this.config = config;\n  this.state = initialState; // state for all gestures\n\n  this.timeouts = {}; // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n\n  this.bindings = {}; // an object holding the handlers associated to the gestures\n\n  this.domListeners = []; // when config.domTarget is set, we attach events directly to the dom\n\n  this.windowListeners = {}; // keeps track of window listeners added by gestures (drag only at the moment)\n\n  /**\r\n   * Function run on component unmount\r\n   * Cleans timeouts and removes dom listeners set by the bind function\r\n   */\n\n  this.clean = function () {\n    _this.cleanOnBind();\n\n    Object.values(_this.timeouts).forEach(clearTimeout);\n    Object.keys(_this.windowListeners).forEach(function (stateKey) {\n      return _this.removeWindowListeners(stateKey);\n    });\n  };\n  /**\r\n   * Function run every time the bind function is run (ie on every render)\r\n   * Reset the binding object and remove dom listeners attached to config.domTarget\r\n   */\n\n\n  this.cleanOnBind = function () {\n    _this.bindings = {};\n    var domTarget = _this.config.domTarget;\n\n    if (domTarget) {\n      removeListeners(domTarget, _this.domListeners, _this.config.event);\n      _this.domListeners = [];\n    }\n  };\n  /**\r\n   * Commodity function to let gesture recognizer update global state\r\n   * @param sharedState shared partial state object\r\n   * @param gestureState partial gesture specific state object\r\n   * @param stateKey the state key ('drag', 'move'...)\r\n   */\n\n\n  this.updateState = function (sharedState, gestureState, stateKey) {\n    var _extends2;\n\n    var newGestureState = _extends({}, _this.state[stateKey], {}, gestureState);\n\n    if ('da' in newGestureState) newGestureState.da = newGestureState.values;else if ('xy' in newGestureState) newGestureState.xy = newGestureState.values;\n    _this.state = _extends({}, _this.state, (_extends2 = {\n      shared: _extends({}, _this.state.shared, {}, sharedState)\n    }, _extends2[stateKey] = newGestureState, _extends2));\n  }; // fire the gesture handler defined by the user\n\n\n  this.fireGestureHandler = function (gestureKey, gestureFlag) {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    var _mappedKeys$gestureKe = mappedKeys[gestureKey],\n        stateKey = _mappedKeys$gestureKe.stateKey,\n        handlerKey = _mappedKeys$gestureKe.handlerKey;\n\n    var state = _extends({}, _this.state.shared, {}, _this.state[stateKey]);\n\n    if (state.event) state.event.gesture = gestureKey;\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      var handlerStart = handlerKey + \"Start\";\n      var _handler = _this.handlers[handlerStart];\n      _handler && _handler(state);\n    } // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n\n\n    var handler = _this.handlers[handlerKey];\n\n    if (handler) {\n      var newMemo = handler(state);\n      _this.state[stateKey].memo = newMemo !== void 0 ? newMemo : _this.state[stateKey].memo;\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      var handlerEnd = handlerKey + \"End\";\n      var _handler2 = _this.handlers[handlerEnd];\n      _handler2 && _handler2(state);\n    }\n  };\n  /**\r\n   * Commodity function to let recognizers simply add listeners to config.window\r\n   * @param stateKey\r\n   * @param listeners\r\n   */\n\n\n  this.addWindowListeners = function (stateKey, listeners) {\n    if (!_this.config.window) return; // we use this.windowListeners to keep track of the listeners we add\n\n    _this.windowListeners[stateKey] = listeners;\n    addListeners(_this.config.window, listeners, _this.config.event);\n  }; // commodity function to let recognizers simply remove listeners from config.window\n\n\n  this.removeWindowListeners = function (stateKey) {\n    if (!_this.config.window) return;\n    var listeners = _this.windowListeners[stateKey];\n\n    if (listeners) {\n      removeListeners(_this.config.window, listeners, _this.config.event);\n      delete _this.windowListeners[stateKey];\n    }\n  };\n  /**\r\n   * Adds a recognizer to this.bindings\r\n   * @param recognizer\r\n   */\n\n\n  this.addRecognizer = function (recognizer) {\n    recognizer.getEventBindings().map(_this.addEventBindings);\n  };\n  /**\r\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\r\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\r\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\r\n   * that key.\r\n   */\n\n\n  this.addEventBindings = function (_ref) {\n    var eventNames = _ref[0],\n        fn = _ref[1];\n    var eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames;\n    eventNamesArray.forEach(function (eventName) {\n      _this.bindings[eventName] = _this.bindings[eventName] ? [].concat(_this.bindings[eventName], [fn]) : [fn];\n    });\n  };\n  /**\r\n   * When config.domTarget is set, this function will add dom listeners to it\r\n   */\n\n\n  this.addDomTargetListeners = function () {\n    var domTarget = _this.config.domTarget; // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n\n    Object.entries(_this.bindings).forEach(function (_ref2) {\n      var event = _ref2[0],\n          fns = _ref2[1];\n\n      _this.domListeners.push([event.substr(2).toLowerCase(), chainFns.apply(void 0, fns)]);\n    });\n    addListeners(domTarget, _this.domListeners, _this.config.event);\n  };\n  /**\r\n   * getBindings will return an object that will be bound by users\r\n   * to the react component they want to interact with\r\n   */\n\n\n  this.getBindings = function () {\n    var output = {};\n    var captureString = _this.config.event.capture ? 'Capture' : '';\n    Object.entries(_this.bindings).forEach(function (_ref3) {\n      var event = _ref3[0],\n          fns = _ref3[1];\n      var fnsArray = Array.isArray(fns) ? fns : [fns];\n      var key = event + captureString;\n      output[key] = chainFns.apply(void 0, fnsArray);\n    });\n    return output;\n  };\n\n  this.bind = function () {\n    var domTarget = _this.config.domTarget;\n\n    var genuineHandlers = _extends({}, _this.handlers); // cleaning before adding\n\n\n    _this.cleanOnBind();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (_this.actions.has('onDrag')) {\n      _this.addRecognizer(new DragRecognizer(_this, args));\n\n      delete genuineHandlers.onDrag;\n      delete genuineHandlers.onDragStart;\n      delete genuineHandlers.onDragEnd;\n    }\n\n    if (_this.actions.has('onScroll')) {\n      _this.addRecognizer(new ScrollRecognizer(_this, args));\n\n      delete genuineHandlers.onScroll;\n      delete genuineHandlers.onScrollStart;\n      delete genuineHandlers.onScrollEnd;\n    }\n\n    if (_this.actions.has('onWheel')) {\n      _this.addRecognizer(new WheelRecognizer(_this, args));\n\n      delete genuineHandlers.onWheel;\n      delete genuineHandlers.onWheelStart;\n      delete genuineHandlers.onWheelEnd;\n    }\n\n    if (_this.actions.has('onMove')) {\n      _this.addRecognizer(new MoveRecognizer(_this, args));\n\n      delete genuineHandlers.onMove;\n      delete genuineHandlers.onMoveStart;\n      delete genuineHandlers.onMoveEnd;\n    }\n\n    if (_this.actions.has('onHover')) {\n      _this.addRecognizer(new HoverRecognizer(_this, args));\n\n      delete genuineHandlers.onHover;\n    }\n\n    if (_this.actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && gestureEventSupported()) {\n        _this.addRecognizer(new PinchWebKitGestureRecognizer(_this, args));\n      } else {\n        _this.addRecognizer(new PinchRecognizer(_this, args));\n\n        _this.addRecognizer(new PinchWheelRecognizer(_this, args));\n      }\n\n      delete genuineHandlers.onPinch;\n      delete genuineHandlers.onPinchStart;\n      delete genuineHandlers.onPinchEnd;\n    } // we also add event bindings for genuine handlers\n\n\n    Object.entries(genuineHandlers).map(function (_ref4) {\n      var event = _ref4[0],\n          fn = _ref4[1]; // we're cheating when it comes to event type :(\n\n      _this.addEventBindings([event, fn]);\n    }); // if config.domTarget is set we add event listeners to it and return the clean function\n\n    if (domTarget) {\n      _this.addDomTargetListeners();\n\n      return _this.clean;\n    } // if not, we return an object that contains gesture handlers mapped to react handler event keys\n\n\n    return _this.getBindings();\n  }; // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n  // actions will include 'onDrag' and 'onMove'\n\n\n  this.actions = new Set(Object.keys(this.handlers).map(function (k) {\n    return k.replace(/End|Start/, '');\n  }));\n};\n\nfunction useGesture(handlers, config) {\n  // the gesture controller will keep track of all gesture states\n  var gestureController = React.useRef();\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(handlers, getDerivedConfig(config));\n  }\n\n  React.useEffect(function () {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current.config = getDerivedConfig(config);\n    gestureController.current.handlers = handlers;\n  }, [handlers, config]); // when the user component unmounts, we run our gesture controller clean function\n\n  React.useEffect(function () {\n    return gestureController.current.clean;\n  }, []); // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n\n  return gestureController.current.bind;\n}\n/* SHORTHAND HANDLERS */\n\n\nvar useDrag = function useDrag(handler, config) {\n  return useGesture({\n    onDrag: handler\n  }, config);\n};\n\nvar useMove = function useMove(handler, config) {\n  return useGesture({\n    onMove: handler\n  }, config);\n};\n\nvar useHover = function useHover(handler, config) {\n  return useGesture({\n    onHover: handler\n  }, config);\n};\n\nvar useScroll = function useScroll(handler, config) {\n  return useGesture({\n    onScroll: handler\n  }, config);\n};\n\nvar useWheel = function useWheel(handler, config) {\n  return useGesture({\n    onWheel: handler\n  }, config);\n};\n\nvar usePinch = function usePinch(handler, config) {\n  return useGesture({\n    onPinch: handler\n  }, config);\n};\n\nfunction getDerivedConfig(config) {\n  var derivedConfig = _extends({}, defaultConfig, {}, config);\n\n  var domTarget = derivedConfig.domTarget;\n  var realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget;\n  derivedConfig.domTarget = realDomTarget;\n  var passive = derivedConfig.event.passive !== void 0 ? derivedConfig.event.passive : true; // TODO make test to check if passive is correctly passed to config\n  // if there isn't a domtarget or if event.passive is true, then passiveEvents is true\n\n  derivedConfig.passiveEvents = !derivedConfig.domTarget || passive;\n  return derivedConfig;\n}\n\nexport { addV, subV, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };","map":{"version":3,"sources":["../src/types.ts","../src/utils.ts","../src/defaults.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/HoverRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/PinchWheelRecognizer.ts","../src/recognizers/PinchWebKitGestureRecognizer.ts","../src/controllers/GestureController.ts","../src/hooks.ts"],"names":["GestureFlag","noop","chainFns","fns","args","fn","addV","v","v2","subV","setListeners","action","add","listeners","type","el","addListeners","removeListeners","getModifierKeys","event","shiftKey","altKey","metaKey","ctrlKey","getScrollEventData","scrollX","scrollY","scrollLeft","scrollTop","currentTarget","xy","getWheelEventData","deltaX","deltaY","getPointerEventData","touches","buttons","changedTouches","touchEvents","clientX","clientY","down","getTwoTouchesEventData","dx","dy","da","Math","origin","calculateVelocity","delta","delta_t","len","calculateVelocities","Array","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","gestureEventSupported","mappedKeys","drag","stateKey","handlerKey","pinch","move","scroll","wheel","hover","defaultConfig","domTarget","passive","capture","window","dragDelay","passiveEvents","pointerEvents","enabled","initialCommon","pointerId","values","offset","initial","previous","first","last","active","time","cancel","canceled","memo","undefined","initialCoordinates","vxvy","initialDistanceAngle","vdva","turns","initialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","genericEndState","Recognizer","ms","clearTimeout","gesturePayload","sharedPayload","startState","prevValues","state","Object","kinematics","requestAnimationFrame","CoordinatesRecognizer","getKinematics","timeStamp","DEFAULT_DRAG_DELAY","DragRecognizer","getPayloadFromEvent","dragListeners","getEventBindings","ScrollRecognizer","WheelRecognizer","prevXY","MoveRecognizer","HoverRecognizer","DistanceAngleRecognizer","d","a","delta_d","delta_a","newTurns","movement_d","movement_a","PinchRecognizer","PinchWheelRecognizer","prev_d","prev_a","process","console","SCALE_FACTOR","PinchWebKitGestureRecognizer","GestureController","k","config","newGestureState","gestureFlag","handlerStart","handler","newMemo","handlerEnd","recognizer","eventNames","eventNamesArray","output","captureString","fnsArray","key","genuineHandlers","useGesture","handlers","gestureController","React","getDerivedConfig","useDrag","onDrag","useMove","onMove","useHover","onHover","useScroll","onScroll","useWheel","onWheel","usePinch","onPinch","derivedConfig","realDomTarget"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport type AtLeastOneOf<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]\n\nexport type Vector2 = [number, number]\nexport type Fn = (...args: any[]) => any\n\nexport type EventOptions = { capture?: boolean; passive?: boolean }\n\nexport interface GestureConfig {\n  domTarget?: EventTarget | React.RefObject<EventTarget> | null\n  event: EventOptions\n  window?: EventTarget\n  dragDelay: boolean | number\n  passiveEvents: boolean\n  pointerEvents: boolean\n  enabled: boolean\n  drag: boolean\n  pinch: boolean\n  scroll: boolean\n  wheel: boolean\n  hover: boolean\n  move: boolean\n}\n\nexport enum GestureFlag {\n  OnStart = 'start',\n  OnChange = 'change',\n  OnEnd = 'end',\n}\n\nexport type WebKitGestureEvent = React.PointerEvent & { scale: number; rotation: number }\nexport type UseGestureEvent<\n  T extends React.SyntheticEvent = React.MouseEvent | React.TouchEvent | React.WheelEvent | React.PointerEvent | WebKitGestureEvent\n> = T & {\n  gesture?: GestureKey\n}\n\nexport interface ReactEventHandlers {\n  // Mouse Events\n  onMouseDown?: React.MouseEventHandler\n  onMouseDownCapture?: React.MouseEventHandler\n  onMouseEnter?: React.MouseEventHandler\n  onMouseLeave?: React.MouseEventHandler\n  onMouseMove?: React.MouseEventHandler\n  onMouseMoveCapture?: React.MouseEventHandler\n  onMouseOut?: React.MouseEventHandler\n  onMouseOutCapture?: React.MouseEventHandler\n  onMouseOver?: React.MouseEventHandler\n  onMouseOverCapture?: React.MouseEventHandler\n  onMouseUp?: React.MouseEventHandler\n  onMouseUpCapture?: React.MouseEventHandler\n  // Touch Events\n  onTouchCancel?: React.TouchEventHandler\n  onTouchCancelCapture?: React.TouchEventHandler\n  onTouchEnd?: React.TouchEventHandler\n  onTouchEndCapture?: React.TouchEventHandler\n  onTouchMove?: React.TouchEventHandler\n  onTouchMoveCapture?: React.TouchEventHandler\n  onTouchStart?: React.TouchEventHandler\n  onTouchStartCapture?: React.TouchEventHandler\n\n  // Pointer Events\n  onPointerDown?: React.PointerEventHandler\n  onPointerDownCapture?: React.PointerEventHandler\n  onPointerMove?: React.PointerEventHandler\n  onPointerMoveCapture?: React.PointerEventHandler\n  onPointerUp?: React.PointerEventHandler\n  onPointerUpCapture?: React.PointerEventHandler\n  onPointerCancel?: React.PointerEventHandler\n  onPointerCancelCapture?: React.PointerEventHandler\n  onPointerEnter?: React.PointerEventHandler\n  onPointerEnterCapture?: React.PointerEventHandler\n  onPointerLeave?: React.PointerEventHandler\n  onPointerLeaveCapture?: React.PointerEventHandler\n  onPointerOver?: React.PointerEventHandler\n  onPointerOverCapture?: React.PointerEventHandler\n  onPointerOut?: React.PointerEventHandler\n  onPointerOutCapture?: React.PointerEventHandler\n  onGotPointerCapture?: React.PointerEventHandler\n  onGotPointerCaptureCapture?: React.PointerEventHandler\n  onLostPointerCapture?: React.PointerEventHandler\n  onLostPointerCaptureCapture?: React.PointerEventHandler\n\n  // UI Events\n  onScroll?: React.UIEventHandler\n  onScrollCapture?: React.UIEventHandler\n\n  // Wheel Events\n  onWheel?: React.WheelEventHandler\n  onWheelCapture?: React.WheelEventHandler\n\n  // Cheat mode for Gesture Events\n  onGestureStart?: Fn\n  onGestureChange?: Fn\n  onGestureEnd?: Fn\n}\n\nexport type ReactEventHandlerKey = keyof ReactEventHandlers\n\nexport type GestureKey = 'drag' | 'pinch' | 'move' | 'scroll' | 'wheel' | 'hover'\nexport type StateKey = Exclude<GestureKey, 'hover'>\n\nexport interface SharedGestureState {\n  hovering: boolean\n  scrolling: boolean\n  wheeling: boolean\n  dragging: boolean\n  moving: boolean\n  pinching: boolean\n  touches: number\n  down: boolean\n  buttons: number\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\nexport interface CommonGestureState {\n  event?: UseGestureEvent\n  currentTarget?: EventTarget | null\n  pointerId?: number | null\n  values: Vector2\n  delta: Vector2\n  movement: Vector2\n  offset: Vector2\n  initial: Vector2\n  previous: Vector2\n  direction: Vector2\n  first: boolean\n  last: boolean\n  active: boolean\n  time?: number\n  cancel?(): void\n  canceled: boolean\n  memo?: any\n  args?: any\n}\n\nexport interface Coordinates {\n  xy: Vector2\n  velocity: number\n  vxvy: Vector2\n  distance: number\n}\n\nexport interface DistanceAngle {\n  da: Vector2\n  vdva: Vector2\n  origin?: Vector2\n  turns: number\n}\n\nexport type GestureState<T extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> = T & CommonGestureState\nexport type FullGestureState<T extends Coordinates | DistanceAngle> = SharedGestureState & GestureState<T>\n\nexport type StateObject = { shared: SharedGestureState } & { [K in StateKey]: GestureState<Coordinates | DistanceAngle> }\n\nexport type Handler<T extends Coordinates | DistanceAngle> = (state: FullGestureState<T>) => any | void\nexport type HandlerKey = 'onDrag' | 'onPinch' | 'onMove' | 'onHover' | 'onScroll' | 'onWheel'\n\nexport type GestureHandlers = {\n  onDrag: Handler<Coordinates>\n  onDragStart: Handler<Coordinates>\n  onDragEnd: Handler<Coordinates>\n  onHover: Handler<Coordinates>\n  onMove: Handler<Coordinates>\n  onMoveStart: Handler<Coordinates>\n  onMoveEnd: Handler<Coordinates>\n  onScroll: Handler<Coordinates>\n  onScrollStart: Handler<Coordinates>\n  onScrollEnd: Handler<Coordinates>\n  onWheel: Handler<Coordinates>\n  onWheelStart: Handler<Coordinates>\n  onWheelEnd: Handler<Coordinates>\n  onPinch: Handler<DistanceAngle>\n  onPinchStart: Handler<DistanceAngle>\n  onPinchEnd: Handler<DistanceAngle>\n}\n\n/* Handlers should also accept DomAttributes to prevent overrides */\nexport type GestureHandlersPartial = AtLeastOneOf<GestureHandlers> &\n  Partial<Omit<React.DOMAttributes<Element>, 'onDrag' | 'onScroll' | 'onWheel'>>\n","import React from 'react'\nimport { Fn, Vector2, EventOptions, Coordinates, FullGestureState, DistanceAngle, UseGestureEvent } from './types'\n\n// blank function\nexport const noop = () => {}\n\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\n// vector add\nexport const addV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v + v2[i])\n\n// vector substract\nexport const subV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v - v2[i])\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([type, fn]) => el[action](type, fn, options))\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\ntype ScrollEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets scroll event data\n * @param event\n * @returns scroll event data\n */\nexport function getScrollEventData(event: UseGestureEvent): ScrollEventData {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = <Element & Window>event.currentTarget\n  return { xy: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0], ...getModifierKeys(event) }\n}\n\ntype WheelEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets wheel event data\n * @param event\n * @returns wheel event data\n */\nexport function getWheelEventData(event: UseGestureEvent<React.WheelEvent>): WheelEventData {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { xy: [deltaX, deltaY], ...getModifierKeys(event) }\n}\n\ntype PointerEventData = Pick<FullGestureState<Coordinates>, 'xy' | 'touches' | 'down' | 'buttons'> & ModifierKeys\n/**\n * Gets pointer event data\n * @param event\n * @returns pointer event data\n */\nexport function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData {\n  const { touches, buttons, changedTouches } = event as any\n  const touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : event\n  const down = (touchEvents && touchEvents.length > 0) || buttons > 0\n  return {\n    xy: [clientX, clientY],\n    touches: (touchEvents && touchEvents.length) || 0,\n    down,\n    buttons,\n    ...getModifierKeys(event),\n  }\n}\n\ntype TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'da' | 'touches' | 'down' | 'origin'> & ModifierKeys\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const da: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { da, origin, touches: 2, down: touches.length > 0, ...getModifierKeys(event) }\n}\n\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return delta_t ? <T>delta.map(v => v / delta_t) : <T>Array(delta.length).fill(0)\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return <T>delta.map(v => v / len!)\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function gestureEventSupported(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n","import { noop } from './utils'\nimport { GestureConfig, HandlerKey, CommonGestureState, Coordinates, DistanceAngle, StateObject, StateKey, GestureKey } from './types'\n\ntype MappedKeys = { [K in GestureKey]: { stateKey: StateKey; handlerKey: HandlerKey } }\n\n/**\n * Some gestures might use the state key from another gesture (i.e. hover)\n * so mappedKeys is a commodity object to get the state key and handler key\n * for every gesture\n */\nexport const mappedKeys: MappedKeys = {\n  drag: { stateKey: 'drag', handlerKey: 'onDrag' },\n  pinch: { stateKey: 'pinch', handlerKey: 'onPinch' },\n  move: { stateKey: 'move', handlerKey: 'onMove' },\n  scroll: { stateKey: 'scroll', handlerKey: 'onScroll' },\n  wheel: { stateKey: 'wheel', handlerKey: 'onWheel' },\n  hover: { stateKey: 'move', handlerKey: 'onHover' },\n}\n\n// default config (will extend user config)\nexport const defaultConfig: GestureConfig = {\n  domTarget: undefined,\n  event: { passive: true, capture: false },\n  window: typeof window !== 'undefined' ? window : undefined,\n  dragDelay: false,\n  passiveEvents: true,\n  pointerEvents: false,\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true,\n}\n\n// common initial state for all gestures\nexport const initialCommon: CommonGestureState = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  delta: [0, 0],\n  movement: [0, 0],\n  offset: [0, 0],\n  direction: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined,\n}\n\n// initial state for coordinates-based gestures\nconst initialCoordinates: Coordinates = { xy: [0, 0], vxvy: [0, 0], velocity: 0, distance: 0 } // xy coordinates\n\n// initial state for distance and angle-based gestures (pinch)\nconst initialDistanceAngle: DistanceAngle = { da: [0, 0], vdva: [0, 0], origin: undefined, turns: 0 } // distance and angle\n\n// initial state object (used by the gesture controller)\nexport const initialState: StateObject = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  },\n  move: { ...initialCommon, ...initialCoordinates },\n  drag: { ...initialCommon, ...initialCoordinates },\n  scroll: { ...initialCommon, ...initialCoordinates },\n  wheel: { ...initialCommon, ...initialCoordinates },\n  pinch: { ...initialCommon, ...initialDistanceAngle },\n}\n\n// generic end state for all gestures\nexport const genericEndState: Partial<CommonGestureState> = { first: false, last: true, active: false }\n","import { mappedKeys, genericEndState, initialState } from '../defaults'\nimport GestureController from '../controllers/GestureController'\nimport {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  GestureState,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  UseGestureEvent,\n  Vector2,\n} from '../types'\nimport { noop, subV, calculateAllKinematics } from '../utils'\n\ntype PayloadFromEvent = {\n  values: Vector2\n  gesturePayload?: Partial<GestureState>\n  sharedPayload?: Partial<SharedGestureState>\n}\n\n/**\n * Recognizer abstract class\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> {\n  protected stateKey: StateKey\n  protected sharedStartState?: Partial<SharedGestureState>\n  protected sharedEndState?: Partial<SharedGestureState>\n\n  /**\n   * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.\n   * In other words, these gestures also start with a delta.\n   */\n  protected continuousGesture = false\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: GestureKey,\n    protected readonly controller: GestureController,\n    protected readonly args: any[] = []\n  ) {\n    // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n    this.stateKey = mappedKeys[gestureKey].stateKey\n  }\n\n  // is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.controller.config[this.gestureKey]\n  }\n  // get the controller state for a given gesture\n  protected get state() {\n    return this.controller.state[this.stateKey] as GestureState<GestureType>\n  }\n\n  // convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  protected abstract getPayloadFromEvent(event: UseGestureEvent): PayloadFromEvent\n\n  /**\n   * Utility function to get kinematics of the gesture\n   * @values values we want to calculate the kinematics from\n   * @event\n   * @returns set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: [number, number | undefined], event: UseGestureEvent): Partial<GestureState<GestureType>>\n\n  // should return the bindings for a given gesture\n  public abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][]\n\n  /**\n   * convenience method to update the controller state for a given gesture\n   * @param sharedState shared partial state object\n   * @param gestureState partial state object for the gesture handled by the recognizer\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  protected updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState<GestureType>>): void => {\n    this.controller.updateState(sharedState, gestureState, this.stateKey)\n  }\n\n  protected fireGestureHandler = (gestureFlag: GestureFlag): void => {\n    this.controller.fireGestureHandler(this.gestureKey, gestureFlag)\n  }\n\n  // generic onStart function\n  protected onStart = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n\n    // TODO probably needs some rework, initialState and resetState should be different\n\n    const startState: GestureState<GestureType> = {\n      ...(initialState[this.stateKey] as GestureState<GestureType>),\n      values,\n      event,\n      first: true,\n      active: true,\n      time: event.timeStamp,\n      args: this.args,\n    }\n\n    const { values: prevValues, offset } = this.state\n\n    if (this.continuousGesture) {\n      startState.initial = startState.previous = prevValues\n      startState.delta = startState.movement = subV(values, prevValues)\n      startState.offset = values\n      Object.assign(startState, calculateAllKinematics(startState.movement, startState.delta, 0))\n    } else {\n      startState.initial = startState.previous = values\n      startState.offset = offset\n    }\n\n    this.updateState({ ...this.sharedStartState, ...sharedPayload }, { ...startState, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnStart)\n  }\n\n  // generic onChange function\n  protected onChange = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n    this.updateState({ ...sharedPayload }, { first: false, ...kinematics, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  // generic onEnd function\n  protected onEnd = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    if (!this.state.active) return\n    this.removeWindowListeners()\n    this.updateState(this.sharedEndState!, { event, ...genericEndState, ...payload } as Partial<GestureState<GestureType>>)\n    this.fireGestureHandler(GestureFlag.OnEnd)\n  }\n\n  // generic cancel function\n  protected onCancel = (event: UseGestureEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop } as Partial<GestureState<GestureType>>)\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  // generic gesture handler for timeout-based gestures\n  protected timeoutHandler = (event: UseGestureEvent) => {\n    if (!this.enabled) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    if (!this.state.active) this.onStart(event)\n    else this.onChange(event)\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, subV, calculateAllKinematics } from '../utils'\nimport { Coordinates, GestureState, Vector2, UseGestureEvent } from '../types'\n\n/**\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer extends Recognizer<Coordinates> {\n  getKinematics(values: Vector2, event: UseGestureEvent): Partial<GestureState<Coordinates>> {\n    // we get the gesture specific state\n    const { values: xy, initial, offset, time } = this.state\n\n    // offset is the difference between the current and initial value vectors\n    const movement = subV(values, initial)\n    // delta is the difference between the current and previous value vectors\n    const delta = subV(values, xy)\n\n    const delta_t = event.timeStamp - time!\n    const { velocity, velocities, distance, direction } = calculateAllKinematics(movement, delta, delta_t)\n\n    return {\n      event,\n      values,\n      movement,\n      offset: addV(offset, delta),\n      delta,\n      velocity,\n      vxvy: velocities,\n      distance,\n      direction,\n      previous: xy,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\n\nexport default class DragRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { dragging: true, down: true }\n  sharedEndState = { dragging: false, down: false, buttons: 0, touches: 0 }\n\n  delayedEvent = false\n\n  constructor(controller: GestureController, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n\n    // making sure we're not dragging the element when more than one finger press the screen\n    const { touches } = getPointerEventData(event)\n    if (touches > 1) return\n\n    const { currentTarget, pointerId } = event as PointerEvent\n    if (this.controller.config.pointerEvents) {\n      // if pointers events\n      currentTarget && (currentTarget as any).setPointerCapture(pointerId)\n    } else {\n      this.removeWindowListeners()\n      const dragListeners: [string, Fn][] = [\n        ['mousemove', this.onDragChange],\n        ['touchmove', this.onDragChange],\n        ['mouseup', this.onDragEnd],\n        ['touchend', this.onDragEnd],\n        ['touchcancel', this.onDragEnd],\n      ]\n      this.addWindowListeners(dragListeners)\n    }\n\n    if (this.controller.config.dragDelay) {\n      const dragDelay = typeof this.controller.config.dragDelay === 'number' ? this.controller.config.dragDelay : DEFAULT_DRAG_DELAY\n      if (typeof event.persist === 'function') event.persist()\n      this.delayedEvent = true\n      this.setTimeout(() => this.startDrag(event), dragDelay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag = (event: UseGestureEvent): void => {\n    const { currentTarget, pointerId } = event as PointerEvent\n    this.onStart(event, { currentTarget, pointerId, cancel: () => this.onCancel(event) })\n    this.delayedEvent = false\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled) return\n\n    if (!active) {\n      if (this.delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const { buttons, touches } = getPointerEventData(event)\n\n    if (buttons === 0 && touches === 0) {\n      this.onEnd(event)\n      return\n    }\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.clearTimeout()\n    this.delayedEvent = false\n\n    if (!this.state.active) return\n\n    const { currentTarget, pointerId } = this.state\n    if (currentTarget && this.controller.config.pointerEvents) (currentTarget as any).releasePointerCapture(pointerId)\n    this.onEnd(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerDown', this.onDragStart], ['onPointerMove', this.onDragChange], [['onPointerUp'], this.onDragEnd]]\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onDragStart]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getScrollEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { scrolling: true }\n  sharedEndState = { scrolling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getScrollEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onScroll', this.timeoutHandler]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { addV, getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { wheeling: true }\n  sharedEndState = { wheeling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const { xy: prevXY } = this.state\n    const { xy, ...sharedPayload } = getWheelEventData(event)\n    const values = addV(xy, prevXY)\n\n    return { values, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (event.ctrlKey && this.controller.actions.has('onPinch')) return\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { moving: true }\n  sharedEndState = { moving: false, velocity: 0, vxvy: [0, 0] }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('move', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerMove', this.timeoutHandler]]\n    }\n    return [['onMouseMove', this.timeoutHandler]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { GestureFlag, UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class HoverRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('hover', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onPointerEnter = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    this.updateState({ hovering: true, ...sharedPayload }, { values, event, args: this.args })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  onPointerLeave = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateState({ hovering: false, moving: false, ...sharedPayload }, { ...kinematics, ...genericEndState, velocity: 0, vxvy: [0, 0] })\n\n    // when the mouse leaves the element, we also fire the move handler\n    // without waiting for move to end with debounce\n    this.controller.fireGestureHandler('move', GestureFlag.OnEnd)\n    this.controller.fireGestureHandler('hover', GestureFlag.OnChange)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerEnter', this.onPointerEnter], ['onPointerLeave', this.onPointerLeave]]\n    }\n    return [['onMouseEnter', this.onPointerEnter], ['onMouseLeave', this.onPointerLeave]]\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, calculateVelocities, calculateDirection } from '../utils'\nimport { DistanceAngle, GestureState, Vector2, UseGestureEvent, GestureKey } from '../types'\nimport GestureController from '../controllers/GestureController'\n\n/**\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer extends Recognizer<DistanceAngle> {\n  constructor(gestureKey: GestureKey, controller: GestureController, args: any[] = []) {\n    super(gestureKey, controller, args)\n  }\n\n  getKinematics([d, a]: [number, number?], event: UseGestureEvent): Partial<GestureState<DistanceAngle>> {\n    const { values: da, turns, initial, offset, time } = this.state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a !== void 0 ? a : da[1]\n\n    const delta_d = d - da[0]\n    let delta_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns\n\n    // we update the angle difference to its corrected value\n    delta_a -= 360 * (newTurns - turns)\n    const delta = [delta_d, delta_a] as Vector2\n\n    const movement_d = d - initial[0]\n    const movement_a = a - 360 * newTurns - initial[1]\n    const movement: Vector2 = [movement_d, movement_a]\n\n    const delta_t = event.timeStamp - time!\n    const vdva = calculateVelocities(delta, delta_t)\n    const direction = calculateDirection(delta)\n    return {\n      event,\n      values: [d, a],\n      movement,\n      delta,\n      offset: addV(offset, delta),\n      vdva,\n      direction,\n      turns: newTurns,\n      previous: da,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<TouchEvent>) {\n    const { da, origin, ...sharedPayload } = getTwoTouchesEventData(event)\n    return { values: da, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onPinchStart = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    this.onStart(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: UseGestureEvent<TouchEvent>): void => {\n    const { canceled, active, time } = this.state\n    if (canceled || !active || event.touches.length !== 2 || event.timeStamp === time) return\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onTouchStart', this.onPinchStart], ['onTouchMove', this.onPinchChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn, Vector2 } from '../types'\n\nexport default class PinchWheelRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const {\n      xy: [, delta_d],\n      ...sharedPayload\n    } = getWheelEventData(event)\n    const {\n      da: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n    const origin: Vector2 = [event.clientX, event.clientY]\n    return { values: [d, a] as Vector2, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!event.ctrlKey) return\n\n    if (!this.controller.config.passiveEvents) event.preventDefault()\n    else if (process.env.NODE_ENV === 'development')\n      console.warn(\n        'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n      )\n\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, WebKitGestureEvent, Fn, Vector2 } from '../types'\n\nconst SCALE_FACTOR = 260\n\nexport default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true, down: true, touches: 2 }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n  private origin?: Vector2\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WebKitGestureEvent>) {\n    return { values: [event.scale * SCALE_FACTOR, event.rotation] as Vector2 }\n  }\n\n  onPinchStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault()\n    const origin: Vector2 = this.origin ? this.origin : [event.clientX, event.clientY]\n\n    this.onStart(event, { origin, cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: WebKitGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled || !active) return\n    event.preventDefault()\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    this.onEnd(event)\n    event.preventDefault()\n    this.origin = undefined\n  }\n\n  updateTouchData = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.origin = origin\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [\n      ['onGestureStart', this.onPinchStart],\n      ['onGestureChange', this.onPinchChange],\n      [['onGestureEnd', 'onTouchCancel'], this.onGestureEnd],\n      [['onTouchStart', 'onTouchMove'], this.updateTouchData],\n    ]\n  }\n}\n","import {\n  StateKey,\n  StateObject,\n  GestureState,\n  SharedGestureState,\n  GestureKey,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  ReactEventHandlers,\n  GestureConfig,\n  GestureHandlers,\n  HandlerKey,\n  GestureHandlersPartial,\n} from '../types'\n\nimport { initialState, mappedKeys } from '../defaults'\nimport { addListeners, removeListeners, gestureEventSupported, chainFns } from '../utils'\n\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport HoverRecognizer from '../recognizers/HoverRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport PinchWheelRecognizer from '../recognizers/PinchWheelRecognizer'\nimport PinchWebKitGestureRecognizer from '../recognizers/PinchWebKitGestureRecognizer'\nimport Recognizer from 'recognizers/Recognizer'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] | Fn }>\n\n/**\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\n * and keep track of the state for all gestures\n *\n * @template BinderType the type the bind function should return\n */\nexport default class GestureController {\n  public state: StateObject = initialState // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  public actions: Set<HandlerKey>\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  constructor(public handlers: GestureHandlersPartial, public config: GestureConfig) {\n    // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n    // actions will include 'onDrag' and 'onMove'\n    this.actions = new Set(Object.keys(this.handlers).map(k => <HandlerKey>k.replace(/End|Start/, '')))\n  }\n\n  /**\n   * Function run on component unmount\n   * Cleans timeouts and removes dom listeners set by the bind function\n   */\n  public clean = (): void => {\n    this.cleanOnBind()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(<StateKey>stateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render)\n   * Reset the binding object and remove dom listeners attached to config.domTarget\n   */\n  private cleanOnBind = (): void => {\n    this.bindings = {}\n    const { domTarget } = this.config\n    if (domTarget) {\n      removeListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Commodity function to let gesture recognizer update global state\n   * @param sharedState shared partial state object\n   * @param gestureState partial gesture specific state object\n   * @param stateKey the state key ('drag', 'move'...)\n   */\n  public updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState>, stateKey: StateKey): void => {\n    const newGestureState = { ...this.state[stateKey], ...gestureState }\n\n    if ('da' in newGestureState) newGestureState.da = newGestureState.values\n    else if ('xy' in newGestureState) newGestureState.xy = newGestureState.values\n\n    this.state = {\n      ...this.state,\n      shared: { ...this.state.shared, ...sharedState },\n      [stateKey]: newGestureState,\n    }\n  }\n\n  // fire the gesture handler defined by the user\n  public fireGestureHandler = (gestureKey: GestureKey, gestureFlag: GestureFlag): void => {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    const { stateKey, handlerKey } = mappedKeys[gestureKey]\n    const state = { ...this.state.shared, ...this.state[stateKey] }\n    if (state.event) state.event.gesture = gestureKey\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      const handlerStart = `${handlerKey}Start` as keyof GestureHandlers\n      const handler = this.handlers[handlerStart] as any\n      handler && handler(state)\n    }\n\n    // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n    const handler = this.handlers[handlerKey] as any\n    if (handler) {\n      const newMemo = handler(state)\n      this.state[stateKey].memo = newMemo !== void 0 ? newMemo : this.state[stateKey].memo\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      const handlerEnd = `${handlerKey}End` as keyof GestureHandlers\n      const handler = this.handlers[handlerEnd] as any\n      handler && handler(state)\n    }\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window\n   * @param stateKey\n   * @param listeners\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.event)\n  }\n\n  // commodity function to let recognizers simply remove listeners from config.window\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.event)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * Adds a recognizer to this.bindings\n   * @param recognizer\n   */\n  private addRecognizer = (recognizer: Recognizer): void => {\n    recognizer.getEventBindings().map(this.addEventBindings)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  private addEventBindings = ([eventNames, fn]: [ReactEventHandlerKey | ReactEventHandlerKey[], Fn]): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n\n    eventNamesArray.forEach(eventName => {\n      this.bindings[eventName] = this.bindings[eventName] ? [...(<Fn[]>this.bindings[eventName]), fn] : [fn]\n    })\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  private addDomTargetListeners = (): void => {\n    const { domTarget } = this.config\n\n    // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(<Fn[]>fns))])\n    })\n\n    addListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with\n   */\n  private getBindings = (): ReactEventHandlers => {\n    const output: ReactEventHandlers = {}\n    const captureString = this.config.event.capture ? 'Capture' : ''\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      output[key] = chainFns(...(<Fn[]>fnsArray))\n    })\n\n    return output\n  }\n\n  public bind = (...args: any[]): Fn | ReactEventHandlers => {\n    const { domTarget } = this.config\n\n    const genuineHandlers = { ...this.handlers }\n\n    // cleaning before adding\n    this.cleanOnBind()\n\n    if (this.actions.has('onDrag')) {\n      this.addRecognizer(new DragRecognizer(this, args))\n      delete genuineHandlers.onDrag\n      delete genuineHandlers.onDragStart\n      delete genuineHandlers.onDragEnd\n    }\n    if (this.actions.has('onScroll')) {\n      this.addRecognizer(new ScrollRecognizer(this, args))\n      delete genuineHandlers.onScroll\n      delete genuineHandlers.onScrollStart\n      delete genuineHandlers.onScrollEnd\n    }\n    if (this.actions.has('onWheel')) {\n      this.addRecognizer(new WheelRecognizer(this, args))\n      delete genuineHandlers.onWheel\n      delete genuineHandlers.onWheelStart\n      delete genuineHandlers.onWheelEnd\n    }\n    if (this.actions.has('onMove')) {\n      this.addRecognizer(new MoveRecognizer(this, args))\n      delete genuineHandlers.onMove\n      delete genuineHandlers.onMoveStart\n      delete genuineHandlers.onMoveEnd\n    }\n    if (this.actions.has('onHover')) {\n      this.addRecognizer(new HoverRecognizer(this, args))\n      delete genuineHandlers.onHover\n    }\n    if (this.actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && gestureEventSupported()) {\n        this.addRecognizer(new PinchWebKitGestureRecognizer(this, args))\n      } else {\n        this.addRecognizer(new PinchRecognizer(this, args))\n        this.addRecognizer(new PinchWheelRecognizer(this, args))\n      }\n      delete genuineHandlers.onPinch\n      delete genuineHandlers.onPinchStart\n      delete genuineHandlers.onPinchEnd\n    }\n\n    // we also add event bindings for genuine handlers\n    Object.entries(genuineHandlers).map(([event, fn]) => {\n      // we're cheating when it comes to event type :(\n      this.addEventBindings([<ReactEventHandlerKey>event, <Fn>fn])\n    })\n\n    // if config.domTarget is set we add event listeners to it and return the clean function\n    if (domTarget) {\n      this.addDomTargetListeners()\n      return this.clean\n    }\n\n    // if not, we return an object that contains gesture handlers mapped to react handler event keys\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport GestureController from './controllers/GestureController'\nimport { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle, Omit } from './types'\nimport { defaultConfig } from './defaults'\n\n/** API\n * const bind = useDrag(() => { ... })\n * const bind = usePinch(() => { ... })\n * const bind = useMove(() => { ... })\n * const bind = useScroll(() => { ... })\n * const bind = useWheel(() => { ... })\n *\n * Handlers object:\n * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })\n *\n * DomTarget:\n * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })\n * React.useEffect(bind, [bind])\n */\n\ntype PartialGestureConfig = Partial<Omit<GestureConfig, 'passiveEvents'>>\ntype GetBinderTypeFromDomTarget<T extends PartialGestureConfig> = T['domTarget'] extends object ? Fn : ReactEventHandlers\n\nexport function useGesture<Config extends PartialGestureConfig>(\n  handlers: GestureHandlersPartial,\n  config?: Config\n): (...args: any[]) => GetBinderTypeFromDomTarget<Config> {\n  // the gesture controller will keep track of all gesture states\n  const gestureController = React.useRef<GestureController>()\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(handlers, getDerivedConfig(config))\n  }\n\n  React.useEffect(() => {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current!.config = getDerivedConfig(config)\n    gestureController.current!.handlers = handlers\n  }, [handlers, config])\n\n  // when the user component unmounts, we run our gesture controller clean function\n  React.useEffect(() => gestureController.current!.clean, [])\n\n  // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n  return gestureController.current.bind as (...args: any[]) => GetBinderTypeFromDomTarget<Config>\n}\n\n/* SHORTHAND HANDLERS */\nexport const useDrag = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onDrag: handler }, config)\nexport const useMove = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onMove: handler }, config)\nexport const useHover = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onHover: handler }, config)\nexport const useScroll = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onScroll: handler }, config)\nexport const useWheel = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onWheel: handler }, config)\nexport const usePinch = (handler: Handler<DistanceAngle>, config?: PartialGestureConfig) => useGesture({ onPinch: handler }, config)\n\nfunction getDerivedConfig(config?: Partial<GestureConfig>): GestureConfig {\n  const derivedConfig = { ...defaultConfig, ...config }\n  const { domTarget } = derivedConfig\n  const realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  derivedConfig.domTarget = realDomTarget\n\n  const passive = derivedConfig.event.passive !== void 0 ? derivedConfig.event.passive : true\n\n  // TODO make test to check if passive is correctly passed to config\n\n  // if there isn't a domtarget or if event.passive is true, then passiveEvents is true\n  derivedConfig.passiveEvents = !derivedConfig.domTarget || passive\n\n  return derivedConfig\n}\n"]},"metadata":{},"sourceType":"module"}