{"ast":null,"code":"var MersenneTwister = require('mersenne-twister');\n\nvar paperGen = require('./paper');\n\nvar Color = require('color');\n\nvar colors = require('./colors');\n\nvar shapeCount = 4;\nmodule.exports = generateIdenticon;\nvar generator;\n\nfunction generateIdenticon(diameter, seed) {\n  generator = new MersenneTwister(seed);\n  var elements = paperGen(diameter);\n  var paper = elements.paper;\n  var container = elements.container;\n  var remainingColors = hueShift(colors.slice(), generator);\n  var bkgnd = paper.rect(0, 0, diameter, diameter);\n  bkgnd.attr(\"fill\", genColor(remainingColors));\n  bkgnd.attr('stroke', 'none');\n\n  for (var i = 0; i < shapeCount - 1; i++) {\n    genShape(paper, remainingColors, diameter, i, shapeCount - 1);\n  }\n\n  return container;\n}\n\nfunction genShape(paper, remainingColors, diameter, i, total) {\n  var shape = paper.rect(0, 0, diameter, diameter);\n  shape.rotate(360 * generator.random());\n  var trans = diameter / total * generator.random() + i * diameter / total;\n  shape.translate(trans);\n  shape.rotate(180 * generator.random());\n  shape.attr('fill', genColor(remainingColors));\n  shape.attr('stroke', 'none');\n}\n\nfunction genColor(colors) {\n  var rand = generator.random();\n  var idx = Math.floor(colors.length * generator.random());\n  var color = colors.splice(idx, 1)[0];\n  return color;\n}\n\nvar wobble = 30;\n\nfunction hueShift(colors, generator) {\n  var amount = generator.random() * 30 - wobble / 2;\n  return colors.map(function (hex) {\n    var color = Color(hex);\n    color.rotate(amount);\n    return color.hexString();\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/jazzicon/index.js"],"names":["MersenneTwister","require","paperGen","Color","colors","shapeCount","module","exports","generateIdenticon","generator","diameter","seed","elements","paper","container","remainingColors","hueShift","slice","bkgnd","rect","attr","genColor","i","genShape","total","shape","rotate","random","trans","translate","rand","idx","Math","floor","length","color","splice","wobble","amount","map","hex","hexString"],"mappings":"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","sourcesContent":["var MersenneTwister = require('mersenne-twister');\nvar paperGen = require('./paper')\nvar Color = require('color')\nvar colors = require('./colors')\nvar shapeCount = 4\n\nmodule.exports = generateIdenticon\n\nvar generator\nfunction generateIdenticon(diameter, seed) {\n  generator = new MersenneTwister(seed);\n\n  var elements = paperGen(diameter)\n  var paper = elements.paper\n  var container = elements.container\n\n  var remainingColors = hueShift(colors.slice(), generator)\n\n\n  var bkgnd = paper.rect(0, 0, diameter, diameter);\n  bkgnd.attr(\"fill\", genColor(remainingColors));\n  bkgnd.attr('stroke', 'none');\n\n  for(var i = 0; i < shapeCount - 1; i++) {\n    genShape(paper, remainingColors, diameter, i, shapeCount - 1)\n  }\n\n  return container\n}\n\nfunction genShape(paper, remainingColors, diameter, i, total) {\n  var shape = paper.rect(0, 0, diameter, diameter);\n  shape.rotate(360 * generator.random())\n\n  var trans = diameter / total * generator.random() + (i * diameter / total)\n  shape.translate(trans)\n\n  shape.rotate(180 * generator.random())\n  shape.attr('fill', genColor(remainingColors));\n  shape.attr('stroke', 'none');\n}\n\nfunction genColor(colors) {\n  var rand = generator.random()\n  var idx = Math.floor(colors.length * generator.random())\n  var color = colors.splice(idx,1)[0]\n  return color\n}\n\nvar wobble = 30\nfunction hueShift(colors, generator) {\n  var amount = (generator.random() * 30) - (wobble / 2)\n  return colors.map(function(hex) {\n    var color = Color(hex)\n    color.rotate(amount)\n    return color.hexString()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}