{"ast":null,"code":"'use strict';\n\nvar locate = require('../locate/break');\n\nmodule.exports = hardBreak;\nhardBreak.locator = locate;\nvar MIN_BREAK_LENGTH = 2;\n\nfunction hardBreak(eat, value, silent) {\n  var length = value.length;\n  var index = -1;\n  var queue = '';\n  var character;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character === '\\n') {\n      if (index < MIN_BREAK_LENGTH) {\n        return;\n      }\n      /* istanbul ignore if - never used (yet) */\n\n\n      if (silent) {\n        return true;\n      }\n\n      queue += character;\n      return eat(queue)({\n        type: 'break'\n      });\n    }\n\n    if (character !== ' ') {\n      return;\n    }\n\n    queue += character;\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/break.js"],"names":["locate","require","module","exports","hardBreak","locator","MIN_BREAK_LENGTH","eat","value","silent","length","index","queue","character","charAt","type"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AACAA,SAAS,CAACC,OAAV,GAAoBL,MAApB;AAEA,IAAIM,gBAAgB,GAAG,CAAvB;;AAEA,SAASF,SAAT,CAAmBG,GAAnB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAJ;;AAEA,SAAO,EAAEF,KAAF,GAAUD,MAAjB,EAAyB;AACvBG,IAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAZ;;AAEA,QAAIE,SAAS,KAAK,IAAlB,EAAwB;AACtB,UAAIF,KAAK,GAAGL,gBAAZ,EAA8B;AAC5B;AACD;AAED;;;AACA,UAAIG,MAAJ,EAAY;AACV,eAAO,IAAP;AACD;;AAEDG,MAAAA,KAAK,IAAIC,SAAT;AAEA,aAAON,GAAG,CAACK,KAAD,CAAH,CAAW;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAX,CAAP;AACD;;AAED,QAAIF,SAAS,KAAK,GAAlB,EAAuB;AACrB;AACD;;AAEDD,IAAAA,KAAK,IAAIC,SAAT;AACD;AACF","sourcesContent":["'use strict';\n\nvar locate = require('../locate/break');\n\nmodule.exports = hardBreak;\nhardBreak.locator = locate;\n\nvar MIN_BREAK_LENGTH = 2;\n\nfunction hardBreak(eat, value, silent) {\n  var length = value.length;\n  var index = -1;\n  var queue = '';\n  var character;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character === '\\n') {\n      if (index < MIN_BREAK_LENGTH) {\n        return;\n      }\n\n      /* istanbul ignore if - never used (yet) */\n      if (silent) {\n        return true;\n      }\n\n      queue += character;\n\n      return eat(queue)({type: 'break'});\n    }\n\n    if (character !== ' ') {\n      return;\n    }\n\n    queue += character;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}