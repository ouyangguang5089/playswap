{"ast":null,"code":"import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  color: \",\";\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 20rem;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect}from'react';import{useWeb3React}from'@web3-react/core';import styled from'styled-components';import{useTranslation}from'react-i18next';import{network}from'../../connectors';import{useEagerConnect,useInactiveListener}from'../../hooks';import{NetworkContextName}from'../../constants';import Loader from'../Loader';var MessageWrapper=styled.div(_templateObject());var Message=styled.h2(_templateObject2(),function(_ref){var theme=_ref.theme;return theme.secondary1;});export default function Web3ReactManager(_ref2){var children=_ref2.children;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),active=_useWeb3React.active;var _useWeb3React2=useWeb3React(NetworkContextName),networkActive=_useWeb3React2.active,networkError=_useWeb3React2.error,activateNetwork=_useWeb3React2.activate;// try to eagerly connect to an injected provider, if it exists and has granted access already\nvar triedEager=useEagerConnect();// after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\nuseEffect(function(){if(triedEager&&!networkActive&&!networkError&&!active){activateNetwork(network);}},[triedEager,networkActive,networkError,activateNetwork,active]);// when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\nuseInactiveListener(!triedEager);// handle delayed loader state\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),showLoader=_useState2[0],setShowLoader=_useState2[1];useEffect(function(){var timeout=setTimeout(function(){setShowLoader(true);},600);return function(){clearTimeout(timeout);};},[]);// on page load, do nothing until we've tried to connect to the injected connector\nif(!triedEager){return null;}// if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\nif(!active&&networkError){return/*#__PURE__*/React.createElement(MessageWrapper,null,/*#__PURE__*/React.createElement(Message,null,t('unknownError')));}// if neither context is active, spin\nif(!active&&!networkActive){return showLoader?/*#__PURE__*/React.createElement(MessageWrapper,null,/*#__PURE__*/React.createElement(Loader,null)):null;}return children;}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/components/Web3ReactManager/index.tsx"],"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","Message","h2","theme","secondary1","Web3ReactManager","children","t","active","networkActive","networkError","error","activateNetwork","activate","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":"ksBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,cAAT,KAA+B,eAA/B,CAEA,OAASC,OAAT,KAAwB,kBAAxB,CACA,OAASC,eAAT,CAA0BC,mBAA1B,KAAqD,aAArD,CACA,OAASC,kBAAT,KAAmC,iBAAnC,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CAEA,GAAMC,CAAAA,cAAc,CAAGP,MAAM,CAACQ,GAAV,mBAApB,CAOA,GAAMC,CAAAA,OAAO,CAAGT,MAAM,CAACU,EAAV,oBACF,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,UAArB,EADE,CAAb,CAIA,cAAe,SAASC,CAAAA,gBAAT,OAAmE,IAAvCC,CAAAA,QAAuC,OAAvCA,QAAuC,qBAClEb,cAAc,EADoD,CACxEc,CADwE,iBACxEA,CADwE,mBAE7DhB,YAAY,EAFiD,CAExEiB,MAFwE,eAExEA,MAFwE,oBAGEjB,YAAY,CAACM,kBAAD,CAHd,CAGhEY,aAHgE,gBAGxED,MAHwE,CAG1CE,YAH0C,gBAGjDC,KAHiD,CAGlBC,eAHkB,gBAG5BC,QAH4B,CAKhF;AACA,GAAMC,CAAAA,UAAU,CAAGnB,eAAe,EAAlC,CAEA;AACAL,SAAS,CAAC,UAAM,CACd,GAAIwB,UAAU,EAAI,CAACL,aAAf,EAAgC,CAACC,YAAjC,EAAiD,CAACF,MAAtD,CAA8D,CAC5DI,eAAe,CAAClB,OAAD,CAAf,CACD,CACF,CAJQ,CAIN,CAACoB,UAAD,CAAaL,aAAb,CAA4BC,YAA5B,CAA0CE,eAA1C,CAA2DJ,MAA3D,CAJM,CAAT,CAMA;AACAZ,mBAAmB,CAAC,CAACkB,UAAF,CAAnB,CAEA;AAlBgF,cAmB5CzB,QAAQ,CAAC,KAAD,CAnBoC,wCAmBzE0B,UAnByE,eAmB7DC,aAnB6D,eAoBhF1B,SAAS,CAAC,UAAM,CACd,GAAM2B,CAAAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CAC/BF,aAAa,CAAC,IAAD,CAAb,CACD,CAFyB,CAEvB,GAFuB,CAA1B,CAIA,MAAO,WAAM,CACXG,YAAY,CAACF,OAAD,CAAZ,CACD,CAFD,CAGD,CARQ,CAQN,EARM,CAAT,CAUA;AACA,GAAI,CAACH,UAAL,CAAiB,CACf,MAAO,KAAP,CACD,CAED;AACA,GAAI,CAACN,MAAD,EAAWE,YAAf,CAA6B,CAC3B,mBACE,oBAAC,cAAD,mBACE,oBAAC,OAAD,MAAUH,CAAC,CAAC,cAAD,CAAX,CADF,CADF,CAKD,CAED;AACA,GAAI,CAACC,MAAD,EAAW,CAACC,aAAhB,CAA+B,CAC7B,MAAOM,CAAAA,UAAU,cACf,oBAAC,cAAD,mBACE,oBAAC,MAAD,MADF,CADe,CAIb,IAJJ,CAKD,CAED,MAAOT,CAAAA,QAAP,CACD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { NetworkContextName } from '../../constants'\nimport Loader from '../Loader'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.secondary1};\n`\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}