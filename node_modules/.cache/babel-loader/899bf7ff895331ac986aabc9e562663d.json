{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport var TupleCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(TupleCoder, _Coder);\n\n  var _super = _createSuper(TupleCoder);\n\n  function TupleCoder(coders, localName) {\n    var _this;\n\n    _classCallCheck(this, TupleCoder);\n\n    var dynamic = false;\n    var types = [];\n    coders.forEach(function (coder) {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n\n      types.push(coder.type);\n    });\n    var type = \"tuple(\" + types.join(\",\") + \")\";\n    _this = _super.call(this, \"tuple\", type, localName, dynamic);\n    _this.coders = coders;\n    return _this;\n  }\n\n  _createClass(TupleCoder, [{\n    key: \"encode\",\n    value: function encode(writer, value) {\n      return pack(writer, this.coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n  }]);\n\n  return TupleCoder;\n}(Coder);","map":{"version":3,"sources":["../../src.ts/coders/tuple.ts"],"names":[],"mappings":"AAAA;;;;;;AAEA,SAAS,KAAT,QAAsC,kBAAtC;AACA,SAAS,IAAT,EAAe,MAAf,QAA6B,SAA7B;AAEA,WAAa,UAAb;AAAA;;AAAA;;AAGI,sBAAY,MAAZ,EAAkC,SAAlC,EAAmD;AAAA;;AAAA;;AAC/C,QAAI,OAAO,GAAG,KAAd;AACA,QAAM,KAAK,GAAkB,EAA7B;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAU;AACrB,UAAI,KAAK,CAAC,OAAV,EAAmB;AAAE,QAAA,OAAO,GAAG,IAAV;AAAiB;;AACtC,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,IAAjB;AACH,KAHD;AAIA,QAAM,IAAI,GAAI,WAAW,KAAK,CAAC,IAAN,CAAW,GAAX,CAAX,GAA6B,GAA3C;AAEA,8BAAM,OAAN,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC;AACA,UAAK,MAAL,GAAc,MAAd;AAV+C;AAWlD;;AAdL;AAAA;AAAA,2BAgBW,MAhBX,EAgB2B,KAhB3B,EAgBwE;AAChE,aAAO,IAAI,CAAC,MAAD,EAAS,KAAK,MAAd,EAAsB,KAAtB,CAAX;AACH;AAlBL;AAAA;AAAA,2BAoBW,MApBX,EAoByB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAM,CAAC,MAAD,EAAS,KAAK,MAAd,CAA/B,CAAP;AACH;AAtBL;;AAAA;AAAA,EAAgC,KAAhC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"module"}