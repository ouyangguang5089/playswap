{"ast":null,"code":"// @ts-check\n\n/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict';\n\nvar constants = require('./constants');\n\nvar _require = require('./util'),\n    encodeText = _require.encodeText,\n    decodeText = _require.decodeText,\n    concat = _require.concat;\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array');\n  }\n\n  var _encoding = encoding(nameOrCode),\n      name = _encoding.name,\n      codeBuf = _encoding.codeBuf;\n\n  validEncode(name, buf);\n  return concat([codeBuf, buf], codeBuf.length + buf.length);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction encode(nameOrCode, buf) {\n  var enc = encoding(nameOrCode);\n  var data = encodeText(enc.encode(buf));\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length);\n}\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction decode(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  var prefix = data[0]; // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n\n  var enc = encoding(data[0]);\n  return enc.decode(data.substring(1));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n * @returns {false|string}\n */\n\n\nfunction isEncoded(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n\n  try {\n    var enc = encoding(data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction validEncode(name, buf) {\n  var enc = encoding(name);\n  enc.decode(decodeText(buf));\n}\n/**\n * Get the encoding by name or code\n *\n * @param {string|number} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encoding(nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode];\n  } else {\n    throw new Error(\"Unsupported encoding: \".concat(nameOrCode));\n  }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encodingFromData(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  return encoding(data[0]);\n}\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/multibase/src/index.js"],"names":["constants","require","encodeText","decodeText","concat","multibase","nameOrCode","buf","Error","encoding","name","codeBuf","validEncode","length","encode","enc","data","decode","Uint8Array","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","toString","call","err","names","codes","encodingFromData","exports","module","freeze"],"mappings":"AAAA;;AACA;;;;;AAKA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;eAC2CA,OAAO,CAAC,QAAD,C;IAA1CC,U,YAAAA,U;IAAYC,U,YAAAA,U;IAAYC,M,YAAAA,M;AAEhC;;AAEA;;;;;;;;;;AAQA,SAASC,SAAT,CAAoBC,UAApB,EAAgCC,GAAhC,EAAqC;AACnC,MAAI,CAACA,GAAL,EAAU;AACR,UAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAHkC,kBAITC,QAAQ,CAACH,UAAD,CAJC;AAAA,MAI3BI,IAJ2B,aAI3BA,IAJ2B;AAAA,MAIrBC,OAJqB,aAIrBA,OAJqB;;AAKnCC,EAAAA,WAAW,CAACF,IAAD,EAAOH,GAAP,CAAX;AAEA,SAAOH,MAAM,CAAC,CAACO,OAAD,EAAUJ,GAAV,CAAD,EAAiBI,OAAO,CAACE,MAAR,GAAiBN,GAAG,CAACM,MAAtC,CAAb;AACD;AAED;;;;;;;;;;;AASA,SAASC,MAAT,CAAiBR,UAAjB,EAA6BC,GAA7B,EAAkC;AAChC,MAAMQ,GAAG,GAAGN,QAAQ,CAACH,UAAD,CAApB;AACA,MAAMU,IAAI,GAAGd,UAAU,CAACa,GAAG,CAACD,MAAJ,CAAWP,GAAX,CAAD,CAAvB;AAEA,SAAOH,MAAM,CAAC,CAACW,GAAG,CAACJ,OAAL,EAAcK,IAAd,CAAD,EAAsBD,GAAG,CAACJ,OAAJ,CAAYE,MAAZ,GAAqBG,IAAI,CAACH,MAAhD,CAAb;AACD;AAED;;;;;;;;;;;AASA,SAASI,MAAT,CAAiBD,IAAjB,EAAuB;AACrB,MAAIA,IAAI,YAAYE,UAApB,EAAgC;AAC9BF,IAAAA,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;AACD;;AACD,MAAMG,MAAM,GAAGH,IAAI,CAAC,CAAD,CAAnB,CAJqB,CAMrB;;AACA,MAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkEI,QAAlE,CAA2ED,MAA3E,CAAJ,EAAwF;AACtFH,IAAAA,IAAI,GAAGA,IAAI,CAACK,WAAL,EAAP;AACD;;AACD,MAAMN,GAAG,GAAGN,QAAQ,CAACO,IAAI,CAAC,CAAD,CAAL,CAApB;AACA,SAAOD,GAAG,CAACE,MAAJ,CAAWD,IAAI,CAACM,SAAL,CAAe,CAAf,CAAX,CAAP;AACD;AAED;;;;;;;;AAMA,SAASC,SAAT,CAAoBP,IAApB,EAA0B;AACxB,MAAIA,IAAI,YAAYE,UAApB,EAAgC;AAC9BF,IAAAA,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;AACD,GAHuB,CAKxB;;;AACA,MAAIQ,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,IAA/B,MAAyC,iBAA7C,EAAgE;AAC9D,WAAO,KAAP;AACD;;AAED,MAAI;AACF,QAAMD,GAAG,GAAGN,QAAQ,CAACO,IAAI,CAAC,CAAD,CAAL,CAApB;AACA,WAAOD,GAAG,CAACL,IAAX;AACD,GAHD,CAGE,OAAOkB,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF;AAED;;;;;;;;;;AAQA,SAAShB,WAAT,CAAsBF,IAAtB,EAA4BH,GAA5B,EAAiC;AAC/B,MAAMQ,GAAG,GAAGN,QAAQ,CAACC,IAAD,CAApB;AACAK,EAAAA,GAAG,CAACE,MAAJ,CAAWd,UAAU,CAACI,GAAD,CAArB;AACD;AAED;;;;;;;;;AAOA,SAASE,QAAT,CAAmBH,UAAnB,EAA+B;AAC7B,MAAIN,SAAS,CAAC6B,KAAV,CAAgBvB,UAAhB,CAAJ,EAAiC;AAC/B,WAAON,SAAS,CAAC6B,KAAV,CAAgBvB,UAAhB,CAAP;AACD,GAFD,MAEO,IAAIN,SAAS,CAAC8B,KAAV,CAAgBxB,UAAhB,CAAJ,EAAiC;AACtC,WAAON,SAAS,CAAC8B,KAAV,CAAgBxB,UAAhB,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIE,KAAJ,iCAAmCF,UAAnC,EAAN;AACD;AACF;AAED;;;;;;;;;AAOA,SAASyB,gBAAT,CAA2Bf,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,YAAYE,UAApB,EAAgC;AAC9BF,IAAAA,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;AACD;;AAED,SAAOP,QAAQ,CAACO,IAAI,CAAC,CAAD,CAAL,CAAf;AACD;;AAEDgB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB3B,SAA3B;AACA2B,OAAO,CAAClB,MAAR,GAAiBA,MAAjB;AACAkB,OAAO,CAACf,MAAR,GAAiBA,MAAjB;AACAe,OAAO,CAACT,SAAR,GAAoBA,SAApB;AACAS,OAAO,CAACvB,QAAR,GAAmBA,QAAnB;AACAuB,OAAO,CAACD,gBAAR,GAA2BA,gBAA3B;AACAC,OAAO,CAACH,KAAR,GAAgBL,MAAM,CAACU,MAAP,CAAclC,SAAS,CAAC6B,KAAxB,CAAhB;AACAG,OAAO,CAACF,KAAR,GAAgBN,MAAM,CAACU,MAAP,CAAclC,SAAS,CAAC8B,KAAxB,CAAhB","sourcesContent":["// @ts-check\n/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(data[0])\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n * @returns {false|string}\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(data[0])\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string|number} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(data[0])\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nexports.names = Object.freeze(constants.names)\nexports.codes = Object.freeze(constants.codes)\n"]},"metadata":{},"sourceType":"script"}