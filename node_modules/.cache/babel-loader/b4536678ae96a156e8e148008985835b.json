{"ast":null,"code":"import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{CurrencyAmount,ETHER,JSBI,Percent,Price}from'@uniswap/sdk';import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{PairState,usePair}from'../../data/Reserves';import{useTotalSupply}from'../../data/TotalSupply';import{useActiveWeb3React}from'../../hooks';import{wrappedCurrency,wrappedCurrencyAmount}from'../../utils/wrappedCurrency';import{tryParseAmount}from'../swap/hooks';import{useCurrencyBalances}from'../wallet/hooks';import{Field,typeInput}from'./actions';var ZERO=JSBI.BigInt(0);export function useMintState(){return useSelector(function(state){return state.mint;});}export function useMintActionHandlers(noLiquidity){var dispatch=useDispatch();var onFieldAInput=useCallback(function(typedValue){dispatch(typeInput({field:Field.CURRENCY_A,typedValue:typedValue,noLiquidity:noLiquidity===true}));},[dispatch,noLiquidity]);var onFieldBInput=useCallback(function(typedValue){dispatch(typeInput({field:Field.CURRENCY_B,typedValue:typedValue,noLiquidity:noLiquidity===true}));},[dispatch,noLiquidity]);return{onFieldAInput:onFieldAInput,onFieldBInput:onFieldBInput};}export function useDerivedMintInfo(currencyA,currencyB){var _currencyBalances,_parsedAmounts,_currencyBalances$Fie,_currencyBalances$Fie2;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account,chainId=_useActiveWeb3React.chainId;var _useMintState=useMintState(),independentField=_useMintState.independentField,typedValue=_useMintState.typedValue,otherTypedValue=_useMintState.otherTypedValue;var dependentField=independentField===Field.CURRENCY_A?Field.CURRENCY_B:Field.CURRENCY_A;// tokens\nvar currencies=useMemo(function(){var _ref;return _ref={},_defineProperty(_ref,Field.CURRENCY_A,currencyA!==null&&currencyA!==void 0?currencyA:undefined),_defineProperty(_ref,Field.CURRENCY_B,currencyB!==null&&currencyB!==void 0?currencyB:undefined),_ref;},[currencyA,currencyB]);// pair\nvar _usePair=usePair(currencies[Field.CURRENCY_A],currencies[Field.CURRENCY_B]),_usePair2=_slicedToArray(_usePair,2),pairState=_usePair2[0],pair=_usePair2[1];var totalSupply=useTotalSupply(pair===null||pair===void 0?void 0:pair.liquidityToken);var noLiquidity=pairState===PairState.NOT_EXISTS||Boolean(totalSupply&&JSBI.equal(totalSupply.raw,ZERO));// balances\nvar balances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[currencies[Field.CURRENCY_A],currencies[Field.CURRENCY_B]]);var currencyBalances=(_currencyBalances={},_defineProperty(_currencyBalances,Field.CURRENCY_A,balances[0]),_defineProperty(_currencyBalances,Field.CURRENCY_B,balances[1]),_currencyBalances);// amounts\nvar independentAmount=tryParseAmount(typedValue,currencies[independentField]);var dependentAmount=useMemo(function(){if(noLiquidity){if(otherTypedValue&&currencies[dependentField]){return tryParseAmount(otherTypedValue,currencies[dependentField]);}return undefined;}else if(independentAmount){// we wrap the currencies just to get the price in terms of the other token\nvar wrappedIndependentAmount=wrappedCurrencyAmount(independentAmount,chainId);var _ref2=[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)],tokenA=_ref2[0],tokenB=_ref2[1];if(tokenA&&tokenB&&wrappedIndependentAmount&&pair){var dependentCurrency=dependentField===Field.CURRENCY_B?currencyB:currencyA;var dependentTokenAmount=dependentField===Field.CURRENCY_B?pair.priceOf(tokenA).quote(wrappedIndependentAmount):pair.priceOf(tokenB).quote(wrappedIndependentAmount);return dependentCurrency===ETHER?CurrencyAmount.ether(dependentTokenAmount.raw):dependentTokenAmount;}return undefined;}else{return undefined;}},[noLiquidity,otherTypedValue,currencies,dependentField,independentAmount,currencyA,chainId,currencyB,pair]);var parsedAmounts=(_parsedAmounts={},_defineProperty(_parsedAmounts,Field.CURRENCY_A,independentField===Field.CURRENCY_A?independentAmount:dependentAmount),_defineProperty(_parsedAmounts,Field.CURRENCY_B,independentField===Field.CURRENCY_A?dependentAmount:independentAmount),_parsedAmounts);var price=useMemo(function(){if(noLiquidity){var _currencyAAmount=parsedAmounts[Field.CURRENCY_A],_currencyBAmount=parsedAmounts[Field.CURRENCY_B];if(_currencyAAmount&&_currencyBAmount){return new Price(_currencyAAmount.currency,_currencyBAmount.currency,_currencyAAmount.raw,_currencyBAmount.raw);}return undefined;}else{var wrappedCurrencyA=wrappedCurrency(currencyA,chainId);return pair&&wrappedCurrencyA?pair.priceOf(wrappedCurrencyA):undefined;}},[chainId,currencyA,noLiquidity,pair,parsedAmounts]);// liquidity minted\nvar liquidityMinted=useMemo(function(){var currencyAAmount=parsedAmounts[Field.CURRENCY_A],currencyBAmount=parsedAmounts[Field.CURRENCY_B];var _ref3=[wrappedCurrencyAmount(currencyAAmount,chainId),wrappedCurrencyAmount(currencyBAmount,chainId)],tokenAmountA=_ref3[0],tokenAmountB=_ref3[1];if(pair&&totalSupply&&tokenAmountA&&tokenAmountB){return pair.getLiquidityMinted(totalSupply,tokenAmountA,tokenAmountB);}else{return undefined;}},[parsedAmounts,chainId,pair,totalSupply]);var poolTokenPercentage=useMemo(function(){if(liquidityMinted&&totalSupply){return new Percent(liquidityMinted.raw,totalSupply.add(liquidityMinted).raw);}else{return undefined;}},[liquidityMinted,totalSupply]);var error;if(!account){error='Connect Wallet';}if(pairState===PairState.INVALID){var _error;error=(_error=error)!==null&&_error!==void 0?_error:'Invalid pair';}if(!parsedAmounts[Field.CURRENCY_A]||!parsedAmounts[Field.CURRENCY_B]){var _error2;error=(_error2=error)!==null&&_error2!==void 0?_error2:'Enter an amount';}var currencyAAmount=parsedAmounts[Field.CURRENCY_A],currencyBAmount=parsedAmounts[Field.CURRENCY_B];if(currencyAAmount&&(currencyBalances===null||currencyBalances===void 0?void 0:(_currencyBalances$Fie=currencyBalances[Field.CURRENCY_A])===null||_currencyBalances$Fie===void 0?void 0:_currencyBalances$Fie.lessThan(currencyAAmount))){var _currencies$Field$CUR;error='Insufficient '+((_currencies$Field$CUR=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR===void 0?void 0:_currencies$Field$CUR.symbol)+' balance';}if(currencyBAmount&&(currencyBalances===null||currencyBalances===void 0?void 0:(_currencyBalances$Fie2=currencyBalances[Field.CURRENCY_B])===null||_currencyBalances$Fie2===void 0?void 0:_currencyBalances$Fie2.lessThan(currencyBAmount))){var _currencies$Field$CUR2;error='Insufficient '+((_currencies$Field$CUR2=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR2===void 0?void 0:_currencies$Field$CUR2.symbol)+' balance';}return{dependentField:dependentField,currencies:currencies,pair:pair,pairState:pairState,currencyBalances:currencyBalances,parsedAmounts:parsedAmounts,price:price,noLiquidity:noLiquidity,liquidityMinted:liquidityMinted,poolTokenPercentage:poolTokenPercentage,error:error};}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/mint/hooks.ts"],"names":["CurrencyAmount","ETHER","JSBI","Percent","Price","useCallback","useMemo","useDispatch","useSelector","PairState","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","wrappedCurrencyAmount","tryParseAmount","useCurrencyBalances","Field","typeInput","ZERO","BigInt","useMintState","state","mint","useMintActionHandlers","noLiquidity","dispatch","onFieldAInput","typedValue","field","CURRENCY_A","onFieldBInput","CURRENCY_B","useDerivedMintInfo","currencyA","currencyB","account","chainId","independentField","otherTypedValue","dependentField","currencies","undefined","pairState","pair","totalSupply","liquidityToken","NOT_EXISTS","Boolean","equal","raw","balances","currencyBalances","independentAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ether","parsedAmounts","price","currencyAAmount","currencyBAmount","currency","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","poolTokenPercentage","add","error","INVALID","lessThan","symbol"],"mappings":"wTAAA,OAAmBA,cAAnB,CAAmCC,KAAnC,CAA0CC,IAA1C,CAAsDC,OAAtD,CAA+DC,KAA/D,KAAyF,cAAzF,CACA,OAASC,WAAT,CAAsBC,OAAtB,KAAqC,OAArC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,qBAAnC,CACA,OAASC,cAAT,KAA+B,wBAA/B,CAEA,OAASC,kBAAT,KAAmC,aAAnC,CACA,OAASC,eAAT,CAA0BC,qBAA1B,KAAuD,6BAAvD,CAEA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,mBAAT,KAAoC,iBAApC,CACA,OAASC,KAAT,CAAgBC,SAAhB,KAAiC,WAAjC,CAEA,GAAMC,CAAAA,IAAI,CAAGjB,IAAI,CAACkB,MAAL,CAAY,CAAZ,CAAb,CAEA,MAAO,SAASC,CAAAA,YAAT,EAA0C,CAC/C,MAAOb,CAAAA,WAAW,CAA6B,SAAAc,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAlC,CAAlB,CACD,CAED,MAAO,SAASC,CAAAA,qBAAT,CACLC,WADK,CAKL,CACA,GAAMC,CAAAA,QAAQ,CAAGnB,WAAW,EAA5B,CAEA,GAAMoB,CAAAA,aAAa,CAAGtB,WAAW,CAC/B,SAACuB,UAAD,CAAwB,CACtBF,QAAQ,CAACR,SAAS,CAAC,CAAEW,KAAK,CAAEZ,KAAK,CAACa,UAAf,CAA2BF,UAAU,CAAVA,UAA3B,CAAuCH,WAAW,CAAEA,WAAW,GAAK,IAApE,CAAD,CAAV,CAAR,CACD,CAH8B,CAI/B,CAACC,QAAD,CAAWD,WAAX,CAJ+B,CAAjC,CAMA,GAAMM,CAAAA,aAAa,CAAG1B,WAAW,CAC/B,SAACuB,UAAD,CAAwB,CACtBF,QAAQ,CAACR,SAAS,CAAC,CAAEW,KAAK,CAAEZ,KAAK,CAACe,UAAf,CAA2BJ,UAAU,CAAVA,UAA3B,CAAuCH,WAAW,CAAEA,WAAW,GAAK,IAApE,CAAD,CAAV,CAAR,CACD,CAH8B,CAI/B,CAACC,QAAD,CAAWD,WAAX,CAJ+B,CAAjC,CAOA,MAAO,CACLE,aAAa,CAAbA,aADK,CAELI,aAAa,CAAbA,aAFK,CAAP,CAID,CAED,MAAO,SAASE,CAAAA,kBAAT,CACLC,SADK,CAELC,SAFK,CAeL,2GAC6BvB,kBAAkB,EAD/C,CACQwB,OADR,qBACQA,OADR,CACiBC,OADjB,qBACiBA,OADjB,mBAG0DhB,YAAY,EAHtE,CAGQiB,gBAHR,eAGQA,gBAHR,CAG0BV,UAH1B,eAG0BA,UAH1B,CAGsCW,eAHtC,eAGsCA,eAHtC,CAKA,GAAMC,CAAAA,cAAc,CAAGF,gBAAgB,GAAKrB,KAAK,CAACa,UAA3B,CAAwCb,KAAK,CAACe,UAA9C,CAA2Df,KAAK,CAACa,UAAxF,CAEA;AACA,GAAMW,CAAAA,UAA2C,CAAGnC,OAAO,CACzD,wDACGW,KAAK,CAACa,UADT,CACsBI,SADtB,SACsBA,SADtB,UACsBA,SADtB,CACmCQ,SADnC,uBAEGzB,KAAK,CAACe,UAFT,CAEsBG,SAFtB,SAEsBA,SAFtB,UAEsBA,SAFtB,CAEmCO,SAFnC,QADyD,CAKzD,CAACR,SAAD,CAAYC,SAAZ,CALyD,CAA3D,CAQA;AAhBA,aAiB0BzB,OAAO,CAAC+B,UAAU,CAACxB,KAAK,CAACa,UAAP,CAAX,CAA+BW,UAAU,CAACxB,KAAK,CAACe,UAAP,CAAzC,CAjBjC,sCAiBOW,SAjBP,cAiBkBC,IAjBlB,cAkBA,GAAMC,CAAAA,WAAW,CAAGlC,cAAc,CAACiC,IAAD,SAACA,IAAD,iBAACA,IAAI,CAAEE,cAAP,CAAlC,CAEA,GAAMrB,CAAAA,WAAoB,CACxBkB,SAAS,GAAKlC,SAAS,CAACsC,UAAxB,EAAsCC,OAAO,CAACH,WAAW,EAAI3C,IAAI,CAAC+C,KAAL,CAAWJ,WAAW,CAACK,GAAvB,CAA4B/B,IAA5B,CAAhB,CAD/C,CAGA;AACA,GAAMgC,CAAAA,QAAQ,CAAGnC,mBAAmB,CAACoB,OAAD,SAACA,OAAD,UAACA,OAAD,CAAYM,SAAZ,CAAuB,CACzDD,UAAU,CAACxB,KAAK,CAACa,UAAP,CAD+C,CAEzDW,UAAU,CAACxB,KAAK,CAACe,UAAP,CAF+C,CAAvB,CAApC,CAIA,GAAMoB,CAAAA,gBAAuD,yDAC1DnC,KAAK,CAACa,UADoD,CACvCqB,QAAQ,CAAC,CAAD,CAD+B,oCAE1DlC,KAAK,CAACe,UAFoD,CAEvCmB,QAAQ,CAAC,CAAD,CAF+B,oBAA7D,CAKA;AACA,GAAME,CAAAA,iBAA6C,CAAGtC,cAAc,CAACa,UAAD,CAAaa,UAAU,CAACH,gBAAD,CAAvB,CAApE,CACA,GAAMgB,CAAAA,eAA2C,CAAGhD,OAAO,CAAC,UAAM,CAChE,GAAImB,WAAJ,CAAiB,CACf,GAAIc,eAAe,EAAIE,UAAU,CAACD,cAAD,CAAjC,CAAmD,CACjD,MAAOzB,CAAAA,cAAc,CAACwB,eAAD,CAAkBE,UAAU,CAACD,cAAD,CAA5B,CAArB,CACD,CACD,MAAOE,CAAAA,SAAP,CACD,CALD,IAKO,IAAIW,iBAAJ,CAAuB,CAC5B;AACA,GAAME,CAAAA,wBAAwB,CAAGzC,qBAAqB,CAACuC,iBAAD,CAAoBhB,OAApB,CAAtD,CAF4B,UAGH,CAACxB,eAAe,CAACqB,SAAD,CAAYG,OAAZ,CAAhB,CAAsCxB,eAAe,CAACsB,SAAD,CAAYE,OAAZ,CAArD,CAHG,CAGrBmB,MAHqB,UAGbC,MAHa,UAI5B,GAAID,MAAM,EAAIC,MAAV,EAAoBF,wBAApB,EAAgDX,IAApD,CAA0D,CACxD,GAAMc,CAAAA,iBAAiB,CAAGlB,cAAc,GAAKvB,KAAK,CAACe,UAAzB,CAAsCG,SAAtC,CAAkDD,SAA5E,CACA,GAAMyB,CAAAA,oBAAoB,CACxBnB,cAAc,GAAKvB,KAAK,CAACe,UAAzB,CACIY,IAAI,CAACgB,OAAL,CAAaJ,MAAb,EAAqBK,KAArB,CAA2BN,wBAA3B,CADJ,CAEIX,IAAI,CAACgB,OAAL,CAAaH,MAAb,EAAqBI,KAArB,CAA2BN,wBAA3B,CAHN,CAIA,MAAOG,CAAAA,iBAAiB,GAAKzD,KAAtB,CAA8BD,cAAc,CAAC8D,KAAf,CAAqBH,oBAAoB,CAACT,GAA1C,CAA9B,CAA+ES,oBAAtF,CACD,CACD,MAAOjB,CAAAA,SAAP,CACD,CAbM,IAaA,CACL,MAAOA,CAAAA,SAAP,CACD,CACF,CAtB0D,CAsBxD,CAACjB,WAAD,CAAcc,eAAd,CAA+BE,UAA/B,CAA2CD,cAA3C,CAA2Da,iBAA3D,CAA8EnB,SAA9E,CAAyFG,OAAzF,CAAkGF,SAAlG,CAA6GS,IAA7G,CAtBwD,CAA3D,CAuBA,GAAMmB,CAAAA,aAA+D,mDAClE9C,KAAK,CAACa,UAD4D,CAC/CQ,gBAAgB,GAAKrB,KAAK,CAACa,UAA3B,CAAwCuB,iBAAxC,CAA4DC,eADb,iCAElErC,KAAK,CAACe,UAF4D,CAE/CM,gBAAgB,GAAKrB,KAAK,CAACa,UAA3B,CAAwCwB,eAAxC,CAA0DD,iBAFX,iBAArE,CAKA,GAAMW,CAAAA,KAAK,CAAG1D,OAAO,CAAC,UAAM,CAC1B,GAAImB,WAAJ,CAAiB,IACawC,CAAAA,gBADb,CACsEF,aADtE,CACN9C,KAAK,CAACa,UADA,EACkDoC,gBADlD,CACsEH,aADtE,CAC+B9C,KAAK,CAACe,UADrC,EAEf,GAAIiC,gBAAe,EAAIC,gBAAvB,CAAwC,CACtC,MAAO,IAAI9D,CAAAA,KAAJ,CAAU6D,gBAAe,CAACE,QAA1B,CAAoCD,gBAAe,CAACC,QAApD,CAA8DF,gBAAe,CAACf,GAA9E,CAAmFgB,gBAAe,CAAChB,GAAnG,CAAP,CACD,CACD,MAAOR,CAAAA,SAAP,CACD,CAND,IAMO,CACL,GAAM0B,CAAAA,gBAAgB,CAAGvD,eAAe,CAACqB,SAAD,CAAYG,OAAZ,CAAxC,CACA,MAAOO,CAAAA,IAAI,EAAIwB,gBAAR,CAA2BxB,IAAI,CAACgB,OAAL,CAAaQ,gBAAb,CAA3B,CAA4D1B,SAAnE,CACD,CACF,CAXoB,CAWlB,CAACL,OAAD,CAAUH,SAAV,CAAqBT,WAArB,CAAkCmB,IAAlC,CAAwCmB,aAAxC,CAXkB,CAArB,CAaA;AACA,GAAMM,CAAAA,eAAe,CAAG/D,OAAO,CAAC,UAAM,IACR2D,CAAAA,eADQ,CACiDF,aADjD,CAC3B9C,KAAK,CAACa,UADqB,EAC6BoC,eAD7B,CACiDH,aADjD,CACU9C,KAAK,CAACe,UADhB,YAEC,CACnClB,qBAAqB,CAACmD,eAAD,CAAkB5B,OAAlB,CADc,CAEnCvB,qBAAqB,CAACoD,eAAD,CAAkB7B,OAAlB,CAFc,CAFD,CAE7BiC,YAF6B,UAEfC,YAFe,UAMpC,GAAI3B,IAAI,EAAIC,WAAR,EAAuByB,YAAvB,EAAuCC,YAA3C,CAAyD,CACvD,MAAO3B,CAAAA,IAAI,CAAC4B,kBAAL,CAAwB3B,WAAxB,CAAqCyB,YAArC,CAAmDC,YAAnD,CAAP,CACD,CAFD,IAEO,CACL,MAAO7B,CAAAA,SAAP,CACD,CACF,CAX8B,CAW5B,CAACqB,aAAD,CAAgB1B,OAAhB,CAAyBO,IAAzB,CAA+BC,WAA/B,CAX4B,CAA/B,CAaA,GAAM4B,CAAAA,mBAAmB,CAAGnE,OAAO,CAAC,UAAM,CACxC,GAAI+D,eAAe,EAAIxB,WAAvB,CAAoC,CAClC,MAAO,IAAI1C,CAAAA,OAAJ,CAAYkE,eAAe,CAACnB,GAA5B,CAAiCL,WAAW,CAAC6B,GAAZ,CAAgBL,eAAhB,EAAiCnB,GAAlE,CAAP,CACD,CAFD,IAEO,CACL,MAAOR,CAAAA,SAAP,CACD,CACF,CANkC,CAMhC,CAAC2B,eAAD,CAAkBxB,WAAlB,CANgC,CAAnC,CAQA,GAAI8B,CAAAA,KAAJ,CACA,GAAI,CAACvC,OAAL,CAAc,CACZuC,KAAK,CAAG,gBAAR,CACD,CAED,GAAIhC,SAAS,GAAKlC,SAAS,CAACmE,OAA5B,CAAqC,YACnCD,KAAK,SAAGA,KAAH,iCAAY,cAAjB,CACD,CAED,GAAI,CAACZ,aAAa,CAAC9C,KAAK,CAACa,UAAP,CAAd,EAAoC,CAACiC,aAAa,CAAC9C,KAAK,CAACe,UAAP,CAAtD,CAA0E,aACxE2C,KAAK,UAAGA,KAAH,mCAAY,iBAAjB,CACD,CA7GD,GA+G4BV,CAAAA,eA/G5B,CA+GqFF,aA/GrF,CA+GS9C,KAAK,CAACa,UA/Gf,EA+GiEoC,eA/GjE,CA+GqFH,aA/GrF,CA+G8C9C,KAAK,CAACe,UA/GpD,EAiHA,GAAIiC,eAAe,GAAIb,gBAAJ,SAAIA,gBAAJ,wCAAIA,gBAAgB,CAAGnC,KAAK,CAACa,UAAT,CAApB,gDAAI,sBAAsC+C,QAAtC,CAA+CZ,eAA/C,CAAJ,CAAnB,CAAwF,2BACtFU,KAAK,CAAG,wCAAkBlC,UAAU,CAACxB,KAAK,CAACa,UAAP,CAA5B,gDAAkB,sBAA8BgD,MAAhD,EAAyD,UAAjE,CACD,CAED,GAAIZ,eAAe,GAAId,gBAAJ,SAAIA,gBAAJ,yCAAIA,gBAAgB,CAAGnC,KAAK,CAACe,UAAT,CAApB,iDAAI,uBAAsC6C,QAAtC,CAA+CX,eAA/C,CAAJ,CAAnB,CAAwF,4BACtFS,KAAK,CAAG,yCAAkBlC,UAAU,CAACxB,KAAK,CAACe,UAAP,CAA5B,iDAAkB,uBAA8B8C,MAAhD,EAAyD,UAAjE,CACD,CAED,MAAO,CACLtC,cAAc,CAAdA,cADK,CAELC,UAAU,CAAVA,UAFK,CAGLG,IAAI,CAAJA,IAHK,CAILD,SAAS,CAATA,SAJK,CAKLS,gBAAgB,CAAhBA,gBALK,CAMLW,aAAa,CAAbA,aANK,CAOLC,KAAK,CAALA,KAPK,CAQLvC,WAAW,CAAXA,WARK,CASL4C,eAAe,CAAfA,eATK,CAULI,mBAAmB,CAAnBA,mBAVK,CAWLE,KAAK,CAALA,KAXK,CAAP,CAaD","sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@uniswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PairState, usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>(state => state.mint)\n}\n\nexport function useMintActionHandlers(\n  noLiquidity: boolean | undefined\n): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B]\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    } else {\n      return undefined\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  }\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    } else {\n      const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n    }\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId)\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    } else {\n      return undefined\n    }\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    } else {\n      return undefined\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? 'Invalid pair'\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = 'Insufficient ' + currencies[Field.CURRENCY_A]?.symbol + ' balance'\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = 'Insufficient ' + currencies[Field.CURRENCY_B]?.symbol + ' balance'\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}