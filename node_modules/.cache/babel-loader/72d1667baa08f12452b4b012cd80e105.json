{"ast":null,"code":"var _regeneratorRuntime = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar flatMap = require('lodash.flatmap');\n\nvar BaseFilter = require('./base-filter');\n\nvar getBlocksForRange = require('./getBlocksForRange');\n\nvar _require = require('./hexUtils'),\n    incrementHexInt = _require.incrementHexInt;\n\nvar TxFilter = /*#__PURE__*/function (_BaseFilter) {\n  \"use strict\";\n\n  _inherits(TxFilter, _BaseFilter);\n\n  var _super = _createSuper(TxFilter);\n\n  function TxFilter(_ref) {\n    var _this;\n\n    var provider = _ref.provider;\n\n    _classCallCheck(this, TxFilter);\n\n    _this = _super.call(this);\n    _this.type = 'tx';\n    _this.provider = provider;\n    return _this;\n  }\n\n  _createClass(TxFilter, [{\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var oldBlock, toBlock, fromBlock, blocks, blockTxHashes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldBlock = _ref2.oldBlock;\n                toBlock = oldBlock;\n                fromBlock = incrementHexInt(oldBlock);\n                _context.next = 5;\n                return getBlocksForRange({\n                  provider: this.provider,\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n\n              case 5:\n                blocks = _context.sent;\n                blockTxHashes = flatMap(blocks, function (block) {\n                  return block.transactions;\n                }); // add to results\n\n                this.addResults(blockTxHashes);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }]);\n\n  return TxFilter;\n}(BaseFilter);\n\nmodule.exports = TxFilter;","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/eth-json-rpc-filters/tx-filter.js"],"names":["flatMap","require","BaseFilter","getBlocksForRange","incrementHexInt","TxFilter","provider","type","oldBlock","toBlock","fromBlock","blocks","blockTxHashes","block","transactions","addResults","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;eAC4BA,OAAO,CAAC,YAAD,C;IAA3BG,e,YAAAA,e;;IAEFC,Q;;;;;;;AAEJ,0BAA2B;AAAA;;AAAA,QAAZC,QAAY,QAAZA,QAAY;;AAAA;;AACzB;AACA,UAAKC,IAAL,GAAY,IAAZ;AACA,UAAKD,QAAL,GAAgBA,QAAhB;AAHyB;AAI1B;;;;;;;;;;;AAEeE,gBAAAA,Q,SAAAA,Q;AACRC,gBAAAA,O,GAAUD,Q;AACVE,gBAAAA,S,GAAYN,eAAe,CAACI,QAAD,C;;uBACZL,iBAAiB,CAAC;AAAEG,kBAAAA,QAAQ,EAAE,KAAKA,QAAjB;AAA2BI,kBAAAA,SAAS,EAATA,SAA3B;AAAsCD,kBAAAA,OAAO,EAAPA;AAAtC,iBAAD,C;;;AAAhCE,gBAAAA,M;AACAC,gBAAAA,a,GAAgBZ,OAAO,CAACW,MAAD,EAAS,UAACE,KAAD;AAAA,yBAAWA,KAAK,CAACC,YAAjB;AAAA,iBAAT,C,EAC7B;;AACA,qBAAKC,UAAL,CAAgBH,aAAhB;;;;;;;;;;;;;;;;;;;EAdmBV,U;;AAmBvBc,MAAM,CAACC,OAAP,GAAiBZ,QAAjB","sourcesContent":["const flatMap = require('lodash.flatmap')\nconst BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass TxFilter extends BaseFilter {\n\n  constructor ({ provider }) {\n    super()\n    this.type = 'tx'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock }) {\n    const toBlock = oldBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockTxHashes = flatMap(blocks, (block) => block.transactions)\n    // add to results\n    this.addResults(blockTxHashes)\n  }\n\n}\n\nmodule.exports = TxFilter\n"]},"metadata":{},"sourceType":"script"}