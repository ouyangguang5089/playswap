{"ast":null,"code":"import{TokenAmount}from'@uniswap/sdk';import{useMemo}from'react';import{useTokenContract}from'../hooks/useContract';import{useSingleCallResult}from'../state/multicall/hooks';export function useTokenAllowance(token,owner,spender){var contract=useTokenContract(token===null||token===void 0?void 0:token.address,false);var inputs=useMemo(function(){return[owner,spender];},[owner,spender]);var allowance=useSingleCallResult(contract,'allowance',inputs).result;return useMemo(function(){return token&&allowance?new TokenAmount(token,allowance.toString()):undefined;},[token,allowance]);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/data/Allowances.ts"],"names":["TokenAmount","useMemo","useTokenContract","useSingleCallResult","useTokenAllowance","token","owner","spender","contract","address","inputs","allowance","result","toString","undefined"],"mappings":"AAAA,OAAgBA,WAAhB,KAAmC,cAAnC,CACA,OAASC,OAAT,KAAwB,OAAxB,CAEA,OAASC,gBAAT,KAAiC,sBAAjC,CACA,OAASC,mBAAT,KAAoC,0BAApC,CAEA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,KAA3B,CAA0CC,KAA1C,CAA0DC,OAA1D,CAAqG,CAC1G,GAAMC,CAAAA,QAAQ,CAAGN,gBAAgB,CAACG,KAAD,SAACA,KAAD,iBAACA,KAAK,CAAEI,OAAR,CAAiB,KAAjB,CAAjC,CAEA,GAAMC,CAAAA,MAAM,CAAGT,OAAO,CAAC,iBAAM,CAACK,KAAD,CAAQC,OAAR,CAAN,EAAD,CAAyB,CAACD,KAAD,CAAQC,OAAR,CAAzB,CAAtB,CACA,GAAMI,CAAAA,SAAS,CAAGR,mBAAmB,CAACK,QAAD,CAAW,WAAX,CAAwBE,MAAxB,CAAnB,CAAmDE,MAArE,CAEA,MAAOX,CAAAA,OAAO,CAAC,iBAAOI,CAAAA,KAAK,EAAIM,SAAT,CAAqB,GAAIX,CAAAA,WAAJ,CAAgBK,KAAhB,CAAuBM,SAAS,CAACE,QAAV,EAAvB,CAArB,CAAoEC,SAA3E,EAAD,CAAwF,CACpGT,KADoG,CAEpGM,SAFoG,CAAxF,CAAd,CAID","sourcesContent":["import { Token, TokenAmount } from '@uniswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from '../hooks/useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nexport function useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(() => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined), [\n    token,\n    allowance\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}