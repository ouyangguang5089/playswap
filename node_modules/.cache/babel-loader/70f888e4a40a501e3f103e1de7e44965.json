{"ast":null,"code":"import _regeneratorRuntime from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{UNI}from'./../../constants/index';import{TokenAmount,JSBI}from'@uniswap/sdk';import{useEffect,useState}from'react';import{useActiveWeb3React}from'../../hooks';import{useMerkleDistributorContract}from'../../hooks/useContract';import{useSingleCallResult}from'../multicall/hooks';import{calculateGasMargin,isAddress}from'../../utils';import{useTransactionAdder}from'../transactions/hooks';var CLAIM_PROMISES={};// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account,chainId){var _CLAIM_PROMISES$key;var formatted=isAddress(account);if(!formatted)return Promise.reject(new Error('Invalid address'));var key=\"\".concat(chainId,\":\").concat(account);return CLAIM_PROMISES[key]=(_CLAIM_PROMISES$key=CLAIM_PROMISES[key])!==null&&_CLAIM_PROMISES$key!==void 0?_CLAIM_PROMISES$key:fetch(\"https://gentle-frost-9e74.uniswap.workers.dev/\".concat(chainId,\"/\").concat(formatted)).then(function(res){if(res.status===200){return res.json();}else{console.debug(\"No claim for account \".concat(formatted,\" on chain ID \").concat(chainId));return null;}}).catch(function(error){console.error('Failed to get claim data',error);});}// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nexport function useUserClaimData(account){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var key=\"\".concat(chainId,\":\").concat(account);var _useState=useState({}),_useState2=_slicedToArray(_useState,2),claimInfo=_useState2[0],setClaimInfo=_useState2[1];useEffect(function(){if(!account||!chainId)return;fetchClaim(account,chainId).then(function(accountClaimInfo){return setClaimInfo(function(claimInfo){return _objectSpread(_objectSpread({},claimInfo),{},_defineProperty({},key,accountClaimInfo));});});},[account,chainId,key]);return account&&chainId?claimInfo[key]:undefined;}// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account){var _isClaimedResult$resu;var userClaimData=useUserClaimData(account);var distributorContract=useMerkleDistributorContract();var isClaimedResult=useSingleCallResult(distributorContract,'isClaimed',[userClaimData===null||userClaimData===void 0?void 0:userClaimData.index]);// user is in blob and contract marks as unclaimed\nreturn Boolean(userClaimData&&!isClaimedResult.loading&&((_isClaimedResult$resu=isClaimedResult.result)===null||_isClaimedResult$resu===void 0?void 0:_isClaimedResult$resu[0])===false);}export function useUserUnclaimedAmount(account){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var userClaimData=useUserClaimData(account);var canClaim=useUserHasAvailableClaim(account);var uni=chainId?UNI[chainId]:undefined;if(!uni)return undefined;if(!canClaim||!userClaimData){return new TokenAmount(uni,JSBI.BigInt(0));}return new TokenAmount(uni,JSBI.BigInt(userClaimData.amount));}export function useClaimCallback(account){// get claim data for this account\nvar _useActiveWeb3React3=useActiveWeb3React(),library=_useActiveWeb3React3.library,chainId=_useActiveWeb3React3.chainId;var claimData=useUserClaimData(account);// used for popup summary\nvar unClaimedAmount=useUserUnclaimedAmount(account);var addTransaction=useTransactionAdder();var distributorContract=useMerkleDistributorContract();var claimCallback=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _distributorContract$;var args;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!claimData||!account||!library||!chainId||!distributorContract)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:args=[claimData.index,account,claimData.amount,claimData.proof];return _context.abrupt(\"return\",(_distributorContract$=distributorContract.estimateGas)['claim'].apply(_distributorContract$,args.concat([{}])).then(function(estimatedGasLimit){return distributorContract.claim.apply(distributorContract,args.concat([{value:null,gasLimit:calculateGasMargin(estimatedGasLimit)}])).then(function(response){addTransaction(response,{summary:\"Claimed \".concat(unClaimedAmount===null||unClaimedAmount===void 0?void 0:unClaimedAmount.toSignificant(4),\" UNI\"),claim:{recipient:account}});return response.hash;});}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function claimCallback(){return _ref.apply(this,arguments);};}();return{claimCallback:claimCallback};}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/claim/hooks.ts"],"names":["UNI","TokenAmount","JSBI","useEffect","useState","useActiveWeb3React","useMerkleDistributorContract","useSingleCallResult","calculateGasMargin","isAddress","useTransactionAdder","CLAIM_PROMISES","fetchClaim","account","chainId","formatted","Promise","reject","Error","key","fetch","then","res","status","json","console","debug","catch","error","useUserClaimData","claimInfo","setClaimInfo","accountClaimInfo","undefined","useUserHasAvailableClaim","userClaimData","distributorContract","isClaimedResult","index","Boolean","loading","result","useUserUnclaimedAmount","canClaim","uni","BigInt","amount","useClaimCallback","library","claimData","unClaimedAmount","addTransaction","claimCallback","args","proof","estimateGas","estimatedGasLimit","claim","value","gasLimit","response","summary","toSignificant","recipient","hash"],"mappings":"qwBAAA,OAASA,GAAT,KAAoB,yBAApB,CACA,OAASC,WAAT,CAAsBC,IAAtB,KAA2C,cAA3C,CAEA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,kBAAT,KAAmC,aAAnC,CACA,OAASC,4BAAT,KAA6C,yBAA7C,CACA,OAASC,mBAAT,KAAoC,oBAApC,CACA,OAASC,kBAAT,CAA6BC,SAA7B,KAA8C,aAA9C,CACA,OAASC,mBAAT,KAAoC,uBAApC,CAaA,GAAMC,CAAAA,cAAgE,CAAG,EAAzE,CAEA;AACA,QAASC,CAAAA,UAAT,CAAoBC,OAApB,CAAqCC,OAArC,CAAsF,yBACpF,GAAMC,CAAAA,SAAS,CAAGN,SAAS,CAACI,OAAD,CAA3B,CACA,GAAI,CAACE,SAAL,CAAgB,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAU,iBAAV,CAAf,CAAP,CAChB,GAAMC,CAAAA,GAAG,WAAML,OAAN,aAAiBD,OAAjB,CAAT,CAEA,MAAQF,CAAAA,cAAc,CAACQ,GAAD,CAAd,sBACNR,cAAc,CAACQ,GAAD,CADR,2DAENC,KAAK,yDAAkDN,OAAlD,aAA6DC,SAA7D,EAAL,CACGM,IADH,CACQ,SAAAC,GAAG,CAAI,CACX,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACtB,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CAFD,IAEO,CACLC,OAAO,CAACC,KAAR,gCAAsCX,SAAtC,yBAA+DD,OAA/D,GACA,MAAO,KAAP,CACD,CACF,CARH,EASGa,KATH,CASS,SAAAC,KAAK,CAAI,CACdH,OAAO,CAACG,KAAR,CAAc,0BAAd,CAA0CA,KAA1C,EACD,CAXH,CAFF,CAcD,CAED;AACA;AACA,MAAO,SAASC,CAAAA,gBAAT,CAA0BhB,OAA1B,CAAgG,yBACjFR,kBAAkB,EAD+D,CAC7FS,OAD6F,qBAC7FA,OAD6F,CAGrG,GAAMK,CAAAA,GAAG,WAAML,OAAN,aAAiBD,OAAjB,CAAT,CAHqG,cAInET,QAAQ,CAA0C,EAA1C,CAJ2D,wCAI9F0B,SAJ8F,eAInFC,YAJmF,eAMrG5B,SAAS,CAAC,UAAM,CACd,GAAI,CAACU,OAAD,EAAY,CAACC,OAAjB,CAA0B,OAC1BF,UAAU,CAACC,OAAD,CAAUC,OAAV,CAAV,CAA6BO,IAA7B,CAAkC,SAAAW,gBAAgB,QAChDD,CAAAA,YAAY,CAAC,SAAAD,SAAS,CAAI,CACxB,sCACKA,SADL,wBAEGX,GAFH,CAESa,gBAFT,GAID,CALW,CADoC,EAAlD,EAQD,CAVQ,CAUN,CAACnB,OAAD,CAAUC,OAAV,CAAmBK,GAAnB,CAVM,CAAT,CAYA,MAAON,CAAAA,OAAO,EAAIC,OAAX,CAAqBgB,SAAS,CAACX,GAAD,CAA9B,CAAsCc,SAA7C,CACD,CAED;AACA,MAAO,SAASC,CAAAA,wBAAT,CAAkCrB,OAAlC,CAA+E,2BACpF,GAAMsB,CAAAA,aAAa,CAAGN,gBAAgB,CAAChB,OAAD,CAAtC,CACA,GAAMuB,CAAAA,mBAAmB,CAAG9B,4BAA4B,EAAxD,CACA,GAAM+B,CAAAA,eAAe,CAAG9B,mBAAmB,CAAC6B,mBAAD,CAAsB,WAAtB,CAAmC,CAACD,aAAD,SAACA,aAAD,iBAACA,aAAa,CAAEG,KAAhB,CAAnC,CAA3C,CACA;AACA,MAAOC,CAAAA,OAAO,CAACJ,aAAa,EAAI,CAACE,eAAe,CAACG,OAAlC,EAA6C,wBAAAH,eAAe,CAACI,MAAhB,sEAAyB,CAAzB,KAAgC,KAA9E,CAAd,CACD,CAED,MAAO,SAASC,CAAAA,sBAAT,CAAgC7B,OAAhC,CAA6F,0BAC9ER,kBAAkB,EAD4D,CAC1FS,OAD0F,sBAC1FA,OAD0F,CAElG,GAAMqB,CAAAA,aAAa,CAAGN,gBAAgB,CAAChB,OAAD,CAAtC,CACA,GAAM8B,CAAAA,QAAQ,CAAGT,wBAAwB,CAACrB,OAAD,CAAzC,CAEA,GAAM+B,CAAAA,GAAG,CAAG9B,OAAO,CAAGd,GAAG,CAACc,OAAD,CAAN,CAAkBmB,SAArC,CACA,GAAI,CAACW,GAAL,CAAU,MAAOX,CAAAA,SAAP,CACV,GAAI,CAACU,QAAD,EAAa,CAACR,aAAlB,CAAiC,CAC/B,MAAO,IAAIlC,CAAAA,WAAJ,CAAgB2C,GAAhB,CAAqB1C,IAAI,CAAC2C,MAAL,CAAY,CAAZ,CAArB,CAAP,CACD,CACD,MAAO,IAAI5C,CAAAA,WAAJ,CAAgB2C,GAAhB,CAAqB1C,IAAI,CAAC2C,MAAL,CAAYV,aAAa,CAACW,MAA1B,CAArB,CAAP,CACD,CAED,MAAO,SAASC,CAAAA,gBAAT,CACLlC,OADK,CAIL,CACA;AADA,yBAE6BR,kBAAkB,EAF/C,CAEQ2C,OAFR,sBAEQA,OAFR,CAEiBlC,OAFjB,sBAEiBA,OAFjB,CAGA,GAAMmC,CAAAA,SAAS,CAAGpB,gBAAgB,CAAChB,OAAD,CAAlC,CAEA;AACA,GAAMqC,CAAAA,eAAwC,CAAGR,sBAAsB,CAAC7B,OAAD,CAAvE,CACA,GAAMsC,CAAAA,cAAc,CAAGzC,mBAAmB,EAA1C,CACA,GAAM0B,CAAAA,mBAAmB,CAAG9B,4BAA4B,EAAxD,CAEA,GAAM8C,CAAAA,aAAa,0FAAG,2KAChB,CAACH,SAAD,EAAc,CAACpC,OAAf,EAA0B,CAACmC,OAA3B,EAAsC,CAAClC,OAAvC,EAAkD,CAACsB,mBADnC,kEAGdiB,IAHc,CAGP,CAACJ,SAAS,CAACX,KAAX,CAAkBzB,OAAlB,CAA2BoC,SAAS,CAACH,MAArC,CAA6CG,SAAS,CAACK,KAAvD,CAHO,iCAKb,uBAAAlB,mBAAmB,CAACmB,WAApB,EAAgC,OAAhC,8BAA4CF,IAA5C,SAAkD,EAAlD,IAAsDhC,IAAtD,CAA2D,SAAAmC,iBAAiB,CAAI,CACrF,MAAOpB,CAAAA,mBAAmB,CACvBqB,KADI,OAAArB,mBAAmB,CACdiB,IADc,SACR,CAAEK,KAAK,CAAE,IAAT,CAAeC,QAAQ,CAAEnD,kBAAkB,CAACgD,iBAAD,CAA3C,CADQ,GAAnB,CAEJnC,IAFI,CAEC,SAACuC,QAAD,CAAmC,CACvCT,cAAc,CAACS,QAAD,CAAW,CACvBC,OAAO,mBAAaX,eAAb,SAAaA,eAAb,iBAAaA,eAAe,CAAEY,aAAjB,CAA+B,CAA/B,CAAb,QADgB,CAEvBL,KAAK,CAAE,CAAEM,SAAS,CAAElD,OAAb,CAFgB,CAAX,CAAd,CAIA,MAAO+C,CAAAA,QAAQ,CAACI,IAAhB,CACD,CARI,CAAP,CASD,CAVM,CALa,wDAAH,kBAAbZ,CAAAA,aAAa,0CAAnB,CAkBA,MAAO,CAAEA,aAAa,CAAbA,aAAF,CAAP,CACD","sourcesContent":["import { UNI } from './../../constants/index'\nimport { TokenAmount, JSBI, ChainId } from '@uniswap/sdk'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useEffect, useState } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useMerkleDistributorContract } from '../../hooks/useContract'\nimport { useSingleCallResult } from '../multicall/hooks'\nimport { calculateGasMargin, isAddress } from '../../utils'\nimport { useTransactionAdder } from '../transactions/hooks'\n\ninterface UserClaimData {\n  index: number\n  amount: string\n  proof: string[]\n  flags?: {\n    isSOCKS: boolean\n    isLP: boolean\n    isUser: boolean\n  }\n}\n\nconst CLAIM_PROMISES: { [key: string]: Promise<UserClaimData | null> } = {}\n\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account: string, chainId: ChainId): Promise<UserClaimData | null> {\n  const formatted = isAddress(account)\n  if (!formatted) return Promise.reject(new Error('Invalid address'))\n  const key = `${chainId}:${account}`\n\n  return (CLAIM_PROMISES[key] =\n    CLAIM_PROMISES[key] ??\n    fetch(`https://gentle-frost-9e74.uniswap.workers.dev/${chainId}/${formatted}`)\n      .then(res => {\n        if (res.status === 200) {\n          return res.json()\n        } else {\n          console.debug(`No claim for account ${formatted} on chain ID ${chainId}`)\n          return null\n        }\n      })\n      .catch(error => {\n        console.error('Failed to get claim data', error)\n      }))\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nexport function useUserClaimData(account: string | null | undefined): UserClaimData | null | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  const key = `${chainId}:${account}`\n  const [claimInfo, setClaimInfo] = useState<{ [key: string]: UserClaimData | null }>({})\n\n  useEffect(() => {\n    if (!account || !chainId) return\n    fetchClaim(account, chainId).then(accountClaimInfo =>\n      setClaimInfo(claimInfo => {\n        return {\n          ...claimInfo,\n          [key]: accountClaimInfo\n        }\n      })\n    )\n  }, [account, chainId, key])\n\n  return account && chainId ? claimInfo[key] : undefined\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account: string | null | undefined): boolean {\n  const userClaimData = useUserClaimData(account)\n  const distributorContract = useMerkleDistributorContract()\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData?.index])\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && isClaimedResult.result?.[0] === false)\n}\n\nexport function useUserUnclaimedAmount(account: string | null | undefined): TokenAmount | undefined {\n  const { chainId } = useActiveWeb3React()\n  const userClaimData = useUserClaimData(account)\n  const canClaim = useUserHasAvailableClaim(account)\n\n  const uni = chainId ? UNI[chainId] : undefined\n  if (!uni) return undefined\n  if (!canClaim || !userClaimData) {\n    return new TokenAmount(uni, JSBI.BigInt(0))\n  }\n  return new TokenAmount(uni, JSBI.BigInt(userClaimData.amount))\n}\n\nexport function useClaimCallback(\n  account: string | null | undefined\n): {\n  claimCallback: () => Promise<string>\n} {\n  // get claim data for this account\n  const { library, chainId } = useActiveWeb3React()\n  const claimData = useUserClaimData(account)\n\n  // used for popup summary\n  const unClaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(account)\n  const addTransaction = useTransactionAdder()\n  const distributorContract = useMerkleDistributorContract()\n\n  const claimCallback = async function() {\n    if (!claimData || !account || !library || !chainId || !distributorContract) return\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof]\n\n    return distributorContract.estimateGas['claim'](...args, {}).then(estimatedGasLimit => {\n      return distributorContract\n        .claim(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: `Claimed ${unClaimedAmount?.toSignificant(4)} UNI`,\n            claim: { recipient: account }\n          })\n          return response.hash\n        })\n    })\n  }\n\n  return { claimCallback }\n}\n"]},"metadata":{},"sourceType":"module"}