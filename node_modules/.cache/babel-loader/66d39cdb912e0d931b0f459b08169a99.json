{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _defineProperty = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar types_1 = require(\"../types\");\n\nvar ClientMessage_1 = require(\"./ClientMessage\");\n\nvar RxWebSocket_1 = require(\"./RxWebSocket\");\n\nvar ServerMessage_1 = require(\"./ServerMessage\");\n\nvar HEARTBEAT_INTERVAL = 10000;\nvar REQUEST_TIMEOUT = 60000;\n/**\n * WalletLink Connection\n */\n\nvar WalletLinkConnection = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param sessionId Session ID\n   * @param sessionKey Session Key\n   * @param serverUrl Walletlinkd RPC URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  function WalletLinkConnection(sessionId, sessionKey, serverUrl) {\n    var _this = this;\n\n    var WebSocketClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : WebSocket;\n\n    _classCallCheck(this, WalletLinkConnection);\n\n    this.sessionId = sessionId;\n    this.sessionKey = sessionKey;\n    this.subscriptions = new rxjs_1.Subscription();\n    this.destroyed = false;\n    this.lastHeartbeatResponse = 0;\n    this.nextReqId = types_1.IntNumber(1);\n    this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n    this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n    this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n    var ws = new RxWebSocket_1.RxWebSocket(serverUrl + \"/rpc\", WebSocketClass);\n    this.ws = ws; // attempt to reconnect every 5 seconds when disconnected\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED state\n    operators_1.skip(1), // if DISCONNECTED and not destroyed\n    operators_1.filter(function (cs) {\n      return cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !_this.destroyed;\n    }), // wait 5 seconds\n    operators_1.delay(5000), // check whether it's destroyed again\n    operators_1.filter(function (_) {\n      return !_this.destroyed;\n    }), // reconnect\n    operators_1.flatMap(function (_) {\n      return ws.connect();\n    }), operators_1.retry()).subscribe()); // perform authentication upon connection\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED and CONNECTING states\n    operators_1.skip(2), operators_1.switchMap(function (cs) {\n      return rxjs_1.iif(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, authenticate, and then check link status\n      _this.authenticate().pipe(operators_1.tap(function (_) {\n        return _this.sendIsLinked();\n      }), operators_1.tap(function (_) {\n        return _this.sendGetSessionConfig();\n      }), operators_1.map(function (_) {\n        return true;\n      })), // if not CONNECTED, emit false immediately\n      rxjs_1.of(false));\n    }), operators_1.distinctUntilChanged(), operators_1.catchError(function (_) {\n      return rxjs_1.of(false);\n    })).subscribe(function (connected) {\n      return _this.connectedSubject.next(connected);\n    })); // send heartbeat every n seconds while connected\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED state\n    operators_1.skip(1), operators_1.switchMap(function (cs) {\n      return rxjs_1.iif(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, start the heartbeat timer\n      rxjs_1.timer(0, HEARTBEAT_INTERVAL));\n    })).subscribe(function (i) {\n      return (// first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? _this.updateLastHeartbeat() : _this.heartbeat()\n      );\n    })); // handle server's heartbeat responses\n\n    this.subscriptions.add(ws.incomingData$.pipe(operators_1.filter(function (m) {\n      return m === \"h\";\n    })).subscribe(function (_) {\n      return _this.updateLastHeartbeat();\n    })); // handle link status updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe(operators_1.filter(function (m) {\n      return [\"IsLinkedOK\", \"Linked\"].includes(m.type);\n    })).subscribe(function (m) {\n      var msg = m;\n\n      _this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n    })); // handle session config updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe(operators_1.filter(function (m) {\n      return [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type);\n    })).subscribe(function (m) {\n      var msg = m;\n\n      _this.sessionConfigSubject.next({\n        webhookId: msg.webhookId,\n        webhookUrl: msg.webhookUrl,\n        metadata: msg.metadata\n      });\n    }));\n  }\n  /**\n   * Make a connection to the server\n   */\n\n\n  _createClass(WalletLinkConnection, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.destroyed) {\n        throw new Error(\"instance is destroyed\");\n      }\n\n      this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletLinkConnection\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.subscriptions.unsubscribe();\n      this.ws.disconnect();\n      this.destroyed = true;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"setSessionMetadata\",\n\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n    value: function setSessionMetadata(key, value) {\n      var _this2 = this;\n\n      var message = ClientMessage_1.ClientMessageSetSessionConfig({\n        id: types_1.IntNumber(this.nextReqId++),\n        sessionId: this.sessionId,\n        metadata: _defineProperty({}, key, value)\n      });\n      return this.onceConnected$.pipe(operators_1.flatMap(function (_) {\n        return _this2.makeRequest(message);\n      }), operators_1.map(function (res) {\n        if (ServerMessage_1.isServerMessageFail(res)) {\n          throw new Error(res.error || \"failed to set session metadata\");\n        }\n      }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n\n  }, {\n    key: \"publishEvent\",\n    value: function publishEvent(event, data) {\n      var _this3 = this;\n\n      var callWebhook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var message = ClientMessage_1.ClientMessagePublishEvent({\n        id: types_1.IntNumber(this.nextReqId++),\n        sessionId: this.sessionId,\n        event: event,\n        data: data,\n        callWebhook: callWebhook\n      });\n      return this.onceLinked$.pipe(operators_1.flatMap(function (_) {\n        return _this3.makeRequest(message);\n      }), operators_1.map(function (res) {\n        if (ServerMessage_1.isServerMessageFail(res)) {\n          throw new Error(res.error || \"failed to publish event\");\n        }\n\n        return res.eventId;\n      }));\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(message) {\n      this.ws.sendData(JSON.stringify(message));\n    }\n  }, {\n    key: \"updateLastHeartbeat\",\n    value: function updateLastHeartbeat() {\n      this.lastHeartbeatResponse = Date.now();\n    }\n  }, {\n    key: \"heartbeat\",\n    value: function heartbeat() {\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n        this.ws.disconnect();\n        return;\n      }\n\n      try {\n        this.ws.sendData(\"h\");\n      } catch (_a) {}\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(message) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REQUEST_TIMEOUT;\n      var reqId = message.id;\n\n      try {\n        this.sendData(message);\n      } catch (err) {\n        return rxjs_1.throwError(err);\n      } // await server message with corresponding id\n\n\n      return this.ws.incomingJSONData$.pipe(operators_1.timeoutWith(timeout, rxjs_1.throwError(new Error(\"request \".concat(reqId, \" timed out\")))), operators_1.filter(function (m) {\n        return m.id === reqId;\n      }), operators_1.take(1));\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate() {\n      var msg = ClientMessage_1.ClientMessageHostSession({\n        id: types_1.IntNumber(this.nextReqId++),\n        sessionId: this.sessionId,\n        sessionKey: this.sessionKey\n      });\n      return this.makeRequest(msg).pipe(operators_1.map(function (res) {\n        if (ServerMessage_1.isServerMessageFail(res)) {\n          throw new Error(res.error || \"failed to authentcate\");\n        }\n      }));\n    }\n  }, {\n    key: \"sendIsLinked\",\n    value: function sendIsLinked() {\n      var msg = ClientMessage_1.ClientMessageIsLinked({\n        id: types_1.IntNumber(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }, {\n    key: \"sendGetSessionConfig\",\n    value: function sendGetSessionConfig() {\n      var msg = ClientMessage_1.ClientMessageGetSessionConfig({\n        id: types_1.IntNumber(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }, {\n    key: \"connected$\",\n    get: function get() {\n      return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceConnected$\",\n    get: function get() {\n      return this.connected$.pipe(operators_1.filter(function (v) {\n        return v;\n      }), operators_1.take(1), operators_1.map(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"linked$\",\n    get: function get() {\n      return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceLinked$\",\n    get: function get() {\n      return this.linked$.pipe(operators_1.filter(function (v) {\n        return v;\n      }), operators_1.take(1), operators_1.map(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n\n  }, {\n    key: \"sessionConfig$\",\n    get: function get() {\n      return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n\n  }, {\n    key: \"incomingEvent$\",\n    get: function get() {\n      return this.ws.incomingJSONData$.pipe(operators_1.filter(function (m) {\n        if (m.type !== \"Event\") {\n          return false;\n        }\n\n        var sme = m;\n        return typeof sme.sessionId === \"string\" && typeof sme.eventId === \"string\" && typeof sme.event === \"string\" && typeof sme.data === \"string\";\n      }), operators_1.map(function (m) {\n        return m;\n      }));\n    }\n  }]);\n\n  return WalletLinkConnection;\n}();\n\nexports.WalletLinkConnection = WalletLinkConnection;","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/walletlink/dist/connection/WalletLinkConnection.js"],"names":["Object","defineProperty","exports","value","rxjs_1","require","operators_1","types_1","ClientMessage_1","RxWebSocket_1","ServerMessage_1","HEARTBEAT_INTERVAL","REQUEST_TIMEOUT","WalletLinkConnection","sessionId","sessionKey","serverUrl","WebSocketClass","WebSocket","subscriptions","Subscription","destroyed","lastHeartbeatResponse","nextReqId","IntNumber","connectedSubject","BehaviorSubject","linkedSubject","sessionConfigSubject","ReplaySubject","ws","RxWebSocket","add","connectionState$","pipe","skip","filter","cs","ConnectionState","DISCONNECTED","delay","_","flatMap","connect","retry","subscribe","switchMap","iif","CONNECTED","authenticate","tap","sendIsLinked","sendGetSessionConfig","map","of","distinctUntilChanged","catchError","connected","next","timer","i","updateLastHeartbeat","heartbeat","incomingData$","m","incomingJSONData$","includes","type","msg","linked","onlineGuests","webhookId","webhookUrl","metadata","Error","unsubscribe","disconnect","key","message","ClientMessageSetSessionConfig","id","onceConnected$","makeRequest","res","isServerMessageFail","error","event","data","callWebhook","ClientMessagePublishEvent","onceLinked$","eventId","sendData","JSON","stringify","Date","now","_a","timeout","reqId","err","throwError","timeoutWith","take","ClientMessageHostSession","ClientMessageIsLinked","ClientMessageGetSessionConfig","asObservable","connected$","v","linked$","sme"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst types_1 = require(\"../types\");\nconst ClientMessage_1 = require(\"./ClientMessage\");\nconst RxWebSocket_1 = require(\"./RxWebSocket\");\nconst ServerMessage_1 = require(\"./ServerMessage\");\nconst HEARTBEAT_INTERVAL = 10000;\nconst REQUEST_TIMEOUT = 60000;\n/**\n * WalletLink Connection\n */\nclass WalletLinkConnection {\n    /**\n     * Constructor\n     * @param sessionId Session ID\n     * @param sessionKey Session Key\n     * @param serverUrl Walletlinkd RPC URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(sessionId, sessionKey, serverUrl, WebSocketClass = WebSocket) {\n        this.sessionId = sessionId;\n        this.sessionKey = sessionKey;\n        this.subscriptions = new rxjs_1.Subscription();\n        this.destroyed = false;\n        this.lastHeartbeatResponse = 0;\n        this.nextReqId = types_1.IntNumber(1);\n        this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n        this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n        this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n        const ws = new RxWebSocket_1.RxWebSocket(serverUrl + \"/rpc\", WebSocketClass);\n        this.ws = ws;\n        // attempt to reconnect every 5 seconds when disconnected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED state\n        operators_1.skip(1), \n        // if DISCONNECTED and not destroyed\n        operators_1.filter(cs => cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !this.destroyed), \n        // wait 5 seconds\n        operators_1.delay(5000), \n        // check whether it's destroyed again\n        operators_1.filter(_ => !this.destroyed), \n        // reconnect\n        operators_1.flatMap(_ => ws.connect()), operators_1.retry())\n            .subscribe());\n        // perform authentication upon connection\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED and CONNECTING states\n        operators_1.skip(2), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, authenticate, and then check link status\n        this.authenticate().pipe(operators_1.tap(_ => this.sendIsLinked()), operators_1.tap(_ => this.sendGetSessionConfig()), operators_1.map(_ => true)), \n        // if not CONNECTED, emit false immediately\n        rxjs_1.of(false))), operators_1.distinctUntilChanged(), operators_1.catchError(_ => rxjs_1.of(false)))\n            .subscribe(connected => this.connectedSubject.next(connected)));\n        // send heartbeat every n seconds while connected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED state\n        operators_1.skip(1), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, start the heartbeat timer\n        rxjs_1.timer(0, HEARTBEAT_INTERVAL))))\n            .subscribe(i => \n        // first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? this.updateLastHeartbeat() : this.heartbeat()));\n        // handle server's heartbeat responses\n        this.subscriptions.add(ws.incomingData$\n            .pipe(operators_1.filter(m => m === \"h\"))\n            .subscribe(_ => this.updateLastHeartbeat()));\n        // handle link status updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe(operators_1.filter(m => [\"IsLinkedOK\", \"Linked\"].includes(m.type)))\n            .subscribe(m => {\n            const msg = m;\n            this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n        }));\n        // handle session config updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe(operators_1.filter(m => [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type)))\n            .subscribe(m => {\n            const msg = m;\n            this.sessionConfigSubject.next({\n                webhookId: msg.webhookId,\n                webhookUrl: msg.webhookUrl,\n                metadata: msg.metadata\n            });\n        }));\n    }\n    /**\n     * Make a connection to the server\n     */\n    connect() {\n        if (this.destroyed) {\n            throw new Error(\"instance is destroyed\");\n        }\n        this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletLinkConnection\n     */\n    destroy() {\n        this.subscriptions.unsubscribe();\n        this.ws.disconnect();\n        this.destroyed = true;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n    get connected$() {\n        return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n    get onceConnected$() {\n        return this.connected$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n    get linked$() {\n        return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n    get onceLinked$() {\n        return this.linked$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n    get sessionConfig$() {\n        return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n    get incomingEvent$() {\n        return this.ws.incomingJSONData$.pipe(operators_1.filter(m => {\n            if (m.type !== \"Event\") {\n                return false;\n            }\n            const sme = m;\n            return (typeof sme.sessionId === \"string\" &&\n                typeof sme.eventId === \"string\" &&\n                typeof sme.event === \"string\" &&\n                typeof sme.data === \"string\");\n        }), operators_1.map(m => m));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n    setSessionMetadata(key, value) {\n        const message = ClientMessage_1.ClientMessageSetSessionConfig({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            metadata: { [key]: value }\n        });\n        return this.onceConnected$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to set session metadata\");\n            }\n        }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n    publishEvent(event, data, callWebhook = false) {\n        const message = ClientMessage_1.ClientMessagePublishEvent({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            event,\n            data,\n            callWebhook\n        });\n        return this.onceLinked$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to publish event\");\n            }\n            return res.eventId;\n        }));\n    }\n    sendData(message) {\n        this.ws.sendData(JSON.stringify(message));\n    }\n    updateLastHeartbeat() {\n        this.lastHeartbeatResponse = Date.now();\n    }\n    heartbeat() {\n        if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n            this.ws.disconnect();\n            return;\n        }\n        try {\n            this.ws.sendData(\"h\");\n        }\n        catch (_a) { }\n    }\n    makeRequest(message, timeout = REQUEST_TIMEOUT) {\n        const reqId = message.id;\n        try {\n            this.sendData(message);\n        }\n        catch (err) {\n            return rxjs_1.throwError(err);\n        }\n        // await server message with corresponding id\n        return this.ws.incomingJSONData$.pipe(operators_1.timeoutWith(timeout, rxjs_1.throwError(new Error(`request ${reqId} timed out`))), operators_1.filter(m => m.id === reqId), operators_1.take(1));\n    }\n    authenticate() {\n        const msg = ClientMessage_1.ClientMessageHostSession({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            sessionKey: this.sessionKey\n        });\n        return this.makeRequest(msg).pipe(operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to authentcate\");\n            }\n        }));\n    }\n    sendIsLinked() {\n        const msg = ClientMessage_1.ClientMessageIsLinked({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n    sendGetSessionConfig() {\n        const msg = ClientMessage_1.ClientMessageGetSessionConfig({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n}\nexports.WalletLinkConnection = WalletLinkConnection;\n"]},"metadata":{},"sourceType":"script"}