{"ast":null,"code":"\"use strict\";\n\nvar visit = require('unist-util-visit');\n\nexports.ofType = function (types, mode) {\n  return function (node) {\n    types.forEach(function (type) {\n      return visit(node, type, disallow, true);\n    });\n    return node;\n  };\n\n  function disallow(node, index, parent) {\n    if (parent) {\n      untangle(node, index, parent, mode);\n    }\n  }\n};\n\nexports.ifNotMatch = function (allowNode, mode) {\n  return function (node) {\n    visit(node, disallow, true);\n    return node;\n  };\n\n  function disallow(node, index, parent) {\n    if (parent && !allowNode(node, index, parent)) {\n      untangle(node, index, parent, mode);\n    }\n  }\n};\n\nfunction untangle(node, index, parent, mode) {\n  if (mode === 'remove') {\n    parent.children.splice(index, 1);\n  } else if (mode === 'unwrap') {\n    var args = [index, 1];\n\n    if (node.children) {\n      args = args.concat(node.children);\n    }\n\n    Array.prototype.splice.apply(parent.children, args);\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/react-markdown/lib/plugins/disallow-node.js"],"names":["visit","require","exports","ofType","types","mode","node","forEach","type","disallow","index","parent","untangle","ifNotMatch","allowNode","children","splice","args","concat","Array","prototype","apply"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB;;AAEAC,OAAO,CAACC,MAAR,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACtC,SAAO,UAAUC,IAAV,EAAgB;AACrBF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,aAAOR,KAAK,CAACM,IAAD,EAAOE,IAAP,EAAaC,QAAb,EAAuB,IAAvB,CAAZ;AACD,KAFD;AAGA,WAAOH,IAAP;AACD,GALD;;AAOA,WAASG,QAAT,CAAkBH,IAAlB,EAAwBI,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,QAAIA,MAAJ,EAAY;AACVC,MAAAA,QAAQ,CAACN,IAAD,EAAOI,KAAP,EAAcC,MAAd,EAAsBN,IAAtB,CAAR;AACD;AACF;AACF,CAbD;;AAeAH,OAAO,CAACW,UAAR,GAAqB,UAAUC,SAAV,EAAqBT,IAArB,EAA2B;AAC9C,SAAO,UAAUC,IAAV,EAAgB;AACrBN,IAAAA,KAAK,CAACM,IAAD,EAAOG,QAAP,EAAiB,IAAjB,CAAL;AACA,WAAOH,IAAP;AACD,GAHD;;AAKA,WAASG,QAAT,CAAkBH,IAAlB,EAAwBI,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,QAAIA,MAAM,IAAI,CAACG,SAAS,CAACR,IAAD,EAAOI,KAAP,EAAcC,MAAd,CAAxB,EAA+C;AAC7CC,MAAAA,QAAQ,CAACN,IAAD,EAAOI,KAAP,EAAcC,MAAd,EAAsBN,IAAtB,CAAR;AACD;AACF;AACF,CAXD;;AAaA,SAASO,QAAT,CAAkBN,IAAlB,EAAwBI,KAAxB,EAA+BC,MAA/B,EAAuCN,IAAvC,EAA6C;AAC3C,MAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBM,IAAAA,MAAM,CAACI,QAAP,CAAgBC,MAAhB,CAAuBN,KAAvB,EAA8B,CAA9B;AACD,GAFD,MAEO,IAAIL,IAAI,KAAK,QAAb,EAAuB;AAC5B,QAAIY,IAAI,GAAG,CAACP,KAAD,EAAQ,CAAR,CAAX;;AAEA,QAAIJ,IAAI,CAACS,QAAT,EAAmB;AACjBE,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAYZ,IAAI,CAACS,QAAjB,CAAP;AACD;;AAEDI,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBK,KAAvB,CAA6BV,MAAM,CAACI,QAApC,EAA8CE,IAA9C;AACD;AACF","sourcesContent":["\"use strict\";\n\nvar visit = require('unist-util-visit');\n\nexports.ofType = function (types, mode) {\n  return function (node) {\n    types.forEach(function (type) {\n      return visit(node, type, disallow, true);\n    });\n    return node;\n  };\n\n  function disallow(node, index, parent) {\n    if (parent) {\n      untangle(node, index, parent, mode);\n    }\n  }\n};\n\nexports.ifNotMatch = function (allowNode, mode) {\n  return function (node) {\n    visit(node, disallow, true);\n    return node;\n  };\n\n  function disallow(node, index, parent) {\n    if (parent && !allowNode(node, index, parent)) {\n      untangle(node, index, parent, mode);\n    }\n  }\n};\n\nfunction untangle(node, index, parent, mode) {\n  if (mode === 'remove') {\n    parent.children.splice(index, 1);\n  } else if (mode === 'unwrap') {\n    var args = [index, 1];\n\n    if (node.children) {\n      args = args.concat(node.children);\n    }\n\n    Array.prototype.splice.apply(parent.children, args);\n  }\n}"]},"metadata":{},"sourceType":"script"}