{"ast":null,"code":"import _objectSpread from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _initialState;import{createReducer}from'@reduxjs/toolkit';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';var initialState=(_initialState={independentField:Field.INPUT,typedValue:''},_defineProperty(_initialState,Field.INPUT,{currencyId:''}),_defineProperty(_initialState,Field.OUTPUT,{currencyId:''}),_defineProperty(_initialState,\"recipient\",null),_initialState);export default createReducer(initialState,function(builder){return builder.addCase(replaceSwapState,function(state,_ref){var _ref2;var _ref$payload=_ref.payload,typedValue=_ref$payload.typedValue,recipient=_ref$payload.recipient,field=_ref$payload.field,inputCurrencyId=_ref$payload.inputCurrencyId,outputCurrencyId=_ref$payload.outputCurrencyId;return _ref2={},_defineProperty(_ref2,Field.INPUT,{currencyId:inputCurrencyId}),_defineProperty(_ref2,Field.OUTPUT,{currencyId:outputCurrencyId}),_defineProperty(_ref2,\"independentField\",field),_defineProperty(_ref2,\"typedValue\",typedValue),_defineProperty(_ref2,\"recipient\",recipient),_ref2;}).addCase(selectCurrency,function(state,_ref3){var _ref3$payload=_ref3.payload,currencyId=_ref3$payload.currencyId,field=_ref3$payload.field;var otherField=field===Field.INPUT?Field.OUTPUT:Field.INPUT;if(currencyId===state[otherField].currencyId){var _objectSpread2;// the case where we have to swap the order\nreturn _objectSpread(_objectSpread({},state),{},(_objectSpread2={independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT},_defineProperty(_objectSpread2,field,{currencyId:currencyId}),_defineProperty(_objectSpread2,otherField,{currencyId:state[field].currencyId}),_objectSpread2));}else{// the normal case\nreturn _objectSpread(_objectSpread({},state),{},_defineProperty({},field,{currencyId:currencyId}));}}).addCase(switchCurrencies,function(state){var _objectSpread4;return _objectSpread(_objectSpread({},state),{},(_objectSpread4={independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT},_defineProperty(_objectSpread4,Field.INPUT,{currencyId:state[Field.OUTPUT].currencyId}),_defineProperty(_objectSpread4,Field.OUTPUT,{currencyId:state[Field.INPUT].currencyId}),_objectSpread4));}).addCase(typeInput,function(state,_ref4){var _ref4$payload=_ref4.payload,field=_ref4$payload.field,typedValue=_ref4$payload.typedValue;return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}).addCase(setRecipient,function(state,_ref5){var recipient=_ref5.payload.recipient;state.recipient=recipient;});});","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/state/swap/reducer.ts"],"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","builder","addCase","state","payload","recipient","field","inputCurrencyId","outputCurrencyId","otherField"],"mappings":"yUAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OAASC,KAAT,CAAgBC,gBAAhB,CAAkCC,cAAlC,CAAkDC,YAAlD,CAAgEC,gBAAhE,CAAkFC,SAAlF,KAAmG,WAAnG,CAeA,GAAMC,CAAAA,YAAuB,iBAC3BC,gBAAgB,CAAEP,KAAK,CAACQ,KADG,CAE3BC,UAAU,CAAE,EAFe,gCAG1BT,KAAK,CAACQ,KAHoB,CAGZ,CACbE,UAAU,CAAE,EADC,CAHY,gCAM1BV,KAAK,CAACW,MANoB,CAMX,CACdD,UAAU,CAAE,EADE,CANW,4CAShB,IATgB,gBAA7B,CAYA,cAAeX,CAAAA,aAAa,CAAYO,YAAZ,CAA0B,SAAAM,OAAO,QAC3DA,CAAAA,OAAO,CACJC,OADH,CAEIZ,gBAFJ,CAGI,SAACa,KAAD,MAA6F,iCAAnFC,OAAmF,CAAxEN,UAAwE,cAAxEA,UAAwE,CAA5DO,SAA4D,cAA5DA,SAA4D,CAAjDC,KAAiD,cAAjDA,KAAiD,CAA1CC,eAA0C,cAA1CA,eAA0C,CAAzBC,gBAAyB,cAAzBA,gBAAyB,CAC3F,sCACGnB,KAAK,CAACQ,KADT,CACiB,CACbE,UAAU,CAAEQ,eADC,CADjB,wBAIGlB,KAAK,CAACW,MAJT,CAIkB,CACdD,UAAU,CAAES,gBADE,CAJlB,2CAOoBF,KAPpB,qCAQcR,UARd,oCASEO,SATF,QAWD,CAfL,EAiBGH,OAjBH,CAiBWX,cAjBX,CAiB2B,SAACY,KAAD,OAA+C,yBAArCC,OAAqC,CAA1BL,UAA0B,eAA1BA,UAA0B,CAAdO,KAAc,eAAdA,KAAc,CACtE,GAAMG,CAAAA,UAAU,CAAGH,KAAK,GAAKjB,KAAK,CAACQ,KAAhB,CAAwBR,KAAK,CAACW,MAA9B,CAAuCX,KAAK,CAACQ,KAAhE,CACA,GAAIE,UAAU,GAAKI,KAAK,CAACM,UAAD,CAAL,CAAkBV,UAArC,CAAiD,oBAC/C;AACA,sCACKI,KADL,sBAEEP,gBAAgB,CAAEO,KAAK,CAACP,gBAAN,GAA2BP,KAAK,CAACQ,KAAjC,CAAyCR,KAAK,CAACW,MAA/C,CAAwDX,KAAK,CAACQ,KAFlF,iCAGGS,KAHH,CAGW,CAAEP,UAAU,CAAEA,UAAd,CAHX,iCAIGU,UAJH,CAIgB,CAAEV,UAAU,CAAEI,KAAK,CAACG,KAAD,CAAL,CAAaP,UAA3B,CAJhB,mBAMD,CARD,IAQO,CACL;AACA,sCACKI,KADL,wBAEGG,KAFH,CAEW,CAAEP,UAAU,CAAEA,UAAd,CAFX,GAID,CACF,CAlCH,EAmCGG,OAnCH,CAmCWT,gBAnCX,CAmC6B,SAAAU,KAAK,CAAI,oBAClC,sCACKA,KADL,sBAEEP,gBAAgB,CAAEO,KAAK,CAACP,gBAAN,GAA2BP,KAAK,CAACQ,KAAjC,CAAyCR,KAAK,CAACW,MAA/C,CAAwDX,KAAK,CAACQ,KAFlF,iCAGGR,KAAK,CAACQ,KAHT,CAGiB,CAAEE,UAAU,CAAEI,KAAK,CAACd,KAAK,CAACW,MAAP,CAAL,CAAoBD,UAAlC,CAHjB,iCAIGV,KAAK,CAACW,MAJT,CAIkB,CAAED,UAAU,CAAEI,KAAK,CAACd,KAAK,CAACQ,KAAP,CAAL,CAAmBE,UAAjC,CAJlB,mBAMD,CA1CH,EA2CGG,OA3CH,CA2CWR,SA3CX,CA2CsB,SAACS,KAAD,OAA+C,yBAArCC,OAAqC,CAA1BE,KAA0B,eAA1BA,KAA0B,CAAnBR,UAAmB,eAAnBA,UAAmB,CACjE,sCACKK,KADL,MAEEP,gBAAgB,CAAEU,KAFpB,CAGER,UAAU,CAAVA,UAHF,GAKD,CAjDH,EAkDGI,OAlDH,CAkDWV,YAlDX,CAkDyB,SAACW,KAAD,OAAuC,IAAlBE,CAAAA,SAAkB,OAA7BD,OAA6B,CAAlBC,SAAkB,CAC5DF,KAAK,CAACE,SAAN,CAAkBA,SAAlB,CACD,CApDH,CAD2D,EAAjC,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n}\n\nexport default createReducer<SwapState>(initialState, builder =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId: currencyId },\n          [otherField]: { currencyId: state[field].currencyId }\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId: currencyId }\n        }\n      }\n    })\n    .addCase(switchCurrencies, state => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId }\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"]},"metadata":{},"sourceType":"module"}