{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar replace = require('replace-ext');\n\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\nproto.toString = toString;\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\n/* Construct a new file. */\n\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {\n      contents: options\n    };\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n  /* Set path related properties in the correct order. */\n\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n  /* Set non-path related properties. */\n\n\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n/* Access full path (`~/index.min.js`). */\n\n\nObject.defineProperty(proto, 'path', {\n  get: function get() {\n    return this.history[this.history.length - 1];\n  },\n  set: function set(path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n/* Access parent path (`~`). */\n\nObject.defineProperty(proto, 'dirname', {\n  get: function get() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function set(dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n/* Access basename (`index.min.js`). */\n\nObject.defineProperty(proto, 'basename', {\n  get: function get() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function set(basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n/* Access extname (`.js`). */\n\nObject.defineProperty(proto, 'extname', {\n  get: function get() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function set(extname) {\n    var ext = extname || '';\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n/* Access stem (`index.min`). */\n\nObject.defineProperty(proto, 'stem', {\n  get: function get() {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function set(stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n/* Get the value of the file. */\n\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\n\n\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n/* Assert that `part` is not empty. */\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n/* Assert `path` exists. */\n\n\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/vfile/core.js"],"names":["path","require","replace","buffer","module","exports","VFile","own","hasOwnProperty","proto","prototype","toString","order","options","prop","index","length","contents","data","messages","history","cwd","process","call","indexOf","Object","defineProperty","get","set","assertNonEmpty","push","dirname","undefined","assertPath","join","basename","assertPart","extname","ext","charAt","Error","stem","encoding","value","String","part","name","sep"],"mappings":"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","sourcesContent":["'use strict';\n\nvar path = require('path');\nvar replace = require('replace-ext');\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\n\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n\nproto.toString = toString;\n\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\nvar order = [\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n];\n\n/* Construct a new file. */\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options};\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n\n  /* Set path related properties in the correct order. */\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  /* Set non-path related properties. */\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\n/* Access full path (`~/index.min.js`). */\nObject.defineProperty(proto, 'path', {\n  get: function () {\n    return this.history[this.history.length - 1];\n  },\n  set: function (path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n\n/* Access parent path (`~`). */\nObject.defineProperty(proto, 'dirname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function (dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n\n/* Access basename (`index.min.js`). */\nObject.defineProperty(proto, 'basename', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function (basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n\n/* Access extname (`.js`). */\nObject.defineProperty(proto, 'extname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function (extname) {\n    var ext = extname || '';\n\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n\n/* Access stem (`index.min`). */\nObject.defineProperty(proto, 'stem', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function (stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n\n/* Get the value of the file. */\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/* Assert that `part` is not empty. */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/* Assert `path` exists. */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}