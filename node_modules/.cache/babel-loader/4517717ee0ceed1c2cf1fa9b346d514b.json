{"ast":null,"code":"'use strict';\n\nvar _require = require('multibase/src/constants'),\n    names = _require.names;\n\nvar _require2 = require('web-encoding'),\n    TextEncoder = _require2.TextEncoder;\n\nvar utf8Encoder = new TextEncoder();\n/**\n * Create a `Uint8Array` from the passed string\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\n\nfunction fromString(string) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n\n  var codec = names[encoding];\n\n  if (!codec) {\n    throw new Error('Unknown base');\n  }\n\n  return codec.decode(string);\n}\n\nmodule.exports = fromString;","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/multicodec/node_modules/uint8arrays/from-string.js"],"names":["require","names","TextEncoder","utf8Encoder","fromString","string","encoding","encode","codec","Error","decode","module","exports"],"mappings":"AAAA;;eAEkBA,OAAO,CAAC,yBAAD,C;IAAjBC,K,YAAAA,K;;gBACgBD,OAAO,CAAC,cAAD,C;IAAvBE,W,aAAAA,W;;AACR,IAAMC,WAAW,GAAG,IAAID,WAAJ,EAApB;AAEA;;;;;;;;;AAQA,SAASE,UAAT,CAAqBC,MAArB,EAAgD;AAAA,MAAnBC,QAAmB,uEAAR,MAAQ;;AAC9C,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC/C,WAAOH,WAAW,CAACI,MAAZ,CAAmBF,MAAnB,CAAP;AACD;;AAED,MAAMG,KAAK,GAAGP,KAAK,CAACK,QAAD,CAAnB;;AAEA,MAAI,CAACE,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACD;;AAED,SAAOD,KAAK,CAACE,MAAN,CAAaL,MAAb,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBR,UAAjB","sourcesContent":["'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.decode(string)\n}\n\nmodule.exports = fromString\n"]},"metadata":{},"sourceType":"script"}