{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/code-inline');\n\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\nvar C_TICK = '`';\n/* Tokenise inline code. */\n\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var tickQueue = '';\n  var contentQueue;\n  var subqueue;\n  var count;\n  var openingCount;\n  var subvalue;\n  var character;\n  var found;\n  var next;\n\n  while (index < length) {\n    if (value.charAt(index) !== C_TICK) {\n      break;\n    }\n\n    queue += C_TICK;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  subvalue = queue;\n  openingCount = index;\n  queue = '';\n  next = value.charAt(index);\n  count = 0;\n\n  while (index < length) {\n    character = next;\n    next = value.charAt(index + 1);\n\n    if (character === C_TICK) {\n      count++;\n      tickQueue += character;\n    } else {\n      count = 0;\n      queue += character;\n    }\n\n    if (count && next !== C_TICK) {\n      if (count === openingCount) {\n        subvalue += queue + tickQueue;\n        found = true;\n        break;\n      }\n\n      queue += tickQueue;\n      tickQueue = '';\n    }\n\n    index++;\n  }\n\n  if (!found) {\n    if (openingCount % 2 !== 0) {\n      return;\n    }\n\n    queue = '';\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  contentQueue = '';\n  subqueue = '';\n  length = queue.length;\n  index = -1;\n\n  while (++index < length) {\n    character = queue.charAt(index);\n\n    if (whitespace(character)) {\n      subqueue += character;\n      continue;\n    }\n\n    if (subqueue) {\n      if (contentQueue) {\n        contentQueue += subqueue;\n      }\n\n      subqueue = '';\n    }\n\n    contentQueue += character;\n  }\n\n  return eat(subvalue)({\n    type: 'inlineCode',\n    value: contentQueue\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/code-inline.js"],"names":["whitespace","require","locate","module","exports","inlineCode","locator","C_TICK","eat","value","silent","length","index","queue","tickQueue","contentQueue","subqueue","count","openingCount","subvalue","character","found","next","charAt","type"],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/code-inline');\n\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\n\nvar C_TICK = '`';\n\n/* Tokenise inline code. */\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var tickQueue = '';\n  var contentQueue;\n  var subqueue;\n  var count;\n  var openingCount;\n  var subvalue;\n  var character;\n  var found;\n  var next;\n\n  while (index < length) {\n    if (value.charAt(index) !== C_TICK) {\n      break;\n    }\n\n    queue += C_TICK;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  subvalue = queue;\n  openingCount = index;\n  queue = '';\n  next = value.charAt(index);\n  count = 0;\n\n  while (index < length) {\n    character = next;\n    next = value.charAt(index + 1);\n\n    if (character === C_TICK) {\n      count++;\n      tickQueue += character;\n    } else {\n      count = 0;\n      queue += character;\n    }\n\n    if (count && next !== C_TICK) {\n      if (count === openingCount) {\n        subvalue += queue + tickQueue;\n        found = true;\n        break;\n      }\n\n      queue += tickQueue;\n      tickQueue = '';\n    }\n\n    index++;\n  }\n\n  if (!found) {\n    if (openingCount % 2 !== 0) {\n      return;\n    }\n\n    queue = '';\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  contentQueue = '';\n  subqueue = '';\n  length = queue.length;\n  index = -1;\n\n  while (++index < length) {\n    character = queue.charAt(index);\n\n    if (whitespace(character)) {\n      subqueue += character;\n      continue;\n    }\n\n    if (subqueue) {\n      if (contentQueue) {\n        contentQueue += subqueue;\n      }\n\n      subqueue = '';\n    }\n\n    contentQueue += character;\n  }\n\n  return eat(subvalue)({\n    type: 'inlineCode',\n    value: contentQueue\n  });\n}\n"]},"metadata":{},"sourceType":"script"}