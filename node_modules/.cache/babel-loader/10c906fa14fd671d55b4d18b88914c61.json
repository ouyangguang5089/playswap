{"ast":null,"code":"import _slicedToArray from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/projects/testswap/uniswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  margin-left: 0.25rem;\\n  font-size: 0.825rem;\\n  \",\";\\n  align-items: center;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  flex-shrink: 0;\\n  display: flex;\\n  text-decoration: none;\\n  font-size: 0.825rem;\\n  :hover,\\n  :active,\\n  :focus {\\n    text-decoration: none;\\n    color: \",\";\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import styled from'styled-components';import useCopyClipboard from'../../hooks/useCopyClipboard';import{LinkStyledButton}from'../../theme';import{CheckCircle,Copy}from'react-feather';var CopyIcon=styled(LinkStyledButton)(_templateObject(),function(_ref){var theme=_ref.theme;return theme.text3;},function(_ref2){var theme=_ref2.theme;return theme.text2;});var TransactionStatusText=styled.span(_templateObject2(),function(_ref3){var theme=_ref3.theme;return theme.flexRowNoWrap;});export default function CopyHelper(props){var _useCopyClipboard=useCopyClipboard(),_useCopyClipboard2=_slicedToArray(_useCopyClipboard,2),isCopied=_useCopyClipboard2[0],setCopied=_useCopyClipboard2[1];return/*#__PURE__*/React.createElement(CopyIcon,{onClick:function onClick(){return setCopied(props.toCopy);}},isCopied?/*#__PURE__*/React.createElement(TransactionStatusText,null,/*#__PURE__*/React.createElement(CheckCircle,{size:'16'}),/*#__PURE__*/React.createElement(TransactionStatusText,null,\"Copied\")):/*#__PURE__*/React.createElement(TransactionStatusText,null,/*#__PURE__*/React.createElement(Copy,{size:'16'})),isCopied?'':props.children);}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/src/components/AccountDetails/Copy.tsx"],"names":["React","styled","useCopyClipboard","LinkStyledButton","CheckCircle","Copy","CopyIcon","theme","text3","text2","TransactionStatusText","span","flexRowNoWrap","CopyHelper","props","isCopied","setCopied","toCopy","children"],"mappings":"u2BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8BAA7B,CAEA,OAASC,gBAAT,KAAiC,aAAjC,CACA,OAASC,WAAT,CAAsBC,IAAtB,KAAkC,eAAlC,CAEA,GAAMC,CAAAA,QAAQ,CAAGL,MAAM,CAACE,gBAAD,CAAT,mBACH,kBAAGI,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,KAArB,EADG,CAUD,mBAAGD,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACE,KAArB,EAVC,CAAd,CAaA,GAAMC,CAAAA,qBAAqB,CAAGT,MAAM,CAACU,IAAV,oBAGvB,mBAAGJ,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACK,aAArB,EAHuB,CAA3B,CAOA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2E,uBAC1DZ,gBAAgB,EAD0C,wDACjFa,QADiF,uBACvEC,SADuE,uBAGxF,mBACE,oBAAC,QAAD,EAAU,OAAO,CAAE,yBAAMA,CAAAA,SAAS,CAACF,KAAK,CAACG,MAAP,CAAf,EAAnB,EACGF,QAAQ,cACP,oBAAC,qBAAD,mBACE,oBAAC,WAAD,EAAa,IAAI,CAAE,IAAnB,EADF,cAEE,oBAAC,qBAAD,eAFF,CADO,cAMP,oBAAC,qBAAD,mBACE,oBAAC,IAAD,EAAM,IAAI,CAAE,IAAZ,EADF,CAPJ,CAWGA,QAAQ,CAAG,EAAH,CAAQD,KAAK,CAACI,QAXzB,CADF,CAeD","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport useCopyClipboard from '../../hooks/useCopyClipboard'\n\nimport { LinkStyledButton } from '../../theme'\nimport { CheckCircle, Copy } from 'react-feather'\n\nconst CopyIcon = styled(LinkStyledButton)`\n  color: ${({ theme }) => theme.text3};\n  flex-shrink: 0;\n  display: flex;\n  text-decoration: none;\n  font-size: 0.825rem;\n  :hover,\n  :active,\n  :focus {\n    text-decoration: none;\n    color: ${({ theme }) => theme.text2};\n  }\n`\nconst TransactionStatusText = styled.span`\n  margin-left: 0.25rem;\n  font-size: 0.825rem;\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n`\n\nexport default function CopyHelper(props: { toCopy: string; children?: React.ReactNode }) {\n  const [isCopied, setCopied] = useCopyClipboard()\n\n  return (\n    <CopyIcon onClick={() => setCopied(props.toCopy)}>\n      {isCopied ? (\n        <TransactionStatusText>\n          <CheckCircle size={'16'} />\n          <TransactionStatusText>Copied</TransactionStatusText>\n        </TransactionStatusText>\n      ) : (\n        <TransactionStatusText>\n          <Copy size={'16'} />\n        </TransactionStatusText>\n      )}\n      {isCopied ? '' : props.children}\n    </CopyIcon>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}