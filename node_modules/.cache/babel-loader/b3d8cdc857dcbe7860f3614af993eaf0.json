{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\n\nvar decimal = require('is-decimal');\n\nvar trimTrailingLines = require('trim-trailing-lines');\n\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = paragraph;\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar TAB_SIZE = 4;\n/* Tokenise paragraph. */\n\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var gfm = settings.gfm;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(C_NEWLINE);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n\n  while (index < length) {\n    /* Eat everything if there’s no following newline. */\n    if (index === -1) {\n      index = length;\n      break;\n    }\n    /* Stop if the next character is NEWLINE. */\n\n\n    if (value.charAt(index + 1) === C_NEWLINE) {\n      break;\n    }\n    /* In commonmark-mode, following indented lines\n     * are part of the paragraph. */\n\n\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n\n      while (position < length) {\n        character = value.charAt(position);\n\n        if (character === C_TAB) {\n          size = TAB_SIZE;\n          break;\n        } else if (character === C_SPACE) {\n          size++;\n        } else {\n          break;\n        }\n\n        position++;\n      }\n\n      if (size >= TAB_SIZE) {\n        index = value.indexOf(C_NEWLINE, index + 1);\n        continue;\n      }\n    }\n\n    subvalue = value.slice(index + 1);\n    /* Check if the following code contains a possible\n     * block. */\n\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n    /* Break if the following line starts a list, when\n     * already in a list, or when in commonmark, or when\n     * in gfm mode and the bullet is *not* numeric. */\n\n\n    if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !decimal(trim.left(subvalue).charAt(0)))) {\n      break;\n    }\n\n    position = index;\n    index = value.indexOf(C_NEWLINE, index + 1);\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n\n  if (trim(subvalue) === '') {\n    eat(subvalue);\n    return null;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/remark-parse/lib/tokenize/paragraph.js"],"names":["trim","require","decimal","trimTrailingLines","interrupt","module","exports","paragraph","C_NEWLINE","C_TAB","C_SPACE","TAB_SIZE","eat","value","silent","self","settings","options","commonmark","gfm","tokenizers","blockTokenizers","interruptors","interruptParagraph","index","indexOf","length","position","subvalue","character","size","now","charAt","slice","list","call","inList","left","type","children","tokenizeInline"],"mappings":"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","sourcesContent":["'use strict';\n\nvar trim = require('trim');\nvar decimal = require('is-decimal');\nvar trimTrailingLines = require('trim-trailing-lines');\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = paragraph;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\n\nvar TAB_SIZE = 4;\n\n/* Tokenise paragraph. */\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var gfm = settings.gfm;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(C_NEWLINE);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n\n  while (index < length) {\n    /* Eat everything if there’s no following newline. */\n    if (index === -1) {\n      index = length;\n      break;\n    }\n\n    /* Stop if the next character is NEWLINE. */\n    if (value.charAt(index + 1) === C_NEWLINE) {\n      break;\n    }\n\n    /* In commonmark-mode, following indented lines\n     * are part of the paragraph. */\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n\n      while (position < length) {\n        character = value.charAt(position);\n\n        if (character === C_TAB) {\n          size = TAB_SIZE;\n          break;\n        } else if (character === C_SPACE) {\n          size++;\n        } else {\n          break;\n        }\n\n        position++;\n      }\n\n      if (size >= TAB_SIZE) {\n        index = value.indexOf(C_NEWLINE, index + 1);\n        continue;\n      }\n    }\n\n    subvalue = value.slice(index + 1);\n\n    /* Check if the following code contains a possible\n     * block. */\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n\n    /* Break if the following line starts a list, when\n     * already in a list, or when in commonmark, or when\n     * in gfm mode and the bullet is *not* numeric. */\n    if (\n      tokenizers.list.call(self, eat, subvalue, true) &&\n      (\n        self.inList ||\n        commonmark ||\n        (gfm && !decimal(trim.left(subvalue).charAt(0)))\n      )\n    ) {\n      break;\n    }\n\n    position = index;\n    index = value.indexOf(C_NEWLINE, index + 1);\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n\n  if (trim(subvalue) === '') {\n    eat(subvalue);\n\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}\n"]},"metadata":{},"sourceType":"script"}