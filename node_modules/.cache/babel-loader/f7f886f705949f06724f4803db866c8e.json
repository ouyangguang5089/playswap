{"ast":null,"code":"/*\r\nLicense gpl-3.0 http://www.gnu.org/licenses/gpl-3.0-standalone.html\r\n*/\n\n/*jslint\r\n    evil: true,\r\n    node: true\r\n*/\n'use strict';\n/**\r\n * Clones non native JavaScript functions, or references native functions.\r\n * @author <a href=\"mailto:matthewkastor@gmail.com\">Matthew Kastor</a>\r\n * @param {Function} func The function to clone.\r\n * @returns {Function} Returns a clone of the non native function, or a\r\n *  reference to the native function.\r\n */\n\nfunction cloneFunction(func) {\n  var out, str;\n\n  try {\n    str = func.toString();\n\n    if (/\\[native code\\]/.test(str)) {\n      out = func;\n    } else {\n      out = eval('(function(){return ' + str + '}());');\n    }\n  } catch (e) {\n    throw new Error(e.message + '\\r\\n\\r\\n' + str);\n  }\n\n  return out;\n}\n\nmodule.exports = cloneFunction;","map":{"version":3,"sources":["/projects/testswap/uniswap-interface/node_modules/clone-function/src/clone-function.js"],"names":["cloneFunction","func","out","str","toString","test","eval","e","Error","message","module","exports"],"mappings":"AAAA;;;;AAGA;;;;AAIA;AACA;;;;;;;;AAOA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,MAAIC,GAAJ,EAASC,GAAT;;AACA,MAAI;AACAA,IAAAA,GAAG,GAAGF,IAAI,CAACG,QAAL,EAAN;;AACA,QAAI,kBAAkBC,IAAlB,CAAuBF,GAAvB,CAAJ,EAAiC;AAC7BD,MAAAA,GAAG,GAAGD,IAAN;AACH,KAFD,MAEO;AACHC,MAAAA,GAAG,GAAGI,IAAI,CAAC,wBAAwBH,GAAxB,GAA8B,OAA/B,CAAV;AACH;AACJ,GAPD,CAOE,OAAOI,CAAP,EAAU;AACR,UAAM,IAAIC,KAAJ,CAAUD,CAAC,CAACE,OAAF,GAAY,UAAZ,GAAyBN,GAAnC,CAAN;AACH;;AACD,SAAOD,GAAP;AACH;;AACDQ,MAAM,CAACC,OAAP,GAAiBX,aAAjB","sourcesContent":["/*\r\nLicense gpl-3.0 http://www.gnu.org/licenses/gpl-3.0-standalone.html\r\n*/\r\n/*jslint\r\n    evil: true,\r\n    node: true\r\n*/\r\n'use strict';\r\n/**\r\n * Clones non native JavaScript functions, or references native functions.\r\n * @author <a href=\"mailto:matthewkastor@gmail.com\">Matthew Kastor</a>\r\n * @param {Function} func The function to clone.\r\n * @returns {Function} Returns a clone of the non native function, or a\r\n *  reference to the native function.\r\n */\r\nfunction cloneFunction(func) {\r\n    var out, str;\r\n    try {\r\n        str = func.toString();\r\n        if (/\\[native code\\]/.test(str)) {\r\n            out = func;\r\n        } else {\r\n            out = eval('(function(){return ' + str + '}());');\r\n        }\r\n    } catch (e) {\r\n        throw new Error(e.message + '\\r\\n\\r\\n' + str);\r\n    }\r\n    return out;\r\n}\r\nmodule.exports = cloneFunction;"]},"metadata":{},"sourceType":"script"}